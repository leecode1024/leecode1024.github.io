<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lee</title>
  
  <subtitle>捣鼓一个博客玩</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/leecode1024/leecode1024.github.io/"/>
  <updated>2021-07-29T06:50:02.230Z</updated>
  <id>https://github.com/leecode1024/leecode1024.github.io/</id>
  
  <author>
    <name>李义</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2021/07/29/springboot/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2021/07/29/springboot/</id>
    <published>2021-07-29T06:42:06.000Z</published>
    <updated>2021-07-29T06:50:02.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h1 id="一、SpringBoot入门"><a href="#一、SpringBoot入门" class="headerlink" title="一、SpringBoot入门"></a>一、SpringBoot入门</h1><h2 id="1、SpringBoot简介"><a href="#1、SpringBoot简介" class="headerlink" title="1、SpringBoot简介"></a>1、SpringBoot简介</h2><ol><li>简化spring应用开发的一个框架</li><li>整个spring技术栈的一个大融合</li><li>J2EE开发的一站式解决方案</li></ol><a id="more"></a><h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>微服务：架构风格</p><p>一个应用应该是一组小型服务；可以通过http方式进行沟通；</p><p>每一个功能元素最终都是一个可独立代替和独立升级的单软件元；</p><h2 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h2><h3 id="1、MAVEN设置；"><a href="#1、MAVEN设置；" class="headerlink" title="1、MAVEN设置；"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/06.png" alt=""></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/07.png" alt=""></p><h2 id="4、SpringBoot-Hello-Wrld"><a href="#4、SpringBoot-Hello-Wrld" class="headerlink" title="4、SpringBoot Hello Wrld"></a>4、SpringBoot Hello Wrld</h2><h3 id="1-创建一个maven工程（jar）"><a href="#1-创建一个maven工程（jar）" class="headerlink" title="1.创建一个maven工程（jar）"></a>1.创建一个maven工程（jar）</h3><h3 id="2-导入依赖springboot相关的依赖"><a href="#2-导入依赖springboot相关的依赖" class="headerlink" title="2.导入依赖springboot相关的依赖"></a>2.导入依赖springboot相关的依赖</h3><h3 id="3-编写一个主程序：启动springboot应用"><a href="#3-编写一个主程序：启动springboot应用" class="headerlink" title="3.编写一个主程序：启动springboot应用"></a>3.编写一个主程序：启动springboot应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//来标注一个主程序类，说明这是一个springboot应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HellowWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HellowWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-编写相关的controller等等"><a href="#4-编写相关的controller等等" class="headerlink" title="4.编写相关的controller等等"></a>4.编写相关的controller等等</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-运行主程序测试"><a href="#5-运行主程序测试" class="headerlink" title="5.运行主程序测试"></a>5.运行主程序测试</h3><p><a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p><h3 id="6-简化部署"><a href="#6-简化部署" class="headerlink" title="6.简化部署"></a>6.简化部署</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--可将应用打包成一个可执行的jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/01.png" alt=""></p><p>将这个应用达成jar包，直接使用java -jar xxx.jar命令执行；</p><h2 id="5、Hello-World探究"><a href="#5、Hello-World探究" class="headerlink" title="5、Hello World探究"></a>5、Hello World探究</h2><h3 id="1-POM文件"><a href="#1-POM文件" class="headerlink" title="1.POM文件"></a>1.POM文件</h3><h4 id="1-父项目"><a href="#1-父项目" class="headerlink" title="1.父项目"></a>1.父项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">他的父项目是</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">他真正管理Spring Boot应用里面的所有依赖</span><br></pre></td></tr></table></figure><p>Springboot的版本仲裁中心；</p><p>以后我们带入依赖默认是不需要写版本的；（没有在dependencies里面管理的依赖自然需要声明版本号）</p><h4 id="2-启动器"><a href="#2-启动器" class="headerlink" title="2.启动器"></a>2.启动器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-boot-starter</strong>-web：</p><p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件。</p><p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters(启动器)，只需要在项目里面引入这些starter，相关场景的所有依赖都会导入进来。要用什么功能酒倒入什么场景启动器</p><h3 id="2-主程序类"><a href="#2-主程序类" class="headerlink" title="2.主程序类"></a>2.主程序类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">//来标注一个主程序类，说明这是一个springboot应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HellowWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HellowWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@SpringBootApplication</strong>：springboot应用，标注在某个类上，说明这个类是springboot的主配置类，springboot就应该运行这个类的main方法来启动springboot应用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">), @<span class="title">Filter</span>(</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)&#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure><p><strong>@SpringBootConfiguration</strong>：springboot的配置类；<br>            标注在某个类上，表示这是一个springboot的配置类；<br>            <strong>@Configuration</strong>:配置类上来标注这个注解；<br>                    配置类 —-  配置文件；配置类也是容器中的组件</p><p><strong>@EnableAutoConfiguration</strong>：开启自动配置功能；<br>            以前我们需要配置东东西，springboot帮我们自动配置；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>​            <strong>@AutoConfigurationPackage</strong>：自动配置包<br>​                    <strong>@Import({Registrar.class})</strong>：spring底层注解@import，给容器中导入一个组件；<br>​                    将之配置类（@SpringBootApplication标注的类）的所在宝及下面子包里面的所有组件扫描到spring容器；<br>​                    @<strong>Import</strong>({AutoConfigurationImportSelector.class})；给容器中导入组件<br>​                        AutoConfigurationImportSelector：导入哪些组件的选择器<br>​                        将所有需要导入的组件以全类名的方式返回；</p><h2 id="6、使用Spring-initializer快速创建SpringBoot项目"><a href="#6、使用Spring-initializer快速创建SpringBoot项目" class="headerlink" title="6、使用Spring initializer快速创建SpringBoot项目"></a>6、使用Spring initializer快速创建SpringBoot项目</h2><p>IDE都支持使用Spring的项目创建向导快速创建一个SpringBoot项目；                                </p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/02.png" style="zoom:60%;" /><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/03.png" style="zoom:60%;" /><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/04.png" style="zoom:60%;" /><p>选择需要的模块，然后向导自动创建<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/05.png" alt=""></p><ul><li>主程序已经生成好，我们只需要我们自己的逻辑</li><li>resources文件夹中目录结构<ul><li>static：保存所有的静态资源（js,css,images）</li><li>templates：保存所有的模板引擎；（SpringBoot默认jar包使用嵌入式Tomcat,默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）;</li><li>application.properties：springboot应用的配置文件</li></ul></li></ul><h1 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h1><h2 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1.配置文件"></a>1.配置文件</h2><p>SpringBoot使用一个全局配置文件，配置文件名是固定的；</p><ul><li>application.properties</li><li>application.yml</li></ul><p>配置文件的作用：修改springboot自动配置的默认值</p><p>标记语言：</p><p>​    以前的配置文件，大多使用xxx.xml文件</p><p>​    YAML:以数据文中心，比json,xml等更适合做配置文件</p><p>YAML例子</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-YAML基本语法"><a href="#2-YAML基本语法" class="headerlink" title="2.YAML基本语法"></a>2.YAML基本语法</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h3><p>k: v   表示一对键值对（空格必须有）</p><p>以<strong>空格</strong>的缩进控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>属性和值是大小写敏感的；</p><h3 id="2-值的写法"><a href="#2-值的写法" class="headerlink" title="2.值的写法"></a>2.值的写法</h3><p><strong>字面量：普通的值（数组，字符串，布尔）：</strong></p><p>​    k:v   ：字面直接来写<br>​                字符串默认不用加上单引号或者双引号；<br>​                “”：双引号：会转义字符串里面的特殊字符，例如：\n为换行<br>​                ’‘：单引号：不会转义特殊字符，也就是内容不变</p><p><strong>对象、Map(属性和值)(键值对)：</strong></p><p>k:v   ：在下一行来写=对象属性和值的关系</p><p>​    对象还是k:v方式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">20</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>数组（List、Set）</strong></p><p>用- 值表示数组中的一个元素</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure><h2 id="3-配置文件值注入"><a href="#3-配置文件值注入" class="headerlink" title="3.配置文件值注入"></a>3.配置文件值注入</h2><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">lastName:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line">    <span class="attr">maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="number">12</span><span class="string">&#125;</span></span><br><span class="line">    <span class="attr">lists:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zhaoliu</span></span><br><span class="line">    <span class="attr">dog:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">小狗</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>javaBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p>我们可以导入配置文件处理器，以后编写配置就有提示了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-Value获取值和-ConfigurationProperties获取值比较"><a href="#1-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="1.@Value获取值和@ConfigurationProperties获取值比较"></a>1.@Value获取值和@ConfigurationProperties获取值比较</h3><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>配置文件yml还是properties他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h3 id="2-配置文件注入值数据校验"><a href="#2-配置文件注入值数据校验" class="headerlink" title="2.配置文件注入值数据校验"></a>2.配置文件注入值数据校验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)<span class="meta">@Validatedpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;    <span class="comment">/**     * &lt;bean class="Person"&gt;     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;     * &lt;bean/&gt;     */</span>   <span class="comment">//lastName必须是邮箱格式    @Email    //@Value("$&#123;person.last-name&#125;")    private String lastName;    //@Value("#&#123;11*2&#125;")    private Integer age;    //@Value("true")    private Boolean boss;    private Date birth;    private Map&lt;String,Object&gt; maps;    private List&lt;Object&gt; lists;    private Dog dog;</span></span><br></pre></td></tr></table></figure><h3 id="3-PropertySource-amp-ImportResource-amp-Bean"><a href="#3-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="3.@PropertySource&amp;@ImportResource&amp;@Bean"></a>3.@PropertySource&amp;@ImportResource&amp;@Bean</h3><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ConfigurationProperties</span>(prefix = "person")默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br></pre></td></tr></table></figure><p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p><p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure><p>不来编写Spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.springboot.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p><p>1、配置类<strong>@Configuration</strong>——&gt;Spring配置文件</p><p>2、使用<strong>@Bean</strong>给容器中添加组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件 * * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件 * */</span><span class="meta">@Configurationpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名    @Bean    public HelloService helloService02()&#123;        System.out.println("配置类@Bean给容器中添加组件了...");        return new HelloService();    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4、配置文件占位符"><a href="#4、配置文件占位符" class="headerlink" title="4、配置文件占位符"></a>4、配置文件占位符</h2><h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">person.last-name</span>=<span class="string">张三$&#123;random.uuid&#125;person.age=$&#123;random.int&#125;person.birth=2017/12/15person.boss=falseperson.maps.k1=v1person.maps.k2=14person.lists=a,b,cperson.dog.name=$&#123;person.hello:hello&#125;_dogperson.dog.age=15</span></span><br></pre></td></tr></table></figure><h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p><p>默认使用application.properties的配置；</p><h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:  port: 8081spring:  profiles:    active: prod---server:  port: 8083spring:  profiles: dev---server:  port: 8084spring:  profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure><p><strong>除了以上方式</strong></p><p>然后可以有不同配置文件，但必须以application开头</p><p>例如：application-dev.yml,application-dis.yml</p><p>可以在application.yml里选择激活哪个配置文件</p><h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><p>​    1、在配置文件中指定  spring.profiles.active=dev</p><p>​    2、命令行：</p><p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p><p>​        可以直接在测试的时候，配置传入命令行参数</p><p>​    3、虚拟机参数；</p><p>​        -Dspring.profiles.active=dev</p><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><p>–file:./config/</p><p>–file:./</p><p>classpath就是resource下</p><p>–classpath:/config/</p><p>–classpath:/</p><p>优先级由高到底，<strong>高优先级的配置会覆盖低优先级的配置</strong>；</p><p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p><p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p><h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p><strong>SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置</strong></p><ol><li><p><strong>命令行参数</strong></p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p><p>多个配置用空格分开； –配置项=值</p></li><li><p><strong>来自java:comp/env的JNDI属性</strong></p></li><li><p><strong>Java系统属性（System.getProperties()）</strong></p></li><li><p><strong>操作系统环境变量</strong></p></li><li><p><strong>RandomValuePropertySource配置的random.*属性值</strong></p></li><li><p><strong>jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p></li><li><p><strong>jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p></li></ol><p><strong>由jar包外向jar包内进行寻找；</strong></p><p><strong>优先加载带profile</strong></p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p><h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">配置文件能配置的属性参照</a></p><h1 id="三、JSR303"><a href="#三、JSR303" class="headerlink" title="三、JSR303"></a>三、JSR303</h1><p>在bean上加 <code>@Validated</code>  </p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/JSR303%E2%80%94%E2%80%941.png" alt=""></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/JSR303%E2%80%94%E2%80%942.png" alt=""></p><h1 id="四、web开发"><a href="#四、web开发" class="headerlink" title="四、web开发"></a>四、web开发</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><ol><li>创建SpringBoot应用，选中我们需要的模块；</li><li>SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来；</li><li>自己编写业务代码；</li></ol><p><strong>自动化配置原理是什么？</strong></p><p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxxAutoConfiguration：帮我们给容器中自动配置组件；<span class="string">xxxxProperties:</span>配置类来封装配置文件的内容；</span><br></pre></td></tr></table></figure><h2 id="2-SpringBoot对静态资源的映射规则"><a href="#2-SpringBoot对静态资源的映射规则" class="headerlink" title="2.SpringBoot对静态资源的映射规则"></a>2.SpringBoot对静态资源的映射规则</h2><ol><li>所有 <strong>/webjars/</strong> ，都去 *<em>classpath:/META-INF/resources/webjars/ *</em>找资源。webjars：以jar包的方式引入静态资源<a href="http://www.webjars.org/" target="_blank" rel="noopener">http://www.webjars.org/</a></li></ol><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/08.png" alt=""></p><p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jquery-webjar--&gt;</span>在访问的时候只需要写webjars下面资源的名称即可<span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>“/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射</p><ul><li>“classpath:/META-INF/resources/“</li><li>“classpath:/resources/“</li><li>“classpath:/static/“</li><li>“classpath:/public/“</li><li>“/“：当前项目的根路径</li></ul><p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p></li><li><p>欢迎页，静态资源文件夹下的所有index.html页面；被”/**”映射</p><p>localhost:8080/   找index页面</p></li><li><p>所有的 **/favicon.ico  都是在静态资源文件下找</p></li></ol><h2 id="3-模板引擎"><a href="#3-模板引擎" class="headerlink" title="3.模板引擎"></a>3.模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/09.png" alt=""></p><p>SpringBoot推荐的Thymeleaf；</p><p>语法更简单，功能更强大；</p><h3 id="1-引入thymeleaf；"><a href="#1-引入thymeleaf；" class="headerlink" title="1.引入thymeleaf；"></a>1.引入thymeleaf；</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>          2.1.6<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>切换thymeleaf版本<span class="tag">&lt;<span class="name">properties</span>&gt;</span><span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span><span class="comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span><span class="comment">&lt;!-- thymeleaf2   layout1--&gt;</span><span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在springboot2版本默认引进thymeleaf3，不需要自己改了。</p><h3 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="string">"UTF-8"</span>);<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="string">"text/html"</span>);<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;  <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p><p>使用：</p><p>1、导入thymeleaf的名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、使用thymeleaf语法；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    <span class="comment">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>这是显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h3><p>先空着吧</p><h2 id="4-SpringMVC自动配置"><a href="#4-SpringMVC自动配置" class="headerlink" title="4.SpringMVC自动配置"></a>4.SpringMVC自动配置</h2><p><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p><h3 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p><p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p></li><li><p>Static <code>index.html</code> support. 静态首页访问</p></li><li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p></li></ul><ul><li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><ul><li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li><li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"date-format"</span>)<span class="comment">//在文件中配置日期格式化的规则public Formatter&lt;Date&gt; dateFormatter() &#123;return new DateFormatter(this.mvcProperties.getDateFormat());//日期格式化组件&#125;</span></span><br></pre></td></tr></table></figure><p>​    ==自己添加的格式化器转换器，我们只需要放在容器中即可==</p><ul><li><p>Support for <code>HttpMessageConverters</code> (see below).</p><ul><li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p></li><li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p><p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p></li></ul></li></ul><ul><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p><p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">初始化WebDataBinder；请求数据<span class="comment">=====JavaBean；</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p><p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p><h3 id="2、扩展SpringMVC"><a href="#2、扩展SpringMVC" class="headerlink" title="2、扩展SpringMVC"></a>2、扩展SpringMVC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span>    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span>        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span>            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span>            <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==</strong>;</p><p>既保留了所有的自动配置，也能用我们扩展的配置；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123;    @Override    public void addViewControllers(ViewControllerRegistry registry) &#123;       // super.addViewControllers(registry);        //浏览器发送 /atguigu 请求来到 success        registry.addViewController("/atguigu").setViewName("success");    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>原理：</p><p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p><p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;      <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite(); <span class="comment">//从容器中获取所有的WebMvcConfigurer      @Autowired(required = false)      public void setConfigurers(List&lt;WebMvcConfigurer&gt; configurers) &#123;          if (!CollectionUtils.isEmpty(configurers)) &#123;              this.configurers.addWebMvcConfigurers(configurers);            //一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；              @Override             // public void addViewControllers(ViewControllerRegistry registry) &#123;              //    for (WebMvcConfigurer delegate : this.delegates) &#123;               //       delegate.addViewControllers(registry);               //   &#125;              &#125;          &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>​    3）、容器中所有的WebMvcConfigurer都会一起起作用；</p><p>​    4）、我们的配置类也会被调用；</p><p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p><h3 id="3、全面接管SpringMVC；"><a href="#3、全面接管SpringMVC；" class="headerlink" title="3、全面接管SpringMVC；"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能@EnableWebMvc@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123;    @Override    public void addViewControllers(ViewControllerRegistry registry) &#123;       // super.addViewControllers(registry);        //浏览器发送 /atguigu 请求来到 success        registry.addViewController("/atguigu").setViewName("success");    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>原理：</p><p>为什么@EnableWebMvc自动配置就失效了；</p><p>1）@EnableWebMvc的核心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>)<span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>2）、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configurationpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>3）、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="meta">@ConditionalOnWebApplication</span><span class="meta">@ConditionalOnClass</span>(&#123; Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">DispatcherServlet</span>.<span class="title">class</span>,<span class="title">WebMvcConfigurerAdapter</span>.<span class="title">class</span> &#125;)//容器中没有这个组件的时候，这个自动配置类才生效@<span class="title">ConditionalOnMissingBean</span>(<span class="title">WebMvcConfigurationSupport</span>.<span class="title">class</span>)@<span class="title">AutoConfigureOrder</span>(<span class="title">Ordered</span>.<span class="title">HIGHEST_PRECEDENCE</span> + 10)@<span class="title">AutoConfigureAfter</span>(</span>&#123; DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>,<span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span> &#125;)<span class="title">public</span> <span class="title">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p><p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p><h2 id="5-如何修改SpringBoot的默认配置"><a href="#5-如何修改SpringBoot的默认配置" class="headerlink" title="5.如何修改SpringBoot的默认配置"></a>5.如何修改SpringBoot的默认配置</h2><p>模式：</p><p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p><p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p><p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p><h2 id="6-RestfulCRUD"><a href="#6-RestfulCRUD" class="headerlink" title="6.RestfulCRUD"></a>6.RestfulCRUD</h2><h3 id="1-默认访问首页"><a href="#1-默认访问首页" class="headerlink" title="1.默认访问首页"></a>1.默认访问首页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能//@EnableWebMvc   不要接管SpringMVC@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123;    @Override    public void addViewControllers(ViewControllerRegistry registry) &#123;       // super.addViewControllers(registry);        //浏览器发送 /atguigu 请求来到 success        registry.addViewController("/atguigu").setViewName("success");    &#125;    //所有的WebMvcConfigurerAdapter组件都会一起起作用    @Bean //将组件注册在容器    public WebMvcConfigurer webMvcConfigurer()&#123;        WebMvcConfigurer adapter = new WebMvcConfigurer() &#123;            @Override            public void addViewControllers(ViewControllerRegistry registry) &#123;                registry.addViewController("/").setViewName("login");                registry.addViewController("/index.html").setViewName("login");            &#125;        &#125;;        return adapter;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-国际化"><a href="#2-国际化" class="headerlink" title="2.国际化"></a>2.国际化</h3><ol><li>编写国际化配置文件</li><li>使用ResourceBundleMessageSource管理国际化资源文件</li><li>在页面使用fmt:message取出国际化内容</li></ol><p>1.<strong>编写国际化配置文件，抽取页面需要显示的国际化消息</strong></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/10.png" alt=""></p><p>2.<strong>SpringBoot自动配置好了管理国际化资源文件的组件；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.messages"</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;        <span class="comment">/** * Comma-separated list of basenames (essentially a fully-qualified classpath * location), each following the ResourceBundle convention with relaxed support for * slash based locations. If it doesn't contain a package qualifier (such as * "org.mypackage"), it will be resolved from the classpath root. */</span><span class="keyword">private</span> String basename = <span class="string">"messages"</span>;      <span class="comment">//我们的配置文件可以直接放在类路径下叫messages.properties；        @Beanpublic MessageSource messageSource() &#123;ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();if (StringUtils.hasText(this.basename)) &#123;            //设置国际化资源文件的基础名（去掉语言国家代码的）messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(this.basename)));&#125;if (this.encoding != null) &#123;messageSource.setDefaultEncoding(this.encoding.name());&#125;messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);messageSource.setCacheSeconds(this.cacheSeconds);messageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);return messageSource;&#125;</span></span><br></pre></td></tr></table></figure><p>3.<strong>去页面获取国际化的值</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span><span class="comment">&lt;!-- Custom styles for this template --&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/asserts/css/signin.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.username&#125;"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.password&#125;"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>/&gt;</span> [[#&#123;login.remember&#125;]]        <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.btn&#125;"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：根据浏览器语言设置的信息切换了国际化；</p><p>默认的就是根据请求头带来的区域信息获取Locale进行国际化</p><p>3.<strong>点击链接切换国际化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * 可以在连接上携带区域信息 */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;        <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;        String l = request.getParameter(<span class="string">"l"</span>);        Locale locale = Locale.getDefault();        <span class="keyword">if</span>(!StringUtils.isEmpty(l))&#123;            String[] split = l.split(<span class="string">"_"</span>);            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);        &#125;        <span class="keyword">return</span> locale;    &#125;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;    &#125;&#125; <span class="meta">@Bean</span>    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-登录"><a href="#3-登录" class="headerlink" title="3.登录"></a>3.登录</h3><p>开发期间模板引擎页面修改以后，要实时生效</p><p>1）、禁用模板引擎的缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 禁用缓存spring.thymeleaf.cache=<span class="literal">false</span></span></span><br></pre></td></tr></table></figure><p>2）、页面修改完成以后ctrl+f9：重新编译；</p><p>登陆错误消息的显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-拦截器进行登录检查"><a href="#4-拦截器进行登录检查" class="headerlink" title="4.拦截器进行登录检查"></a>4.拦截器进行登录检查</h3><p>拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * 登陆检查， */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;    <span class="comment">//目标方法执行之前    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;        Object user = request.getSession().getAttribute("loginUser");        if(user == null)&#123;            //未登陆，返回登陆页面            request.setAttribute("msg","没有权限请先登陆");            request.getRequestDispatcher("/index.html").forward(request,response);            return false;        &#125;else&#123;            //已登陆，放行请求            return true;        &#125;    &#125;    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;    &#125;    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class="line">  <span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">      WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">              registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">              registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">              registry.addViewController(<span class="string">"/main.html"</span>).setViewName(<span class="string">"dashboard"</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//注册拦截器</span></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//super.addInterceptors(registry);</span></span><br><span class="line">              <span class="comment">//静态资源；  *.css , *.js</span></span><br><span class="line">              <span class="comment">//SpringBoot已经做好了静态资源映射</span></span><br><span class="line">              registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                      .excludePathPatterns(<span class="string">"/index.html"</span>,<span class="string">"/"</span>,<span class="string">"/user/login"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> adapter;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="5-CRUD-员工列表"><a href="#5-CRUD-员工列表" class="headerlink" title="5.CRUD-员工列表"></a>5.CRUD-员工列表</h3><p>实验要求：</p><ol><li>RestfulCRUD：CRUD满足Rest风格；</li></ol><p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p><table><thead><tr><th></th><th>普通CRUD（uri来区分操作）</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp—GET</td></tr><tr><td>添加</td><td>addEmp?xxx</td><td>emp—POST</td></tr><tr><td>修改</td><td>updateEmp?id=xxx&amp;xxx=xx</td><td>emp/{id}—PUT</td></tr><tr><td>删除</td><td>deleteEmp?id=1</td><td>emp/{id}—DELETE</td></tr></tbody></table><ol start="2"><li>实验的请求架构;</li></ol><table><thead><tr><th>实验功能</th><th>请求URI</th><th>请求方式</th></tr></thead><tbody><tr><td>查询所有员工</td><td>emps</td><td>GET</td></tr><tr><td>查询某个员工(来到修改页面)</td><td>emp/1</td><td>GET</td></tr><tr><td>来到添加页面</td><td>emp</td><td>GET</td></tr><tr><td>添加员工</td><td>emp</td><td>POST</td></tr><tr><td>来到修改页面（查出员工进行信息回显）</td><td>emp/1</td><td>GET</td></tr><tr><td>修改员工</td><td>emp</td><td>PUT</td></tr><tr><td>删除员工</td><td>emp/1</td><td>DELETE</td></tr></tbody></table><ol start="3"><li>员工列表：</li></ol><h4 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、抽取公共片段<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">div</span>&gt;</span>2、引入公共片段<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>~&#123;templatename::selector&#125;：模板名::选择器~&#123;templatename::fragmentname&#125;:模板名::片段名3、默认效果：insert的公共片段在div标签中如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；</span><br></pre></td></tr></table></figure><p>三种引入公共片段的th属性：</p><p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p><p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p><p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">footer</span>&gt;</span>引入方式<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>效果<span class="tag">&lt;<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入片段的时候传入参数： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-md-2 d-none d-md-block bg-light sidebar"</span> <span class="attr">id</span>=<span class="string">"sidebar"</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-sticky"</span>&gt;</span>        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav flex-column"</span>&gt;</span>            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span>                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link active"</span>                   <span class="attr">th:class</span>=<span class="string">"$&#123;activeUri=='main.html'?'nav-link active':'nav-link'&#125;"</span>                   <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/main.html&#125;"</span>&gt;</span>                    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"24"</span> <span class="attr">height</span>=<span class="string">"24"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 24 24"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke</span>=<span class="string">"currentColor"</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">stroke-linecap</span>=<span class="string">"round"</span> <span class="attr">stroke-linejoin</span>=<span class="string">"round"</span> <span class="attr">class</span>=<span class="string">"feather feather-home"</span>&gt;</span>                        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span>                        <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"9 22 9 12 15 12 15 22"</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span>                    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span>                    Dashboard <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span>                <span class="tag">&lt;/<span class="name">a</span>&gt;</span>            <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="comment">&lt;!--引入侧边栏;传入参数--&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"commons/bar::#sidebar(activeUri='emps')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-CRUD-员工添加"><a href="#6-CRUD-员工添加" class="headerlink" title="6. CRUD-员工添加"></a>6. CRUD-员工添加</h3><p>添加页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan@atguigu.com"</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span>            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span>            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span>        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提交的数据格式不对：生日：日期；</p><p>2017-12-12；2017/12/12；2017.12.12；</p><p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p><p>2017-12-12—Date； 类型转换，格式化;</p><p>默认日期是按照/的方式；</p><h3 id="7-CRUD-员工修改"><a href="#7-CRUD-员工修改" class="headerlink" title="7.CRUD-员工修改"></a>7.CRUD-员工修改</h3><p>修改使用put请求</p><p>1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）<br>2、页面创建一个post表单<br>3、创建一个input项，name=”_method”;值就是我们指定的请求方式</p><p><strong>springboot2.0版本要配置spring.mvc.hiddenmethod.filter.enabled=true</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--需要区分是员工修改还是添加；--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--发送put请求修改员工数据--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）</span></span><br><span class="line"><span class="comment">2、页面创建一个post表单</span></span><br><span class="line"><span class="comment">3、创建一个input项，name="_method";值就是我们指定的请求方式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;emp!=null&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;emp!=null&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp.id&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan@atguigu.com"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.email&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.gender==0&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--提交的是部门的id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"department.id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;dept.id&#125;"</span> <span class="attr">th:each</span>=<span class="string">"dept:$&#123;depts&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;dept.departmentName&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"birth"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp!=null&#125;?'修改':'添加'"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-CRUD-员工删除"><a href="#8-CRUD-员工删除" class="headerlink" title="8. CRUD-员工删除"></a>8. CRUD-员工删除</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"emp:$&#123;emps&#125;"</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.email&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.gender&#125;==0?'女':'男'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.department.departmentName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span>&gt;</span>        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-primary"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span>        <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:attr</span>=<span class="string">"del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-danger deleteBtn"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    $(<span class="string">".deleteBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;        <span class="comment">//删除当前员工的        $("#deleteEmpForm").attr("action",$(this).attr("del_uri")).submit();        return false;    &#125;);</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-错误处理机制"><a href="#7-错误处理机制" class="headerlink" title="7.错误处理机制"></a>7.错误处理机制</h2><h3 id="1-SpringBoot默认的错误处理机制"><a href="#1-SpringBoot默认的错误处理机制" class="headerlink" title="1.SpringBoot默认的错误处理机制"></a>1.SpringBoot默认的错误处理机制</h3><p>默认效果：</p><ol><li><p>浏览器，返回一个默认的错误页面</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/11.png" alt=""></p></li><li><p>如果是其他客户端，默认响应一个json数据</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/12.png" alt=""></p></li></ol><p>原理：</p><p>​    可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p><pre><code>给容器中添加了以下组件</code></pre><p>​    1、DefaultErrorAttributes：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">帮我们在页面共享信息；<span class="meta">@Override</span><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes,<span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());addStatus(errorAttributes, requestAttributes);addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);addPath(errorAttributes, requestAttributes);<span class="keyword">return</span> errorAttributes;&#125;</span><br></pre></td></tr></table></figure><p>​    2、BasicErrorController：处理默认/error请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;        <span class="meta">@RequestMapping</span>(produces = <span class="string">"text/html"</span>)<span class="comment">//产生html类型的数据；浏览器发送的请求来到这个方法处理public ModelAndView errorHtml(HttpServletRequest request,HttpServletResponse response) &#123;HttpStatus status = getStatus(request);Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));response.setStatus(status.value());                //去哪个页面作为错误页面；包含页面地址和页面内容ModelAndView modelAndView = resolveErrorView(request, response, status, model);return (modelAndView == null ? new ModelAndView("error", model) : modelAndView);&#125;@RequestMapping@ResponseBody    //产生json数据，其他客户端来到这个方法处理；public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;Map&lt;String, Object&gt; body = getErrorAttributes(request,isIncludeStackTrace(request, MediaType.ALL));HttpStatus status = getStatus(request);return new ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);&#125;</span></span><br></pre></td></tr></table></figure><p>​    3、ErrorPageCustomizer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)<span class="keyword">private</span> String path = <span class="string">"/error"</span>;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</span><br></pre></td></tr></table></figure><p>​    4、DefaultErrorViewResolver：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class="line"><span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//默认SpringBoot可以去找到一个页面？  error/404</span></span><br><span class="line">String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class="line">TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders</span><br><span class="line">.getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line"><span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span></span><br><span class="line"><span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    步骤：</p><p>​        一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p><p>​        1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request,      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;    <span class="comment">//所有的ErrorViewResolver得到ModelAndView   for (ErrorViewResolver resolver : this.errorViewResolvers) &#123;      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);      if (modelAndView != null) &#123;         return modelAndView;      &#125;   &#125;   return null;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-如何定制错误响应"><a href="#2-如何定制错误响应" class="headerlink" title="2.如何定制错误响应"></a>2.如何定制错误响应</h3><h4 id="1-如何定制错误的页面"><a href="#1-如何定制错误的页面" class="headerlink" title="1.如何定制错误的页面"></a>1.如何定制错误的页面</h4><ol><li><p>有模板引擎的情况下；error/状态码;** 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p><p>我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；</p><p>页面能获取的信息；</p><p>​                timestamp：时间戳<br>​                status：状态码<br>​                error：错误提示<br>​                exception：异常对象<br>​                message：异常消息<br>​                errors：JSR303数据校验的错误都在这里</p></li><li><p>没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p></li><li><p>以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面</p></li></ol><h4 id="2-如何定制错误的json数据"><a href="#2-如何定制错误的json数据" class="headerlink" title="2.如何定制错误的json数据"></a>2.如何定制错误的json数据</h4><ol><li>自定义异常处理&amp;返回定制json数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvicepublic</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;    <span class="meta">@ResponseBody</span>    <span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)    <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">Object</span>&gt; <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();        map.put(<span class="string">"code"</span>,<span class="string">"user.notexist"</span>);        map.put(<span class="string">"message"</span>,e.getMessage());        <span class="keyword">return</span> map;    &#125;&#125;<span class="comment">//没有自适应效果...</span></span><br></pre></td></tr></table></figure><ol start="2"><li>转发到/error进行自适应响应效果处理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)    <span class="title">public</span> <span class="title">String</span> <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>)</span>&#123;        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();        <span class="comment">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程        /**         * Integer statusCode = (Integer) request         .getAttribute("javax.servlet.error.status_code");         */        request.setAttribute("javax.servlet.error.status_code",500);        map.put("code","user.notexist");        map.put("message",e.getMessage());        //转发到/error        return "forward:/error";    &#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-将我们的定制数据携带出去"><a href="#3-将我们的定制数据携带出去" class="headerlink" title="3.将我们的定制数据携带出去"></a>3.将我们的定制数据携带出去</h4><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p><p>​    1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p><p>​    2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p><p>​            容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p><p>自定义ErrorAttributes</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Componentpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEooroAttrributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;    <span class="comment">//返回的map就是页面和json能获取的所有字段    @Override    public Map&lt;String, Object&gt; getErrorAttributes(WebRequest webRequest, ErrorAttributeOptions options) &#123;        Map&lt;String,Object&gt; map = super.getErrorAttributes(webRequest, options);        map.put("company","dzu");        //异常处理器携带的数据        Map&lt;String,Object&gt; ext = (Map&lt;String,Object&gt;)webRequest.getAttribute("ext",0);        map.put("ext",ext);        return map;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/13.png" alt=""></p><h2 id="8-配置嵌入式Servlet容器"><a href="#8-配置嵌入式Servlet容器" class="headerlink" title="8.配置嵌入式Servlet容器"></a>8.配置嵌入式Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/14.png" alt=""></p><h3 id="1-如何定制和修改Servlet容器的相关配置"><a href="#1-如何定制和修改Servlet容器的相关配置" class="headerlink" title="1.如何定制和修改Servlet容器的相关配置"></a>1.如何定制和修改Servlet容器的相关配置</h3><ol><li>修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081server.context-path=/crudserver.tomcat.uri-encoding=UTF-8//通用的Servlet容器设置server.xxx//Tomcat的设置server.tomcat.xxx</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  <span class="comment">//一定要将这个定制器加入到容器中public EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer()&#123;    return new EmbeddedServletContainerCustomizer() &#123;        //定制嵌入式的Servlet容器相关的规则        @Override        public void customize(ConfigurableEmbeddedServletContainer container) &#123;            container.setPort(8083);        &#125;    &#125;;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#2-注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="2.注册Servlet三大组件【Servlet、Filter、Listener】"></a>2.注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p><p>注册三大组件用以下方式</p><p>ServletRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册三大组件@Beanpublic ServletRegistrationBean myServlet()&#123;    ServletRegistrationBean registrationBean = new ServletRegistrationBean(new MyServlet(),"/myServlet");    return registrationBean;&#125;</span></span><br></pre></td></tr></table></figure><p>FilterRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Beanpublic</span> <span class="function">FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;    FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();    registrationBean.setFilter(<span class="keyword">new</span> MyFilter());    registrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/hello"</span>,<span class="string">"/myServlet"</span>));    <span class="keyword">return</span> registrationBean;&#125;</span><br></pre></td></tr></table></figure><p>ServletListenerRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Beanpublic</span> <span class="function">ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyListener());    <span class="keyword">return</span> registrationBean;&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p><p>DispatcherServletAutoConfiguration中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)<span class="meta">@ConditionalOnBean</span>(value = DispatcherServlet<span class="class">.<span class="keyword">class</span>, <span class="title">name</span> </span>= DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)<span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(      DispatcherServlet dispatcherServlet)</span> </span>&#123;   ServletRegistrationBean registration = <span class="keyword">new</span> ServletRegistrationBean(         dispatcherServlet, <span class="keyword">this</span>.serverProperties.getServletMapping());    <span class="comment">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp    //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径       registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);   registration.setLoadOnStartup(         this.webMvcProperties.getServlet().getLoadOnStartup());   if (this.multipartConfig != null) &#123;      registration.setMultipartConfig(this.multipartConfig);   &#125;   return registration;&#125;</span></span><br></pre></td></tr></table></figure><p>SpringBoot能不能支持其他的Servlet容器？</p><h3 id="3-替换为其他嵌入式Servlet容器"><a href="#3-替换为其他嵌入式Servlet容器" class="headerlink" title="3.替换为其他嵌入式Servlet容器"></a>3.替换为其他嵌入式Servlet容器</h3><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/15.png" alt=""></p><p>默认支持：</p><p>Tomcat（默认使用）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Jetty</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Undertow</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="五、Docker"><a href="#五、Docker" class="headerlink" title="五、Docker"></a>五、Docker</h1><h2 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p><p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p><p>运行中的这个镜像称为容器，容器启动是非常快速的。</p><h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p><p>docker客户端(Client)：连接docker主机进行操作；</p><p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p><p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p><p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p><p>![](E:/学习视频/12.Spring Boot框架/源码、资料、课件/文档/Spring Boot 笔记/images/搜狗截图20180303165113.png)</p><p>使用Docker的步骤：</p><p>1）、安装Docker</p><p>2）、去Docker仓库找到这个软件对应的镜像；</p><p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p><p>4）、对容器的启动停止就是对软件的启动停止；</p><h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><h4 id="1）、安装linux虚拟机"><a href="#1）、安装linux虚拟机" class="headerlink" title="1）、安装linux虚拟机"></a>1）、安装linux虚拟机</h4><p>​    1）、VMWare、VirtualBox（安装）；</p><p>​    2）、导入虚拟机文件centos7-atguigu.ova；</p><p>​    3）、双击启动linux虚拟机;使用  root/ 123456登陆</p><p>​    4）、使用客户端连接linux服务器进行命令操作；</p><p>​    5）、设置虚拟机网络；</p><p>​        桥接网络===选好网卡====接入网线；</p><p>​    6）、设置好网络以后使用命令重启虚拟机的网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><p>​    7）、查看linux的ip地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p>​    8）、使用客户端连接linux；</p><h4 id="2）、在linux虚拟机上安装docker"><a href="#2）、在linux虚拟机上安装docker" class="headerlink" title="2）、在linux虚拟机上安装docker"></a>2）、在linux虚拟机上安装docker</h4><p>步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、检查内核版本，必须是3.10及以上uname -r2、安装dockeryum install docker3、输入y确认安装4、启动docker[root@localhost ~]# systemctl start docker[root@localhost ~]# docker -vDocker version 1.12.6, build 3e8e77d/1.12.65、开机启动docker[root@localhost ~]# systemctl enable dockerCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.6、停止dockersystemctl stop docker</span><br></pre></td></tr></table></figure><h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker  search 关键字  eg：docker  search redis</td><td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有本地镜像</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像</td></tr></tbody></table><p><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p><p>步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、搜索镜像[root@localhost ~]# docker search tomcat2、拉取镜像[root@localhost ~]# docker pull tomcat3、根据镜像启动容器docker run --name mytomcat -d tomcat:latest4、docker ps  查看运行中的容器5、 停止运行中的容器docker stop  容器的id6、查看所有的容器docker ps -a7、启动容器docker start 容器id8、删除一个容器 docker rm 容器id9、启动一个做了端口映射的tomcat[root@localhost ~]# docker run -d -p 8888:8080 tomcat-d：后台运行-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口10、为了演示简单关闭了linux的防火墙service firewalld status ；查看防火墙状态service firewalld stop：关闭防火墙11、查看容器的日志docker logs container-name/container-id更多命令参看https://docs.docker.com/engine/reference/commandline/docker/可以参考每一个镜像的文档</span><br></pre></td></tr></table></figure><h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>错误的启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -d mysql42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846mysql退出了[root@localhost ~]# docker ps -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES42f09819908b        mysql               "docker-entrypoint.sh"   34 seconds ago      Exited (1) 33 seconds ago                            mysql01538bde63e500        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       compassionate_goldstinec4f1ac60b3fc        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       lonely_fermi81ec743a5271        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan//错误日志[root@localhost ~]# docker logs 42f09819908berror: database is uninitialized and password option is not specified   You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span><br></pre></td></tr></table></figure><p>正确的启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlb874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMESb874c56bec49        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</span><br></pre></td></tr></table></figure><p>做了端口映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMESad10e4bc5c6a        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</span><br></pre></td></tr></table></figure><p>几个其他的高级操作</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=my-secret-pw -d mysql:tag把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）docker <span class="builtin-name">run</span> --name some-mysql -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=my-secret-pw -d mysql:tag <span class="attribute">--character-set-server</span>=utf8mb4 <span class="attribute">--collation-server</span>=utf8mb4_unicode_ci指定mysql的一些配置参数</span><br></pre></td></tr></table></figure><h1 id="六、SpringBoot与数据访问"><a href="#六、SpringBoot与数据访问" class="headerlink" title="六、SpringBoot与数据访问"></a>六、SpringBoot与数据访问</h1><h2 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:  datasource:    username: root    password: 123456    url: jdbc:mysql://192.168.15.22:3306/jdbc    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>效果：<strong>注意2.x不是这个了</strong></p><p>​    默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p><p>​    数据源的相关配置都在DataSourceProperties里面；</p><p>自动配置原理：</p><p>org.springframework.boot.autoconfigure.jdbc：</p><p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p><p>2、SpringBoot默认可以支持；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.tomcat</span><span class="selector-class">.jdbc</span><span class="selector-class">.pool</span><span class="selector-class">.DataSource</span>、<span class="selector-tag">HikariDataSource</span>、<span class="selector-tag">BasicDataSource</span>、</span><br></pre></td></tr></table></figure><p>3、自定义数据源类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * Generic DataSource configuration. */</span><span class="meta">@ConditionalOnMissingBean</span>(DataSource<span class="class">.<span class="keyword">class</span>)@<span class="title">ConditionalOnProperty</span>(<span class="title">name</span> </span>= <span class="string">"spring.datasource.type"</span>)<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;   <span class="meta">@Bean</span>   <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;       <span class="comment">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性      return properties.initializeDataSourceBuilder().build();   &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p><p>​    作用：</p><p>​        1）、runSchemaScripts();运行建表语句；</p><p>​        2）、runDataScripts();运行插入数据的sql语句；</p><p>默认只需要将文件命名为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">schema-*.sql、data-*.sql默认规则：schema.sql，schema-all.sql；可以使用</span>   <span class="string">schema:      - classpath:department.sql      指定位置      initialization-mode: always  #2.0以上需要配置</span></span><br></pre></td></tr></table></figure><p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p><h2 id="2、整合Druid数据源"><a href="#2、整合Druid数据源" class="headerlink" title="2、整合Druid数据源"></a>2、整合Druid数据源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">导入druid数据源<span class="meta">@Configurationpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)    <span class="meta">@Bean</span>    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;       <span class="keyword">return</span>  <span class="keyword">new</span> DruidDataSource();    &#125;    <span class="comment">//配置Druid的监控    //1、配置一个管理后台的Servlet    @Bean    public ServletRegistrationBean statViewServlet()&#123;        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), "/druid/*");        Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();        initParams.put("loginUsername","admin");        initParams.put("loginPassword","123456");        initParams.put("allow","");//默认就是允许所有访问        initParams.put("deny","192.168.15.21");        bean.setInitParameters(initParams);        return bean;    &#125;    //2、配置一个web监控的filter    @Bean    public FilterRegistrationBean webStatFilter()&#123;        FilterRegistrationBean bean = new FilterRegistrationBean();        bean.setFilter(new WebStatFilter());        Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();        initParams.put("exclusions","*.js,*.css,/druid/*");        bean.setInitParameters(initParams);        bean.setUrlPatterns(Arrays.asList("/*"));        return  bean;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3、整合MyBatis"><a href="#3、整合MyBatis" class="headerlink" title="3、整合MyBatis"></a>3、整合MyBatis</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>![](E:/学习视频/12.Spring Boot框架/源码、资料、课件/文档/Spring Boot 笔记/images/搜狗截图20180305194443.png)</p><p>步骤：</p><p>​    1）、配置数据源相关属性（见上一节Druid）</p><p>​    2）、给数据库建表</p><p>​    3）、创建JavaBean</p><h3 id="4）、注解版"><a href="#4）、注解版" class="headerlink" title="4）、注解版"></a>4）、注解版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper@Mapperpublic interface DepartmentMapper &#123;    @Select("select * from department where id=#&#123;id&#125;")    public Department getDeptById(Integer id);    @Delete("delete from department where id=#&#123;id&#125;")    public int deleteDeptById(Integer id);    @Options(useGeneratedKeys = true,keyProperty = "id")    @Insert("insert into department(departmentName) values(#&#123;departmentName&#125;)")    public int insertDept(Department department);    @Update("update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;")    public int updateDept(Department department);&#125;</span></span><br></pre></td></tr></table></figure><p>问题：</p><p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configurationpublic <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;    <span class="meta">@Bean</span>    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer()&#123;            <span class="meta">@Override</span>            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Configuration configuration)</span> </span>&#123;                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);            &#125;        &#125;;    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用MapperScan批量扫描所有的Mapper接口；</span><br><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.atguigu.springboot.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot06DataMybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringBoot06DataMybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5）、配置文件版"><a href="#5）、配置文件版" class="headerlink" title="5）、配置文件版"></a>5）、配置文件版</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:  config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span> <span class="string">指定全局配置文件的位置</span>  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span>  <span class="string">指定sql映射文件的位置</span></span><br></pre></td></tr></table></figure><p>更多使用参照</p><p><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p><h2 id="4、整合SpringData-JPA"><a href="#4、整合SpringData-JPA" class="headerlink" title="4、整合SpringData JPA"></a>4、整合SpringData JPA</h2><h3 id="1）、SpringData简介"><a href="#1）、SpringData简介" class="headerlink" title="1）、SpringData简介"></a>1）、SpringData简介</h3><p>![](E:/学习视频/12.Spring Boot框架/源码、资料、课件/文档/Spring Boot 笔记/images/搜狗截图20180306105412.png)</p><h3 id="2）、整合SpringData-JPA"><a href="#2）、整合SpringData-JPA" class="headerlink" title="2）、整合SpringData JPA"></a>2）、整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p><p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系@Entity //告诉JPA这是一个实体类（和数据表映射的类）@Table(name = "tbl_user") //@Table来指定和哪个数据表对应;如果省略默认表名就是user；public class User &#123;    @Id //这是一个主键    @GeneratedValue(strategy = GenerationType.IDENTITY)//自增主键    private Integer id;    @Column(name = "last_name",length = 50) //这是和数据表对应的一个列    private String lastName;    @Column //省略默认列名就是属性名    private String email;</span></span><br></pre></td></tr></table></figure><p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository来完成对数据库的操作public interface UserRepository extends JpaRepository&lt;User,Integer&gt; &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>3）、基本的配置JpaProperties</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:   jpa:</span>    <span class="string">hibernate:#</span>     <span class="string">更新或者创建数据表结构</span>      <span class="attr">ddl-auto:</span> <span class="string">update#</span>    <span class="string">控制台显示SQL</span>    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="七、springboot缓存"><a href="#七、springboot缓存" class="headerlink" title="七、springboot缓存"></a>七、springboot缓存</h1><h2 id="Springboot缓存抽象"><a href="#Springboot缓存抽象" class="headerlink" title="Springboot缓存抽象"></a>Springboot缓存抽象</h2><p>Spring从3.1开始定义了org.springframework.cache.Cache 和org.springframework.cache.CacheManager接口来统一不同的缓存技术； 并支持使用JCache（JSR-107）注解简化我们开发；</p><ul><li>Cache接口为缓存的组件规范定义，包含缓存的各种操作集合</li><li>Cache接口下Spring提供了各种xxxCache的实现；如RedisCache，EhCacheCache , ConcurrentMapCache等；</li><li>每次调用需要缓存功能的方法时，Spring会检查检查指定参数的指定的目标方法是否 已经被调用过；如果有就直接从缓存中获取方法调用后的结果，如果没有就调用方法 并缓存结果后返回给用户。下次调用直接从缓存中获取。 </li><li>使用Spring缓存抽象时我们需要关注以下两点； <ul><li>1、确定方法需要被缓存以及他们的缓存策略 </li><li>2、从缓存中读取之前缓存存储的数据</li></ul></li></ul><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/springboot/springboot_img/16.png" alt=""></p><h3 id="1-几个重要的概念-amp-缓存注解"><a href="#1-几个重要的概念-amp-缓存注解" class="headerlink" title="1. 几个重要的概念&amp;缓存注解"></a>1. 几个重要的概念&amp;缓存注解</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Cache</td><td>缓存接口、定义缓存操作。实现有：RedisCache,EhCacheCache,ConcurrentMapCache</td></tr><tr><td>CacheManager</td><td>缓存管理器，管理各种缓存（cache）组件</td></tr><tr><td>@Cacheable</td><td>主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</td></tr><tr><td>@CacheEvict</td><td>清空缓存</td></tr><tr><td>@CachePut</td><td>保证方法被调用，又希望结果被缓存</td></tr><tr><td>@EnableCaching</td><td>开启基于注解的缓存</td></tr><tr><td>keyGenerator</td><td>缓存数据时ley生成策略</td></tr><tr><td>serialize</td><td>缓存数据时value序列化策略</td></tr></tbody></table><p><strong>@Cacheable，@CachePut，@CacheEvict主要的参数</strong></p><table><thead><tr><th align="center">参数名</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td align="center">value</td><td>缓存的名称，在spring配置文件中定义，必须指定至少一个</td><td>例如：<code>@Cacheable(value=&quot;mycache&quot;)</code>或者<br /><code>@Cacheable(value={&quot;cache1&quot;,&quot;cache2&quot;})</code></td></tr><tr><td align="center">key</td><td>缓存的key，可以为空，如果指定要按照SpEL表达式编写，如果不指定，则缺省按照方法的所有参数进行组合</td><td>例如：<code>@Cacheable(value=&quot;testcache&quot;,key=&quot;#userName&quot;)</code></td></tr><tr><td align="center">condition</td><td>缓存的条件，可以为空，使用SpEL编写，返回true或false，只有为true，才进行缓存/清除缓存，在调用方法之前之后都能判断</td><td>例如：<code>@Cacheable(value=&quot;testcache&quot;,condition=&quot;#username.length()&gt;2&quot;)</code></td></tr><tr><td align="center">allEntries<br />（<strong>@CacheEvict</strong>）</td><td>是否清空所有缓存内容，缺省为false，如果指定为true，则方法调用后立即清空所有缓存</td><td>例如：<code>@CachEvict(value=&quot;testcache&quot;,allEntries=true)</code></td></tr><tr><td align="center">brforeInvocation<br />(<strong>@CacheEvict</strong>)</td><td>是否在方法执行前就清空，缺省为false，如果指定为true，则扎起方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存</td><td>例如：<code>@CachEvict(value=&quot;testcache&quot;,beforeInvocation=true)</code></td></tr><tr><td align="center">unless<br />（<strong>@CachePut</strong>）<br />(<strong>@cacheable</strong>)</td><td>用于否决缓存的，不香condition，该表达式只在方法执行之后判断，此时可以拿到返回值result进行判断。条件为true不会缓存，false才缓存</td><td>例如：<code>@Cacheable(value=&quot;testcache&quot;,unless=&quot;#result==null&quot;)</code></td></tr><tr><td align="center"></td><td></td><td></td></tr></tbody></table><p><strong>Cache SpEL available metadata</strong></p><table><thead><tr><th>名字</th><th>位置</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>methodName</td><td>root object</td><td>当前被调用的方法名</td><td>#root.methodName</td></tr><tr><td>method</td><td>root object</td><td>当前被调用的方法</td><td>#root.method.name</td></tr><tr><td>target</td><td>root object</td><td>当前被调用的目标对象</td><td>#root.target</td></tr><tr><td>targetClass</td><td>root object</td><td>当前被调用的目标对象类</td><td>#root.targetClass</td></tr><tr><td>args</td><td>root object</td><td>当前被调用的方法的参数列表</td><td>#root.args[0]</td></tr><tr><td>caches</td><td>root object</td><td>当前方法调用使用的缓存列表（如：@Cacheable(value={“cache1”,”cache2”})），则有两个cache</td><td>#root.caches[0].name</td></tr><tr><td>argument<br />name</td><td>evaluation context</td><td>方法参数的名字，可以直接#参数名，也可以使用 #p0或#a0的形式，0代表参数的索引</td><td>#iban,#a0,#p0</td></tr><tr><td>result</td><td>evaluation context</td><td>方法执行后的返回值（仅当方法执行之后的判断有效，如‘unless’,’cache put’的表达式 ‘cache evict’的表达式 beforeInvocation=false）</td><td>#result</td></tr></tbody></table><h3 id="2-缓存练习"><a href="#2-缓存练习" class="headerlink" title="2.缓存练习"></a>2.缓存练习</h3><h4 id="2-1-首先，springboot启动类"><a href="#2-1-首先，springboot启动类" class="headerlink" title="2.1 首先，springboot启动类"></a><strong>2.1 首先，springboot启动类</strong></h4><ul><li>使用@EnableCaching开启缓存</li><li>@MapperScan(“com.dzu.cache.mapper”)进行包扫描</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 一、搭建基本环境</span></span><br><span class="line"><span class="comment">* 1.导入数据库文件，创建出department和employee表</span></span><br><span class="line"><span class="comment">* 2.创建javaBean封装数据</span></span><br><span class="line"><span class="comment">* 3.整合mybatis操作数据库</span></span><br><span class="line"><span class="comment">*  3.1配置数据源信息</span></span><br><span class="line"><span class="comment">*  3.2使用注解版的mybatis</span></span><br><span class="line"><span class="comment">*     3.2.1、@MapperScan指定需要扫描的mapper接口所在的包</span></span><br><span class="line"><span class="comment">* 二、快速体验缓存</span></span><br><span class="line"><span class="comment">*  步骤：</span></span><br><span class="line"><span class="comment">*     1.开启基于注解的缓存 @EnableCaching，在启动类上</span></span><br><span class="line"><span class="comment">*     2.标注缓存注解即可</span></span><br><span class="line"><span class="comment">*        @Cacheable</span></span><br><span class="line"><span class="comment">*        @CacheEvict</span></span><br><span class="line"><span class="comment">*        @CachePut</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.dzu.cache.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot01CacheApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SpringApplication.run(Springboot01CacheApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-创建javaBean"><a href="#2-2-创建javaBean" class="headerlink" title="2.2 创建javaBean"></a>2.2 创建javaBean</h4><p>Employee和Department</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.cache.bean;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;      <span class="keyword">private</span> Integer id;   <span class="keyword">private</span> String lastName;   <span class="keyword">private</span> String email;   <span class="keyword">private</span> Integer gender; <span class="comment">//性别 1男  0女   private Integer dId;         public Employee() &#123;      super();   &#125;      public Employee(Integer id, String lastName, String email, Integer gender, Integer dId) &#123;      super();      this.id = id;      this.lastName = lastName;      this.email = email;      this.gender = gender;      this.dId = dId;   &#125;      public Integer getId() &#123;      return id;   &#125;   public void setId(Integer id) &#123;      this.id = id;   &#125;   public String getLastName() &#123;      return lastName;   &#125;   public void setLastName(String lastName) &#123;      this.lastName = lastName;   &#125;   public String getEmail() &#123;      return email;   &#125;   public void setEmail(String email) &#123;      this.email = email;   &#125;   public Integer getGender() &#123;      return gender;   &#125;   public void setGender(Integer gender) &#123;      this.gender = gender;   &#125;   public Integer getdId() &#123;      return dId;   &#125;   public void setdId(Integer dId) &#123;      this.dId = dId;   &#125;   @Override   public String toString() &#123;      return "Employee [id=" + id + ", lastName=" + lastName + ", email=" + email + ", gender=" + gender + ", dId="            + dId + "]";   &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.cache.bean;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;      <span class="keyword">private</span> Integer id;   <span class="keyword">private</span> String departmentName;         <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">()</span> </span>&#123;      <span class="keyword">super</span>();      <span class="comment">// TODO Auto-generated constructor stub   &#125;   public Department(Integer id, String departmentName) &#123;      super();      this.id = id;      this.departmentName = departmentName;   &#125;   public Integer getId() &#123;      return id;   &#125;   public void setId(Integer id) &#123;      this.id = id;   &#125;   public String getDepartmentName() &#123;      return departmentName;   &#125;   public void setDepartmentName(String departmentName) &#123;      this.departmentName = departmentName;   &#125;   @Override   public String toString() &#123;      return "Department [id=" + id + ", departmentName=" + departmentName + "]";   &#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-创建对数据库操作的mapper接口"><a href="#2-3-创建对数据库操作的mapper接口" class="headerlink" title="2.3 创建对数据库操作的mapper接口"></a>2.3 创建对数据库操作的mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.cache.mapper;<span class="keyword">import</span> com.dzu.cache.bean.Employee;<span class="keyword">import</span> org.apache.ibatis.annotations.*;<span class="meta">@Mapperpublic</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;    <span class="meta">@Select</span>(<span class="string">"select * from employee where id=#&#123;id&#125;"</span>)    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;    <span class="meta">@Update</span>(<span class="string">"update employee set lastName=#&#123;lastName&#125;,email=#&#123;email&#125;,gender=#&#123;gender&#125;,d_id=#&#123;dId&#125; where id=#&#123;id&#125;"</span>)    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateEmp</span><span class="params">(Employee employee)</span></span>;    <span class="meta">@Delete</span>(<span class="string">"delete from employee where id=#&#123;id&#125;"</span>)    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmpById</span><span class="params">(Integer id)</span></span>;    <span class="meta">@Insert</span>(<span class="string">"insert into employee(lastName,email,gender,d_id) values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;dId&#125;)"</span>)    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertEmpoyee</span><span class="params">(Employee employee)</span></span>;    <span class="meta">@Select</span>(<span class="string">"select * from employee where lastName=#&#123;lastName&#125;"</span>)    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByLastName</span><span class="params">(String lastName)</span></span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.cache.mapper;<span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;<span class="meta">@Mapperpublic</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-创建controller"><a href="#2-4-创建controller" class="headerlink" title="2.4 创建controller"></a>2.4 创建controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.cache.controller;<span class="keyword">import</span> com.dzu.cache.bean.Employee;<span class="keyword">import</span> com.dzu.cache.service.EmployeeService;<span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="meta">@RestControllerpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;    <span class="meta">@Autowired</span>    EmployeeService employeeService;    <span class="meta">@GetMapping</span>(<span class="string">"/emp/&#123;id&#125;"</span>)    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;        Employee employee = employeeService.getEmp(id);        <span class="keyword">return</span> employee;    &#125;    <span class="meta">@GetMapping</span>(<span class="string">"/emp"</span>)    <span class="function"><span class="keyword">public</span> Employee <span class="title">update</span><span class="params">(Employee employee)</span></span>&#123;        Employee emp = employeeService.updateEmp(employee);        <span class="keyword">return</span> emp;    &#125;    <span class="meta">@GetMapping</span>(<span class="string">"/delemp"</span>)    <span class="function"><span class="keyword">public</span> String <span class="title">deleteEmp</span><span class="params">(Integer id)</span></span>&#123;        employeeService.deleteEmp(id);        <span class="keyword">return</span> <span class="string">"success"</span>;    &#125;    <span class="meta">@GetMapping</span>(<span class="string">"/emp/lastName/&#123;lastName&#125;"</span>)    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByLastName</span><span class="params">(@PathVariable(<span class="string">"lastName"</span>)</span> String lastName)</span>&#123;        <span class="keyword">return</span> employeeService.getEmpByLastName(lastName);    &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-创建service，并在其中使用缓存注解"><a href="#2-5-创建service，并在其中使用缓存注解" class="headerlink" title="2.5 创建service，并在其中使用缓存注解"></a>2.5 创建service，并在其中使用缓存注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.cache.service;<span class="keyword">import</span> com.dzu.cache.bean.Employee;<span class="keyword">import</span> com.dzu.cache.mapper.EmployeeMapper;<span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="keyword">import</span> org.springframework.cache.annotation.*;<span class="keyword">import</span> org.springframework.stereotype.Service;<span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"emp"</span>)<span class="comment">//抽取缓存的公共配置@Servicepublic class EmployeeService &#123;    @Autowired    EmployeeMapper employeeMapper;    /*    * 将方法的运行结果进行缓存，以后再要相同的数据，直接从缓存中获取，不用调用方法    * CacheManager管理多个Cache组建的，对缓存真正的CRUD操作在Cache组件中，每一个缓存组件有自己唯一一个名字    * 几个属性：    *   cacheNames/value：指定缓存的名字    *   key：缓存数据使用的key，可以用它来指定。默认使用方法参数的值    *       编写SpEL表达式 #id,参数id的值*       keyGenerator：key的生成器；可以自己指定key的生成器组件id*           key/keyGenerator，二选一使用*       cacheManager：指定缓存管理器，或者cacheResolver指定获取解析器*       condition：指定符合条件的情况下才缓存 condition="#id&gt;0"*       unless：否定缓存，当unless=true时，方法的返回值就不会被缓存，可以获取到结果进行判断*       sync：是否使用异步模式*    * */    @Cacheable(cacheNames = "emp",key="#id")    public Employee getEmp(Integer id)&#123;        System.out.println("查询"+id+"号员工");        Employee emp = employeeMapper.getEmpById(id);        return emp;    &#125;    /*    * @CachePut：即调用方法，又更新缓存数据    * 修改了数据库的某个数据，同时更新缓存    * 运行时机：    *   1.先调用目标方法    *   2.将方法返回值进行返回    * */    @CachePut(cacheNames = "emp",key="#employee.id")    public Employee updateEmp(Employee employee)&#123;        System.out.println("updateEmp"+employee);        employeeMapper.updateEmp(employee);        return employee;    &#125;    /*    * @CacheEvict：缓存清除    * key:指定要清除的数据    * */    @CacheEvict(value = "emp",key="#id")    public void deleteEmp(Integer id)&#123;        System.out.println("deeteEmp:"+id);//        employeeMapper.deleteEmpById(id);    &#125;    @Caching(            cacheable = &#123;              @Cacheable(value="emp",key="#lastName")            &#125;,            put = &#123;                    @CachePut(value="emp",key="#result.id"),                    @CachePut(value="emp",key="#result.email")            &#125;    )    public Employee getEmpByLastName(String lastName)&#123;        return employeeMapper.getEmpByLastName(lastName);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-别忘记配置数据源"><a href="#2-6-别忘记配置数据源" class="headerlink" title="2.6 别忘记配置数据源"></a>2.6 别忘记配置数据源</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_cache?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8spring.datasource.username=rootspring.datasource.password=spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver#指将带有下划线的表字段映射为驼峰格式的实体类属性mybatis.configuration.map-underscore-to-camel-case=truelogging.level.com.dzu.cache.mapper=debug</span></span><br></pre></td></tr></table></figure><p>之后启动测试就可以了。。。</p><h2 id="搭建redis环境"><a href="#搭建redis环境" class="headerlink" title="搭建redis环境"></a>搭建redis环境</h2><p>我们使用docker容器，首先在docker中安装redis <code>docker pull redis</code></p><p>然后在docker中后台运行redis <code>docker run -d -p 6379:6379 --name myredis</code></p><p>在pom.xml中导入springboot的redis启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在配置文件application.properties中配置redis</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">主机号（ip）</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzu.cache.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> com.dzu.cache.mapper.EmployeeMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot01CacheApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   EmployeeMapper employeeMapper;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   StringRedisTemplate stringRedisTemplate;<span class="comment">//操作k,v是字符串</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   RedisTemplate redisTemplate;<span class="comment">//k,v都是对象的</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * redis常见的五大数据类型</span></span><br><span class="line"><span class="comment">   * String , list , set ,Hash,ZSet(有序集合)</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * stringRedisTemplate.opsForValue() &#123;String 字符串&#125;</span></span><br><span class="line"><span class="comment">   * stringRedisTemplate.opsForHash() &#123; Hash&#125;</span></span><br><span class="line"><span class="comment">   * stringRedisTemplate.opsForList() &#123;list&#125;</span></span><br><span class="line"><span class="comment">   * stringRedisTemplate.opsForSet()</span></span><br><span class="line"><span class="comment">   * stringRedisTemplate.opsForZSet()</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//保存数据</span></span><br><span class="line"><span class="comment">//    stringRedisTemplate.opsForValue().append("msg","hello");</span></span><br><span class="line"><span class="comment">//    String msg = stringRedisTemplate.opsForValue().get("msg");</span></span><br><span class="line"><span class="comment">//    System.out.println(msg);</span></span><br><span class="line">      stringRedisTemplate.opsForList().leftPush(<span class="string">"myList"</span>,<span class="string">"1"</span>);</span><br><span class="line">      stringRedisTemplate.opsForList().leftPush(<span class="string">"myList"</span>,<span class="string">"2"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Employee emp = employeeMapper.getEmpById(<span class="number">1</span>);</span><br><span class="line">      System.out.println(emp.toString());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试保存对象</strong></p><p>redis保存对象需要先将对象进行序列化才可以，即Employee对象实现Serializable接口。</p><p>redis默认的保存规则，保存的数据我们是看不懂的，我们比较习惯json数据，因此我们可以修改redis的缓存规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.cache.config;<span class="keyword">import</span> com.dzu.cache.bean.Employee;<span class="keyword">import</span> org.springframework.context.annotation.Bean;<span class="keyword">import</span> org.springframework.context.annotation.Configuration;<span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<span class="keyword">import</span> java.net.UnknownHostException;<span class="meta">@Configurationpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedisConfig</span> </span>&#123;    <span class="meta">@Bean</span>    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object,Employee&gt; <span class="title">empRedisTemplate</span><span class="params">(            RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException</span>&#123;        RedisTemplate&lt;Object,Employee&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();        template.setConnectionFactory(redisConnectionFactory);        Jackson2JsonRedisSerializer&lt;Employee&gt; serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Employee<span class="class">.<span class="keyword">class</span>)</span>;        template.setDefaultSerializer(serializer);        <span class="keyword">return</span> template;    &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzu.cache.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> com.dzu.cache.mapper.EmployeeMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot01CacheApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   EmployeeMapper employeeMapper;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   StringRedisTemplate stringRedisTemplate;<span class="comment">//操作k,v是字符串</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   RedisTemplate redisTemplate;<span class="comment">//k,v都是对象的</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   RedisTemplate&lt;Object,Employee&gt; empRedisTemplate;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * redis常见的五大数据类型</span></span><br><span class="line"><span class="comment">   * String , list , set ,Hash,ZSet(有序集合)</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * stringRedisTemplate.opsForValue() &#123;String 字符串&#125;</span></span><br><span class="line"><span class="comment">   * stringRedisTemplate.opsForHash() &#123; Hash&#125;</span></span><br><span class="line"><span class="comment">   * stringRedisTemplate.opsForList() &#123;list&#125;</span></span><br><span class="line"><span class="comment">   * stringRedisTemplate.opsForSet()</span></span><br><span class="line"><span class="comment">   * stringRedisTemplate.opsForZSet()</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//保存数据</span></span><br><span class="line"><span class="comment">//    stringRedisTemplate.opsForValue().append("msg","hello");</span></span><br><span class="line"><span class="comment">//    String msg = stringRedisTemplate.opsForValue().get("msg");</span></span><br><span class="line"><span class="comment">//    System.out.println(msg);</span></span><br><span class="line">      stringRedisTemplate.opsForList().leftPush(<span class="string">"myList"</span>,<span class="string">"1"</span>);</span><br><span class="line">      stringRedisTemplate.opsForList().leftPush(<span class="string">"myList"</span>,<span class="string">"2"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Employee emp = employeeMapper.getEmpById(<span class="number">1</span>);</span><br><span class="line">      <span class="comment">//默认如果保存对象，使用jdk序列化机制，序列化后的数据保存到redis中</span></span><br><span class="line"><span class="comment">//    redisTemplate.opsForValue().set("emp-01",emp);//注意对象需要序列化</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//1.将数据以json保存</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 1.自己将对象转化为json</span></span><br><span class="line"><span class="comment">      * 2.redisTemplate默认的序列化规则</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      empRedisTemplate.opsForValue().set(<span class="string">"emp-01"</span>,emp);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Employee emp = employeeMapper.getEmpById(<span class="number">1</span>);</span><br><span class="line">      System.out.println(emp.toString());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;  <span class="attr">"id"</span>: <span class="number">1</span>,  <span class="attr">"lastName"</span>: <span class="string">"zhangzhangzhang"</span>,  <span class="attr">"email"</span>: <span class="string">"444@qq.com"</span>,  <span class="attr">"gender"</span>: <span class="number">1</span>,  <span class="attr">"dId"</span>: <span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>在我们使用缓存时，修改缓存管理器</strong></p><p>这是springboot2.0的方式，可将数据以json数据缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Beanpublic</span> <span class="function">CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span></span>&#123;RedisCacheConfiguration cacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()        .entryTtl(Duration.ofDays(<span class="number">1</span>))        .disableCachingNullValues()        .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer()));<span class="keyword">return</span> RedisCacheManager.builder(factory).cacheDefaults(cacheConfiguration).build();&#125;</span><br></pre></td></tr></table></figure><h1 id="八、异步任务，邮件发送，定时任务"><a href="#八、异步任务，邮件发送，定时任务" class="headerlink" title="八、异步任务，邮件发送，定时任务"></a>八、异步任务，邮件发送，定时任务</h1><h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><ol><li><p>在方法上添加 <code>@Async</code></p></li><li><p>在启动类上添加 <code>@EnableAsync</code></p></li></ol><p>SpringBoot就会自己开一个线程池，进行调用！</p><h2 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h2><p>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持</p><ul><li>邮件发送需要引入spring-boot-start-mail</li><li>SpringBoot 自动配置MailSenderAutoConfiguration</li><li>定义MailProperties内容，配置在application.yml中</li><li>自动装配JavaMailSender</li><li>测试邮件发送</li></ul><p>1、引入pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.mail.username=24736743@qq.comspring.mail.password=你的qq授权码spring.mail.host=smtp.qq.com#</span> <span class="string">qq需要配置sslspring.mail.properties.mail.smtp.ssl.enable=true</span></span><br></pre></td></tr></table></figure><p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="function"><span class="keyword">void</span> <span class="title">mailTeest</span><span class="params">()</span></span>&#123;        SimpleMailMessage mailMessage = <span class="keyword">new</span> SimpleMailMessage();        mailMessage.setSubject(<span class="string">"狂神你好呀"</span>);        mailMessage.setText(<span class="string">"你好呀"</span>);        mailMessage.setTo(<span class="string">"1245325931@qq.com"</span>);        mailMessage.setFrom(<span class="string">"1245325931@qq.com"</span>);        mailSender.send(mailMessage);    &#125;    <span class="meta">@Test</span>    <span class="function"><span class="keyword">void</span> <span class="title">mailFuza</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;        MimeMessage mimeMessage = mailSender.createMimeMessage();        <span class="comment">//组装        MimeMessageHelper helper = new MimeMessageHelper(mimeMessage,true);        helper.setSubject("李义来来来");        helper.setText("&lt;p style='color:red'&gt;嘿嘿嘿&lt;/p&gt;",true);        //附件        helper.addAttachment("1.jpg",new File("C:\\Users\\lenovo\\Desktop\\1.jpg"));        helper.setTo("1245325931@qq.com");        helper.setFrom("1245325931@qq.com");        mailSender.send(mimeMessage);    &#125;</span></span><br></pre></td></tr></table></figure><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。</p><ul><li>TaskExecutor接口</li><li>TaskScheduler接口</li></ul><p>两个注解：</p><ul><li>@EnableScheduling</li><li>@Scheduled</li></ul><p>我们里面存在一个hello方法，他需要定时执行，怎么处理呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Servicepublic</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledService</span> </span>&#123;      <span class="comment">//秒   分   时     日   月   周几   //0 * * * * MON-FRI   //注意cron表达式的用法；   @Scheduled(cron = "0 * * * * 0-7")   public void hello()&#123;       System.out.println("hello.....");  &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>2、这里写完定时任务之后，我们需要在主程序上增加@EnableScheduling 开启定时任务功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步注解功能</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启基于注解的定时任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootTaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       SpringApplication.run(SpringbootTaskApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot&quot;&gt;&lt;a href=&quot;#SpringBoot&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot&quot;&gt;&lt;/a&gt;SpringBoot&lt;/h1&gt;&lt;h1 id=&quot;一、SpringBoot入门&quot;&gt;&lt;a href=&quot;#一、SpringBoot入门&quot; class=&quot;headerlink&quot; title=&quot;一、SpringBoot入门&quot;&gt;&lt;/a&gt;一、SpringBoot入门&lt;/h1&gt;&lt;h2 id=&quot;1、SpringBoot简介&quot;&gt;&lt;a href=&quot;#1、SpringBoot简介&quot; class=&quot;headerlink&quot; title=&quot;1、SpringBoot简介&quot;&gt;&lt;/a&gt;1、SpringBoot简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;简化spring应用开发的一个框架&lt;/li&gt;
&lt;li&gt;整个spring技术栈的一个大融合&lt;/li&gt;
&lt;li&gt;J2EE开发的一站式解决方案&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="javaEE" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/javaEE/"/>
    
      <category term="前后端分离" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/javaEE/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    
    
      <category term="javaEE" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/javaEE/"/>
    
      <category term="spring" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/spring/"/>
    
      <category term="前后端分离" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2021/07/29/hello-world/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2021/07/29/hello-world/</id>
    <published>2021-07-29T03:28:15.786Z</published>
    <updated>2020-05-21T12:16:44.579Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring注解驱动开发</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2021/07/29/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2021/07/29/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</id>
    <published>2021-07-29T03:04:09.000Z</published>
    <updated>2021-07-29T03:05:58.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring注解驱动开发"><a href="#Spring注解驱动开发" class="headerlink" title="Spring注解驱动开发"></a>Spring注解驱动开发</h1><h1 id="一、加载bean组件"><a href="#一、加载bean组件" class="headerlink" title="一、加载bean组件"></a>一、加载bean组件</h1><h2 id="1-配置文件方式"><a href="#1-配置文件方式" class="headerlink" title="1. 配置文件方式"></a>1. 配置文件方式</h2><ul><li><p>首先创建一个maven工程</p></li><li><p>导入spring核心jar包</p><ul><li><pre><code class="xml"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span>        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span><span class="comment"><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 创建JavaBean Person<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> int age;</span><br><span class="line">        <span class="comment">//get set 有参、无参构造，toString省略</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></span></code></pre></li></ul></li><li><p>在resource目录下创建bean.xml配置文件</p><ul><li><pre><code class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.dzu.bean.Person"</span>&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>  <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">beans</span>&gt;</span><span class="comment"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 创建测试类 MainTest<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  - ```<span class="title">java</span></span></span><br><span class="line"><span class="class">    <span class="title">package</span> <span class="title">com</span>.<span class="title">dzu</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">import</span> com.dzu.bean.Person;</span><br><span class="line">    <span class="keyword">import</span> com.dzu.<span class="built_in">config</span>.MainConfig;</span><br><span class="line">    <span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line">    <span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">           </span><br><span class="line">            ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">            Person bean = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(bean);    </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></span></code></pre></li></ul></li><li><p>运行测试类即可。</p></li></ul><h2 id="2-注解方式"><a href="#2-注解方式" class="headerlink" title="2. 注解方式"></a>2. 注解方式</h2><ul><li><p>创建配置包com.dzu.config</p></li><li><p>创建配置类 MyConfig.class</p><ul><li><p>在类上加 <code>@Configuration</code>表示这是一个配置类</p></li><li><p>在方法上加 <code>@Bean</code>表示给容器注册一个组件，id默认为方法名，也可以自己定义</p></li><li><pre><code class="java"><span class="keyword">package</span> com.dzu.config;<span class="keyword">import</span> com.dzu.bean.Person;<span class="keyword">import</span> org.springframework.context.annotation.Bean;<span class="keyword">import</span> org.springframework.context.annotation.Configuration;</code></pre></li></ul></li></ul><pre><code>//配置类等于以前的配置文件//告诉spring这是一个配置类@Configurationpublic class MainConfig {    //给容器注册一个bean，类型为返回值的类型，id默认是用方法名    @Bean(&quot;person&quot;)    public Person person(){        return new Person(&quot;lisi&quot;,20);    }}<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在测试类中测试</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    <span class="keyword">package</span> com.dzu;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">import</span> com.dzu.bean.Person;</span><br><span class="line">    <span class="keyword">import</span> com.dzu.config.MainConfig;</span><br><span class="line">    <span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line">    <span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            </span><br><span class="line">            ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Person bean = applicationContext.getBean(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            System.out.println(bean);</span><br><span class="line">            String[] namesForType = applicationContext.getBeanNamesForType(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">for</span>(String name:namesForType)&#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="二、包扫描"><a href="#二、包扫描" class="headerlink" title="二、包扫描"></a>二、包扫描</h1><h2 id="1-配置文件方式-1"><a href="#1-配置文件方式-1" class="headerlink" title="1. 配置文件方式"></a>1. 配置文件方式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dzu"</span>&gt;</span><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">包扫描只要是标注了@Controller、@Service、@Repository、@Compoent</span><br></pre></td></tr></table></figure><h2 id="2-注解方式-ComponentScan"><a href="#2-注解方式-ComponentScan" class="headerlink" title="2. 注解方式 @ComponentScan"></a>2. 注解方式 @ComponentScan</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在配置类中加上</span><br><span class="line"><span class="meta">@ComponentScan</span>(value=<span class="string">"com.dzu"</span>)</span><br><span class="line">同时可以指定排除那些，以及包含那些</span><br><span class="line">排除，可以选择按照注解，类型，自定义，正则等等方式排除</span><br><span class="line">    <span class="meta">@ComponentScan</span>(value=<span class="string">"com.dzu"</span>,excludeFilters = &#123;</span><br><span class="line">        <span class="meta">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION,classes = &#123;Controller<span class="class">.<span class="keyword">class</span>, <span class="title">Service</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class">包含，要注意关闭默认规则<span class="title">useDefaultFilters</span> </span>= <span class="keyword">false</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(value=<span class="string">"com.dzu"</span>,includeFilters = &#123;</span><br><span class="line">        <span class="meta">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION,classes = &#123;Controller<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">&#125;,<span class="title">useDefaultFilters</span> </span>= <span class="keyword">false</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>FilterType.ANNOTATION</td><td>按照注解</td></tr><tr><td>FilterType.ASSIGNABLE_TYPE</td><td>按照给定的类型</td></tr><tr><td>FilterType.ASPECTJ</td><td>使用ASPECTJ表达式</td></tr><tr><td>FilterType.REGEX</td><td>使用正则指定</td></tr><tr><td>FilterType.CUSTOM</td><td>自定义</td></tr></tbody></table><p><strong>自定义规则需要实现TypeFilter接口</strong></p><p>参数：</p><ul><li><p>MetadataReader：读取到的当前正在扫描的类的信息</p></li><li><p>MetadataReaderFactory：可以获取到其他任何类的信息</p><p>这里举例，含有er的将会扫描</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.ClassMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReaderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.filter.TypeFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTypeFilter</span> <span class="keyword">implements</span> <span class="title">TypeFilter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * MetadataReader：读取到的当前正在扫描的类的信息</span></span><br><span class="line"><span class="comment">    * MetadataReaderFactory：可以获取到其他任何类的信息</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前类注解的信息</span></span><br><span class="line">        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();</span><br><span class="line">        <span class="comment">//获取当前正在扫描的类的信息</span></span><br><span class="line">        ClassMetadata classMetadata = metadataReader.getClassMetadata();</span><br><span class="line">        <span class="comment">//获取当前类资源（路径）</span></span><br><span class="line">        Resource resource = metadataReader.getResource();</span><br><span class="line">        String className = classMetadata.getClassName();</span><br><span class="line">        System.out.println(className);</span><br><span class="line">        <span class="keyword">if</span>(className.contains(<span class="string">"er"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在配置类上面配置上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(value=<span class="string">"com.dzu"</span>,includeFilters = &#123;</span><br><span class="line">        <span class="meta">@ComponentScan</span>.Filter(type = FilterType.CUSTOM,classes = &#123;MyTypeFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">&#125;,<span class="title">useDefaultFilters</span> </span>= <span class="keyword">false</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="三、-Scope设置组件作用域"><a href="#三、-Scope设置组件作用域" class="headerlink" title="三、@Scope设置组件作用域"></a>三、@Scope设置组件作用域</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"person"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<strong>@Scope</strong>可以修改组件的作用域</p><table><thead><tr><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>protptype</td><td>多实例，IOC容器启动并不会去调用方法创建对象放在容器中。每次获取的时候才会调用方法创建对象</td></tr><tr><td>singeton</td><td>单实例（<strong>默认值</strong>）IOC容器启动会调用方法创建对象放到ioc容器中，以后每次获取就是从容器中拿</td></tr><tr><td>request</td><td>同一次请求创建一个实例</td></tr><tr><td>session</td><td>同一个session创建一个实例</td></tr></tbody></table><h1 id="四、懒加载-Lazy"><a href="#四、懒加载-Lazy" class="headerlink" title="四、懒加载@Lazy"></a>四、懒加载@Lazy</h1><ul><li>单实例bean:默认在容器启动的时候创建对象</li><li>懒加载：容器启动不创建对象，第一次使用（获取）Bean创建对象，并初始化</li><li>在组件上添加<strong>@Lazy</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"person"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"给容器中添加Person"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、按条件注册bean-Conditional"><a href="#五、按条件注册bean-Conditional" class="headerlink" title="五、按条件注册bean,@Conditional"></a>五、按条件注册bean,@Conditional</h1><p>@Conditional({Condition})：按照一定的条件进行判断，满足条件给容器中注册bean</p><p><strong>用法</strong>：</p><ol><li>放在方法上，表示该方法满足条件才会注册</li><li>放在类上，表示该类满足条件，才会注册</li><li>条件类需要实现Condition接口</li></ol><p><strong>举例</strong></p><p>配置类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @Conditional(&#123;Condition&#125;)：按照一定的条件进行判断，满足条件给容器中注册bean</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 条件：</span></span><br><span class="line"><span class="comment">    *   如果系统是windows系统，给容器注册("bill")</span></span><br><span class="line"><span class="comment">    *   如果linux系统，给容器注册("linus")</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Conditional</span>(&#123;WindowsCondition<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line">    @Bean("Bill")</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"Bill Gates"</span>,<span class="number">62</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Conditional</span>(&#123;LinuxCondition<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line">    @Bean("linus")</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"linus"</span>,<span class="number">48</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>条件1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinuxCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * ConditionContext：判断条件能使用的上下文环境</span></span><br><span class="line"><span class="comment">    * AnnotatedTypeMetadata：注释信息</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//是否linux系统</span></span><br><span class="line">        <span class="comment">//获得ioc使用的beanFactory</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = conditionContext.getBeanFactory();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取类加载器</span></span><br><span class="line">        ClassLoader classLoader = conditionContext.getClassLoader();</span><br><span class="line">        <span class="comment">//获取当前环境</span></span><br><span class="line">        Environment environment = conditionContext.getEnvironment();</span><br><span class="line">        <span class="comment">//获取bean定义的注册类</span></span><br><span class="line">        BeanDefinitionRegistry registry = conditionContext.getRegistry();</span><br><span class="line"></span><br><span class="line">        String property = environment.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">        <span class="keyword">if</span>(property.contains(<span class="string">"Linux"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条件二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前环境</span></span><br><span class="line">        Environment environment = conditionContext.getEnvironment();</span><br><span class="line">        <span class="comment">//获取bean定义的注册类</span></span><br><span class="line">        BeanDefinitionRegistry registry = conditionContext.getRegistry();</span><br><span class="line"></span><br><span class="line">        String property = environment.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">        <span class="keyword">if</span>(property.contains(<span class="string">"Windows"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、给容器注册组件-Import"><a href="#六、给容器注册组件-Import" class="headerlink" title="六、给容器注册组件@Import"></a>六、给容器注册组件@Import</h1><p><strong>1.@Import(组件)</strong>，可以给容器注册组件，id默认是全类名，写到类上</p><p><strong>例如：</strong>@Import(Color.class）</p><p><strong>2.ImportSelector</strong>：可以添加一些判断等等，返回需要导入组件全类名的数组</p><p><strong>用法：</strong>创建类，实现ImportSelector接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportSelector;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportSekector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 返回值：就是导入到容器中组件的全类名</span></span><br><span class="line"><span class="comment">    * AnnotationMetadata：当前标注@Import注解的类的所有注解信息</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//不要返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"com.dzu.bean.Yellow"</span>,<span class="string">"com.dzu.bean.Red"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在@Import中加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;Color<span class="class">.<span class="keyword">class</span>,<span class="title">MyImportSekector</span>.<span class="title">class</span>&#125;)</span></span><br></pre></td></tr></table></figure><p><strong>3.ImportBeanDefinitionRegistrar</strong>：手动注册bean到容器</p><p><strong>用法：</strong>创建类，实现ImportBeanDefinitionRegistrar接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzu.bean.RainBow;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.RootBeanDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportBeanDefinitionRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportBeasnDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * AnnotationMetadata：当前类的注解信息</span></span><br><span class="line"><span class="comment">    * BeanDefinitionRegistry：BeanDefinition注册类</span></span><br><span class="line"><span class="comment">    *       把所有需要添加到容器的bean,调用BeanDefinitionRegistry.registerBeanDefinitions手工注册进来</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata annotationMetadata, BeanDefinitionRegistry beanDefinitionRegistry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> definition = beanDefinitionRegistry.containsBeanDefinition(<span class="string">"com.dzu.bean.Red"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> definition2 = beanDefinitionRegistry.containsBeanDefinition(<span class="string">"com.dzu.bean.Yellow"</span>);</span><br><span class="line">        <span class="keyword">if</span>(definition &amp;&amp; definition2)&#123;</span><br><span class="line">            <span class="comment">//指定bean的类型，作用域等等</span></span><br><span class="line">            RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(RainBow<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">//指定bean名</span></span><br><span class="line">            beanDefinitionRegistry.registerBeanDefinition(<span class="string">"rainBow"</span>,beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在@Import上加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;Color<span class="class">.<span class="keyword">class</span>,<span class="title">MyImportSekector</span>.<span class="title">class</span>,<span class="title">MyImportBeasnDefinitionRegistrar</span>.<span class="title">class</span>&#125;)</span></span><br></pre></td></tr></table></figure><h1 id="七、使用Factory注册bean"><a href="#七、使用Factory注册bean" class="headerlink" title="七、使用Factory注册bean"></a>七、使用Factory注册bean</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Spring定义的工厂bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Color</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个Color对象，这个对象会添加到容器中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Color <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ColorFactoryBean......."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Color();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Color<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//控制是否单例 true单实例   false多实例</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中添加组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ColorFactoryBean <span class="title">colorFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ColorFactoryBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认获取到的是工厂bean调用getObject创建的对象，获取工厂bean本身需要给id前面加一个&amp;，&amp;colorFactoryBean</p><h1 id="组件注册方式总结"><a href="#组件注册方式总结" class="headerlink" title="组件注册方式总结"></a>组件注册方式总结</h1><p><strong>给容器注册组件的方式</strong></p><ol><li><p>包扫描+组件标注注解（@Controller，@Service，@Repository，@Component）【只能标注我们自己写的类】</p></li><li><p>@Bean 【导入第三方包里面的组件】</p></li><li><p>@Import 【快速给容器导入一个组件】</p><ol><li>@Import(要导入容器中的组件)：容器中就会自动注册这个组件，id默认是全类名</li><li>ImportSelector：返回需要导入组件全类名的数组</li><li>ImportBeanDefinitionRegistrar：手动注册bean到容器</li></ol></li><li><p>使用Spring提供的FactoryBean（工厂Bean）</p><ol><li>默认获取到的是工厂bean调用getObject创建的对象</li><li>获取工厂bean本身需要给id前面加一个&amp;，&amp;colorFactoryBean</li></ol></li></ol><h1 id="八、生命周期"><a href="#八、生命周期" class="headerlink" title="八、生命周期"></a>八、生命周期</h1><h2 id="1-Bean指定初始化和销毁方法"><a href="#1-Bean指定初始化和销毁方法" class="headerlink" title="1. @Bean指定初始化和销毁方法"></a>1. @Bean指定初始化和销毁方法</h2><p>bean创建—-初始化—-销毁过程</p><p>容器管理bean的生命周期</p><p>我们可以自定义初始化和销毁方法，容器在bean进行到当前生命周期的时候来调用我们自定义的初始化和销毁方法</p><ul><li>构造（对象创建）<ul><li>单实例：容器启动的时候创建对象</li><li>多实例：每次获取的时候创建对象</li></ul></li><li>初始化<ul><li>对象创建好，并赋值好</li></ul></li><li>销毁<ul><li>单实例：容器关闭的时候</li><li>多实例：容器不会管理这个bean，容器不会调用销毁方法</li></ul></li></ul><p><strong>指定初始化和销毁方法</strong></p><p>通过@Bean指定init-method和destory-method方法</p><p>首先创建一个实体类，其中有构造方法，init方法，destory方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"car......constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"car......init....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"car......destory....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建配置类，并注册组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfLifeCycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>,destroyMethod = <span class="string">"destory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">car</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-通过实现InitiallizingBean和DisposableBean接口"><a href="#2-通过实现InitiallizingBean和DisposableBean接口" class="headerlink" title="2. 通过实现InitiallizingBean和DisposableBean接口"></a>2. 通过实现InitiallizingBean和DisposableBean接口</h2><p>通过让Bean实现InitiallizingBean接口（定义初始化逻辑），DisposableBean接口（定义销毁逻辑）</p><p>首先定义一个实体类，实现上方两个接口，并用@Component标注</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/9/25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.dzu.bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>:1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>,<span class="title">DisposableBean</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat......constructor..........."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat........destory"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat.......afterPropertiesSet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类中开启组件扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.dzu.bean"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfLifeCycle</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.test;</span><br><span class="line"><span class="keyword">import</span> com.dzu.config.MainConfigOfLifeCycle;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOCTestOfLifeCycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建ioc容器</span></span><br><span class="line">        AnnotationConfigApplicationContext annotationConfigApplicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfLifeCycle<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"容器创建完成"</span>);</span><br><span class="line">        annotationConfigApplicationContext.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---- IntelliJ IDEA coverage runner ---- </span><br><span class="line">sampling <span class="built_in">..</span>.</span><br><span class="line">include patterns:</span><br><span class="line">com\.dzu\.test\<span class="built_in">..</span>*</span><br><span class="line">exclude patterns:九月 25, 2020 10:00:09 上午 org.springframework.context.annotation.AnnotationConfigApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@279ad2e3: startup date [Fri Sep 25 10:00:09 CST 2020]; root of context hierarchy</span><br><span class="line">cat<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>constructor<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">cat<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.afterPropertiesSet</span><br><span class="line">car<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>constructor</span><br><span class="line">car<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>init<span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">容器创建完成</span><br><span class="line">car<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>destory<span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">cat<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>destory</span><br></pre></td></tr></table></figure><h2 id="3-可以使用JSP250，-PostConstruct，-PreDestory"><a href="#3-可以使用JSP250，-PostConstruct，-PreDestory" class="headerlink" title="3. 可以使用JSP250，@PostConstruct，@PreDestory"></a>3. 可以使用JSP250，@PostConstruct，@PreDestory</h2><ul><li>@PostConstruct：在bean创建完成并且属性赋值完成，来执行初始化方法</li><li>@PreDestory：在容器销毁bean之前通知我们进行清理工作</li></ul><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dog.........constructor"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对象创建并赋值之后调用</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dog....@PostConstruct"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//容器移除之前</span></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dog.....@PreDestroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-实现BeanPostProcessor接口"><a href="#4-实现BeanPostProcessor接口" class="headerlink" title="4. 实现BeanPostProcessor接口"></a>4. 实现BeanPostProcessor接口</h2><p>BeanPostProcessor：bean的后置处理器</p><p>在bean的初始化前后进行一些处理工作</p><ul><li>postProcessBeforeInitialization()：在初始化之前工作</li><li>postProcessAfterInitialization()：在初始化之后工作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/9/25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.dzu.bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>:1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object o, String s)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postProcessBeforeInitialization......"</span>+s+<span class="string">"=&gt;"</span>+o);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object o, String s)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postProcessAfterInitialization......"</span>+s+<span class="string">"=&gt;"</span>+o);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ol><li>Object o 是当前Bean</li><li>String s 是bean的名字</li></ol><p>测试结果</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">---- IntelliJ IDEA coverage runner ---- </span><br><span class="line">sampling <span class="built_in">..</span>.</span><br><span class="line">include patterns:</span><br><span class="line">com\.dzu\.test\<span class="built_in">..</span>*</span><br><span class="line">exclude patterns:九月 25, 2020 3:05:30 下午 org.springframework.context.annotation.AnnotationConfigApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@279ad2e3: startup date [Fri Sep 25 15:05:30 CST 2020]; root of context hierarchy</span><br><span class="line">postProcessBeforeInitialization<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>org.springframework.context.event.<span class="attribute">internalEventListenerProcessor</span>=&gt;org.springframework.context.event.EventListenerMethodProcessor@49c7b90e</span><br><span class="line">postProcessAfterInitialization<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>org.springframework.context.event.<span class="attribute">internalEventListenerProcessor</span>=&gt;org.springframework.context.event.EventListenerMethodProcessor@49c7b90e</span><br><span class="line">postProcessBeforeInitialization<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>org.springframework.context.event.<span class="attribute">internalEventListenerFactory</span>=&gt;org.springframework.context.event.DefaultEventListenerFactory@4d5b6aac</span><br><span class="line">postProcessAfterInitialization<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>org.springframework.context.event.<span class="attribute">internalEventListenerFactory</span>=&gt;org.springframework.context.event.DefaultEventListenerFactory@4d5b6aac</span><br><span class="line">postProcessBeforeInitialization<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="attribute">mainConfigOfLifeCycle</span>=&gt;com.dzu.config.MainConfigOfLifeCycle$$EnhancerBySpringCGLIB$$8d665c35@4a7f959b</span><br><span class="line">postProcessAfterInitialization<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="attribute">mainConfigOfLifeCycle</span>=&gt;com.dzu.config.MainConfigOfLifeCycle$$EnhancerBySpringCGLIB$$8d665c35@4a7f959b</span><br><span class="line">cat<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>constructor<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">postProcessBeforeInitialization<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="attribute">cat</span>=&gt;com.dzu.bean.Cat@483f6d77</span><br><span class="line">cat<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.afterPropertiesSet</span><br><span class="line">postProcessAfterInitialization<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="attribute">cat</span>=&gt;com.dzu.bean.Cat@483f6d77</span><br><span class="line">dog<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.constructor </span><br><span class="line">postProcessBeforeInitialization<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="attribute">dog</span>=&gt;com.dzu.bean.Dog@581ac8a8</span><br><span class="line">dog<span class="built_in">..</span><span class="built_in">..</span>@PostConstruct</span><br><span class="line">postProcessAfterInitialization<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="attribute">dog</span>=&gt;com.dzu.bean.Dog@581ac8a8</span><br><span class="line">car<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>constructor</span><br><span class="line">postProcessBeforeInitialization<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="attribute">car</span>=&gt;com.dzu.bean.Car@3f6b0be5</span><br><span class="line">car<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>init<span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">postProcessAfterInitialization<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="attribute">car</span>=&gt;com.dzu.bean.Car@3f6b0be5</span><br><span class="line"></span><br><span class="line">九月 25, 2020 3:05:30 下午 org.springframework.context.annotation.AnnotationConfigApplicationContext doClose</span><br><span class="line">信息: Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@279ad2e3: startup date [Fri Sep 25 15:05:30 CST 2020]; root of context hierarchy</span><br><span class="line">容器创建完成</span><br><span class="line">car<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>destory<span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">dog<span class="built_in">..</span><span class="built_in">..</span>.@PreDestroy</span><br><span class="line">cat<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>destory</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h1 id="九、属性赋值"><a href="#九、属性赋值" class="headerlink" title="九、属性赋值"></a>九、属性赋值</h1><h2 id="1-Value赋值"><a href="#1-Value赋值" class="headerlink" title="1. @Value赋值"></a>1. @Value赋值</h2><p>使用@Value可以给bean赋值</p><ul><li>可以是基本数值</li><li>可以是SpEL  #{}</li><li>可以是${}，取出配置文件中的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1.基本数值</span></span><br><span class="line"><span class="comment">    * 2.可以写SPEL，#&#123;&#125;</span></span><br><span class="line"><span class="comment">    * 3.$&#123;&#125;  取出配置文件中的值</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"张三"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;20-2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.nickName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-PropertySource加载外部配置文件"><a href="#2-PropertySource加载外部配置文件" class="headerlink" title="2. @PropertySource加载外部配置文件"></a>2. @PropertySource加载外部配置文件</h2><p>配置文件做法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">lacation</span>=<span class="string">"classpath:/"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>注解做法</p><p>在配置类上标注@PropertySource</p><p>使用@PropertySource读取配置文件中的k/v保存到运行的环境变量中</p><p><code>@PropertySource(value={&quot;classpath:/person.properties&quot;})</code></p><h1 id="十、自动装配"><a href="#十、自动装配" class="headerlink" title="十、自动装配"></a>十、自动装配</h1><p>spring利用依赖注入（DI），完成对IOC容器中各个组件的依赖关系赋值</p><h2 id="1-Autowired-自动注入"><a href="#1-Autowired-自动注入" class="headerlink" title="1. @Autowired 自动注入"></a>1. @Autowired 自动注入</h2><ul><li>默认优先按照类型去容器中找对应的组件：<code>applicationContext.getBean(BookDao.class);</code></li><li>如果找到多个相同类型的组件，再将属性的名称作为组件id去容器中查找 <code>applicationContext.getBean(&quot;bookDao&quot;);</code></li><li>自动装配一定要将属性赋值好，否则就会报错<ul><li>但是可以使用 <code>@Autowired(required = false)</code>  非必须</li></ul></li><li>标注在方法位置：@Bean+方法参数，参数从容器中获取</li><li>标在构造器上：如果组件只有一个有参构造器，这个有参构造器的@Autowired可以省略</li></ul><h2 id="2-Qualifier"><a href="#2-Qualifier" class="headerlink" title="2. @Qualifier"></a>2. @Qualifier</h2><p>使用@Qualifier(“bookDao”)：指定需要配置的组件id，而不是使用属性名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"bookDao"</span>)</span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Primary-首选bean"><a href="#3-Primary-首选bean" class="headerlink" title="3. @Primary  首选bean"></a>3. @Primary  首选bean</h2><p>让spring在进行自动装配的时候，默认使用首选的bean  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"bookDao2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> BookDao <span class="title">bookDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BookDao bookDao = <span class="keyword">new</span> BookDao();</span><br><span class="line">    bookDao.setLable(<span class="string">"2"</span>);</span><br><span class="line">    <span class="keyword">return</span> bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Resource"><a href="#4-Resource" class="headerlink" title="4. @Resource"></a>4. @Resource</h2><ul><li><code>@Resource(name=&quot;bookDao2&quot;)</code></li><li>可以实现自动装配，默认按照组件名称进行装配</li><li>没有支持required = false，@Qualifier，@Primary</li></ul><h2 id="5-Inject"><a href="#5-Inject" class="headerlink" title="5. @Inject"></a>5. @Inject</h2><ul><li>需要导入javax.Inject包，和Autowired功能一样，没有required = false</li></ul><h2 id="6-Profile环境搭建"><a href="#6-Profile环境搭建" class="headerlink" title="6. @Profile环境搭建"></a>6. @Profile环境搭建</h2><p>spring为我们提供的可以根据当前环境，动态的激活和切换一系列组件的功能</p><p>开发环境、测试环境、生产环境</p><p>@Profile：指定组件在那个环境的情况下才被注册到容器中，不指定，任何环境下都能注册这个组件</p><ol><li>加了环境标识的bean，只有这个环境被激活的时候才能注册到容器中，默认default环境</li><li>写在配置类上，只有是指定的环境的时候，整个配置类里面的所有配置才能生效</li><li>没有标注环境标识的bean在任何环境下都是加载的</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzu.bean.Yellow;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.<span class="keyword">annotation</span>.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.EmbeddedValueResolverAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Profile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringValueResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Profile:</span></span><br><span class="line"><span class="comment">*   spring为我们提供的可以根据当前环境，动态的激活和切换一系列组件的功能</span></span><br><span class="line"><span class="comment">* 开发环境、测试环境、生产环境</span></span><br><span class="line"><span class="comment">* @Profile：指定组件在那个环境的情况下才被注册到容器中，不指定，任何环境下都能注册这个组件</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   1.加了环境标识的bean，只有这个环境被激活的时候才能注册到容器中，默认default环境</span></span><br><span class="line"><span class="comment">*   2.写在配置类上，只有是指定的环境的时候，整个配置类里面的所有配置才能生效</span></span><br><span class="line"><span class="comment">*   3.没有标注环境标识的bean在任何环境下都是加载的</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@PropertySource(<span class="meta-string">"classpath:/dbconfig.properties"</span>)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfProfile</span> <span class="title">implements</span> <span class="title">EmbeddedValueResolverAware</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;db.user&#125;</span>"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringValueResolver stringValueResolver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String driverClass;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile(<span class="meta-string">"test"</span>)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Yellow yellow()&#123;</span><br><span class="line">        <span class="keyword">return</span> new Yellow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile(<span class="meta-string">"test"</span>)</span></span><br><span class="line">    <span class="meta">@Bean(<span class="meta-string">"testDatasource"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource dataSourceTest(<span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;db.password&#125;</span>"</span>)</span> String pwd) throws Exception  &#123;</span><br><span class="line">        ComboPooledDataSource dataSource = new ComboPooledDataSource();</span><br><span class="line">        dataSource.setUser(user);</span><br><span class="line">        dataSource.setPassword(pwd);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/test"</span>);</span><br><span class="line"></span><br><span class="line">        dataSource.setDriverClass(driverClass);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile(<span class="meta-string">"dev"</span>)</span></span><br><span class="line">    <span class="meta">@Bean(<span class="meta-string">"devDatasource"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource dataSourceDev() throws Exception &#123;</span><br><span class="line">        ComboPooledDataSource dataSource = new ComboPooledDataSource();</span><br><span class="line">        dataSource.setUser(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">""</span>);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/spring_cache"</span>);</span><br><span class="line">        dataSource.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void setEmbeddedValueResolver(StringValueResolver stringValueResolver) &#123;</span><br><span class="line">        <span class="keyword">this</span>.stringValueResolver = stringValueResolver;</span><br><span class="line">        driverClass = <span class="keyword">this</span>.stringValueResolver.resolveStringValue(<span class="string">"<span class="subst">$&#123;db.driverClass&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改运行环境的两种方式</strong></p><ol><li>命令行参数:在虚拟机参数位置加载，-Dspring.profiles.active=环境名称</li><li>代码方式</li></ol><p><strong>代码方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">       AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">       <span class="comment">//1.创建applicationContext容器</span></span><br><span class="line">       <span class="comment">//2.设置需要激活的环境</span></span><br><span class="line">       applicationContext.getEnvironment().setActiveProfiles(<span class="string">"dev"</span>);</span><br><span class="line">       <span class="comment">//3.注册主配置类</span></span><br><span class="line">       applicationContext.register(MainConfi+gOfProfile<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       <span class="comment">//4.启动刷新容器</span></span><br><span class="line">       applicationContext.refresh();</span><br><span class="line"></span><br><span class="line">       printBeans(applicationContext);</span><br><span class="line">       System.out.println(<span class="string">"*************************************"</span>);</span><br><span class="line">       String[] beans = applicationContext.getBeanNamesForType(DataSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       <span class="keyword">for</span> (String bean : beans) &#123;</span><br><span class="line">           System.out.println(bean);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="十一、AOP"><a href="#十一、AOP" class="headerlink" title="十一、AOP"></a>十一、AOP</h1><p>指在程序运行期间动态的将某段代码切入到指定方法指定位置进行运行的编程方式。</p><p><strong>使用步骤</strong></p><ol><li>导入AOP模块：Spring AOP（spring-aspects）</li><li>定义一个业务逻辑类(例如：MathCalculator)，在业务逻辑运行的时候将日志进行打印（方法之前、方法运行结束、方法出现异常）</li><li>定义一个日志切面类(例如：LogAspects)：切面类里面的方法，需要动态感知MathCalculator.div()运行到哪里，然后执行<ol><li>通知方法<ul><li>前置通知(@Before)：logStart：在目标方法运行之前运行</li><li>后置通知(@After)：logEnd：在目标方法运行之后运行，无论方法正常还是异常结束</li><li>返回通知(@AfterReturning)：logReturn：在目标方法正常返回之后运行</li><li>异常通知(@AfterThrowing)：logException：在目标方法出现异常以后运行</li><li>环绕通知(@Around)：动态代理，手动推进目标方法运行（joinPoint.procced()）</li></ul></li></ol></li><li>给切面类的目标方法标注何时何地运行（通知注解）</li><li>给切面类和业务逻辑类(目标方法所在类)都加入到容器中</li><li>必须告诉spring那个类是切面类（给切面类加一个注解：@Aspect）</li><li>给配置类加@EnableAspectJAutoProxy【开启基于注解的aop模式】<ul><li>在spring中有很多的@EnableXXX：用于开启某项功能</li></ul></li></ol><p><strong>1.导入AOP模块</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.定义业务逻辑类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathCalculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//计算两数相除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"div调用"</span>);</span><br><span class="line">        <span class="keyword">return</span> i/j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.定义日志切面类</strong></p><p><strong>注意：JoinPoint一定要出现在参数表第一位</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.aop;<span class="keyword">import</span> org.aspectj.lang.JoinPoint;<span class="keyword">import</span> org.aspectj.lang.annotation.*;<span class="keyword">import</span> java.util.Arrays;<span class="comment">/** * <span class="doctag">@Auther</span>: * <span class="doctag">@DATE</span>: 2020/9/29 * <span class="doctag">@Description</span>: com.dzu.aop * <span class="doctag">@version</span>:1.0 */</span><span class="comment">//告诉spring，当前类是切面类@Aspectpublic class LogAspects &#123;    //抽取公共的切入点表达式    //1.本类引用    //2.其他的切面引用    @Pointcut("execution(public int com.dzu.aop.MathCalculator.*(..))")    public void pointCut()&#123;&#125;;    //在目标方法之前介入，切入点表达式（指定在那个方法切入）    @Before("pointCut()")    //JoinPoint一定要出现在参数表第一位    public void logStart(JoinPoint joinPoint)&#123;        Object[] args = joinPoint.getArgs();        System.out.println(""+joinPoint.getSignature().getName()+"...@Before..."+"参数列表是"+ Arrays.asList(args));    &#125;    @After("pointCut()")    public void logEnd(JoinPoint joinPoint)&#123;        System.out.println(""+joinPoint.getSignature().getName()+"除法结束...@After...");    &#125;    @AfterReturning(value="pointCut()",returning = "result")    public void logReturn(Object result)&#123;        System.out.println("触发正常返回....运行结果&#123;"+result+"&#125;");    &#125;    @AfterThrowing(value="pointCut()",throwing = "exception")    public void logException(Exception exception)&#123;        System.out.println("除法异常....异常信息&#123;"+exception+"&#125;");    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>4.将切面类和业务逻辑类加到容器中</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzu.aop.LogAspects;</span><br><span class="line"><span class="keyword">import</span> com.dzu.aop.MathCalculator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"><span class="comment">//开启基于注解的aop</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfAOP</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//业务逻辑类加入容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MathCalculator <span class="title">calculator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MathCalculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切面类加入到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LogAspects <span class="title">logAspects</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogAspects();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.进行测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzu.aop.MathCalculator;</span><br><span class="line"><span class="keyword">import</span> com.dzu.config.MainConfigOfAOP;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOCTest_AOP</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    AnnotationConfigApplicationContext annotationConfigApplicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfAOP<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        printBeans(annotationConfigApplicationContext);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.不要自己创建，要使用容器中的</span></span><br><span class="line">        MathCalculator mathCalculator = annotationConfigApplicationContext.getBean(MathCalculator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        mathCalculator.div(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        annotationConfigApplicationContext.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printBeans</span><span class="params">(ApplicationContext applicationContext)</span></span>&#123;</span><br><span class="line">        String[] beanDefinitionNames = applicationContext.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span>(String name:beanDefinitionNames)&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十二、声明式事务"><a href="#十二、声明式事务" class="headerlink" title="十二、声明式事务"></a>十二、声明式事务</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><p><strong>导入相关依赖</strong></p><p>数据源、数据库驱动、spring-jdbc模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/c3p0/c3p0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.44<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-配置数据源、JdbcTemplate"><a href="#2-配置数据源、JdbcTemplate" class="headerlink" title="2. 配置数据源、JdbcTemplate"></a>2. 配置数据源、JdbcTemplate</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.dzu.tx"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setUser(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">""</span>);</span><br><span class="line">        dataSource.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/test"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//spring对@Configuration类会特殊处理</span></span><br><span class="line">    <span class="comment">//调用方法相当于从容器中找组件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建UserDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.tx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into tbl_user(username,age) values(?,?)"</span>;</span><br><span class="line">        String username = UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">        jdbcTemplate.update(sql,username,<span class="number">19</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建UserService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.tx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/10/2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.dzu.tx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>:1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">        System.out.println(<span class="string">"插入完成"</span>);</span><br><span class="line">        <span class="comment">//int i = 10/0;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-给方法上标注-Transactional-表示当前方法是一个事务方法"><a href="#3-给方法上标注-Transactional-表示当前方法是一个事务方法" class="headerlink" title="3. 给方法上标注@Transactional 表示当前方法是一个事务方法"></a>3. 给方法上标注@Transactional 表示当前方法是一个事务方法</h2><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">        System.out.println(<span class="string">"插入完成"</span>);</span><br><span class="line">        <span class="comment">//int i = 10/0;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-EnableTransactionManagement-开启基于注解的事务管理"><a href="#4-EnableTransactionManagement-开启基于注解的事务管理" class="headerlink" title="4. @EnableTransactionManagement 开启基于注解的事务管理"></a>4. @EnableTransactionManagement 开启基于注解的事务管理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.dzu.tx"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-配置事务管理器来控制事务"><a href="#5-配置事务管理器来控制事务" class="headerlink" title="5. 配置事务管理器来控制事务"></a>5. 配置事务管理器来控制事务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</span><br><span class="line">    &#125;<span class="comment">//参数传入数据源</span></span><br></pre></td></tr></table></figure><h2 id="6-进行测试"><a href="#6-进行测试" class="headerlink" title="6. 进行测试"></a>6. 进行测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzu.tx.TxConfig; </span><br><span class="line"><span class="keyword">import</span> com.dzu.tx.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOCTest_TX</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    AnnotationConfigApplicationContext annotationConfigApplicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(TxConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserService userService = annotationConfigApplicationContext.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        userService.insertUser();</span><br><span class="line">        annotationConfigApplicationContext.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring注解驱动开发&quot;&gt;&lt;a href=&quot;#Spring注解驱动开发&quot; class=&quot;headerlink&quot; title=&quot;Spring注解驱动开发&quot;&gt;&lt;/a&gt;Spring注解驱动开发&lt;/h1&gt;&lt;h1 id=&quot;一、加载bean组件&quot;&gt;&lt;a href=&quot;#一、加
      
    
    </summary>
    
    
      <category term="javaEE" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/javaEE/"/>
    
      <category term="ssm框架" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/javaEE/ssm%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="javaEE" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/javaEE/"/>
    
      <category term="spring" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2021/07/06/Maven/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2021/07/06/Maven/</id>
    <published>2021-07-06T09:08:22.000Z</published>
    <updated>2021-07-06T09:11:53.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p>生产环境下开发不再是一个项目一个工程，而是每一个模块创建一个工程，而多个模块整合在一起就需要使用到像 Maven 这样的构建工具。</p><a id="more"></a><h2 id="究竟为什么使用"><a href="#究竟为什么使用" class="headerlink" title="究竟为什么使用"></a>究竟为什么使用</h2><h3 id="添加第三方-jar-包"><a href="#添加第三方-jar-包" class="headerlink" title="添加第三方 jar 包"></a>添加第三方 jar 包</h3><p>在今天的 JavaEE 开发领域，有大量的第三方框架和工具可以供我们使用。要使用这些 jar 包最简单</p><p>的方法就是复制粘贴到 WEB-INF/lib 目录下。但是这会导致每次创建一个新的工程就需要将 jar 包重复复</p><p>制到 lib 目录下，从而造成工作区中存在大量重复的文件，让我们的工程显得很臃肿。</p><p>而使用 Maven 后每个 jar 包本身只在本地仓库中保存一份，需要 jar 包的工程只需要以坐标的方式</p><p>简单的引用一下就可以了。不仅极大的节约了存储空间，让项目更轻巧，更避免了重复文件太多而造成</p><p>的混乱。</p><h3 id="jar-包之间的依赖关系"><a href="#jar-包之间的依赖关系" class="headerlink" title="jar 包之间的依赖关系"></a>jar 包之间的依赖关系</h3><p>​    jar 包往往不是孤立存在的，很多 jar 包都需要在其他 jar 包的支持下才能够正常工作，我们称之r 包之间的依赖关系。最典型的例子是：commons-fileupload-1.3.jar 依赖于 commons-io-2.0.1.jar，如没有 IO 包，FileUpload 包就不能正常工作。 </p><p>​    那么问题来了，你知道你所使用的所有 jar 包的依赖关系吗？当你拿到一个新的从未使用过的 包，你如何得知他需要哪些 jar 包的支持呢？如果不了解这个情况，导入的 jar 包不够，那么现有的序将不能正常工作。再进一步，当你的项目中需要用到上百个 jar 包时，你还会人为的，手工的逐一认它们依赖的其他 jar 包吗？这简直是不可想象的。 </p><p>​    而引入 Maven 后，Maven 就可以替我们自动的将当前 jar 包所依赖的其他所有 jar 包全部导入进无需人工参与，节约了我们大量的时间和精力。用实际例子来说明就是：通过 Maven 导ommons-fileupload-1.3.jar 后，commons-io-2.0.1.jar 会被自动导入，程序员不必了解这个依赖关系。</p><h3 id="获取第三方-jar-包"><a href="#获取第三方-jar-包" class="headerlink" title="获取第三方 jar 包"></a>获取第三方 jar 包</h3><p>​    JavaEE 开发中需要使用到的 jar 包种类繁多，几乎每个 jar 包在其本身的官网上的获取方式都不尽相</p><p>同。为了查找一个 jar 包找遍互联网，身心俱疲，没有经历过的人或许体会不到这种折磨。不仅如此，</p><p>费劲心血找的 jar 包里有的时候并没有你需要的那个类，又或者又同名的类没有你要的方法——以不规</p><p>范的方式获取的 jar 包也往往是不规范的。</p><p>​    使用 Maven 我们可以享受到一个完全统一规范的 jar 包管理体系。你只需要在你的项目中以坐标的</p><p>方式依赖一个 jar 包，Maven 就会自动从中央仓库进行下载，并同时下载这个 jar 包所依赖的其他 jar 包 </p><p>——规范、完整、准确！一次性解决所有问题！</p><p>​    Tips：在这里我们顺便说一下，统一的规范几乎可以说成是程序员的最高信仰。如果没有统一的规</p><p>范，就意味着每个具体的技术都各自为政，需要以诸多不同的特殊的方式加入到项目中；好不容易加入</p><p>进来还会和其他技术格格不入，最终受苦的是我们。而任何一个领域的统一规范都能够极大的降低程序</p><p>员的工作难度，减少工作量。例如：USB 接口可以外接各种设备，如果每个设备都有自己独特的接口，</p><p>那么不仅制造商需要维护各个接口的设计方案，使用者也需要详细了解每个设备对应的接口，无疑是非</p><p>常繁琐的。</p><h3 id="将项目拆分成多个工程模块"><a href="#将项目拆分成多个工程模块" class="headerlink" title="将项目拆分成多个工程模块"></a>将项目拆分成多个工程模块</h3><p>​    随着 JavaEE 项目的规模越来越庞大，开发团队的规模也与日俱增。一个项目上千人的团队持续开</p><p>发很多年对于 JavaEE 项目来说再正常不过。那么我们想象一下：几百上千的人开发的项目是同一个 Web</p><p>工程。那么架构师、项目经理该如何划分项目的模块、如何分工呢？这么大的项目已经不可能通过</p><p>package 结构来划分模块，必须将项目拆分成多个工程协同开发。多个模块工程中有的是 Java 工程，有</p><p>的是 Web 工程。</p><h2 id="什么是maven"><a href="#什么是maven" class="headerlink" title="什么是maven"></a>什么是maven</h2><h3 id="Maven-简介"><a href="#Maven-简介" class="headerlink" title="Maven 简介"></a>Maven 简介</h3><p>Maven 是 Apache 软件基金会组织维护的一款自动化<strong>构建</strong>工具，专注服务于 Java 平台的<strong>项目构建</strong>和</p><p><strong>依赖管理</strong>。Maven 这个单词的本意是：专家，内行。读音是[‘meɪv(ə)n]或[‘mevn]。</p><h3 id="什么是构建"><a href="#什么是构建" class="headerlink" title="什么是构建"></a>什么是构建</h3><p>构建并不是创建，创建一个工程并不等于构建一个项目。要了解构建的含义我们应该由浅入深的从</p><p>以下三个层面来看：</p><p>①纯 Java 代码</p><p>大家都知道，我们 Java 是一门编译型语言，.java 扩展名的源文件需要编译成.class 扩展名的字节码</p><p>文件才能够执行。所以编写任何 Java 代码想要执行的话就必须经过编译得到对应的.class 文件。</p><p>②Web 工程</p><p>当我们需要通过浏览器访问 Java 程序时就必须将包含 Java 程序的 Web 工程编译的结果“拿”到服务</p><p>器上的指定目录下，并启动服务器才行。这个“拿”的过程我们叫部署。</p><p>我们可以将未编译的 Web 工程比喻为一只生的鸡，编译好的 Web 工程是一只煮熟的鸡，编译部署</p><p>的过程就是将鸡炖熟。</p><p>Web 工程和其编译结果的目录结构对比见下图：</p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/maven/maven图片/maven01.png" style="zoom:150%;" /><p>③实际项目</p><p>在实际项目中整合第三方框架，Web 工程中除了 Java 程序和 JSP 页面、图片等静态资源之外，还</p><p>包括第三方框架的 jar 包以及各种各样的配置文件。所有这些资源都必须按照正确的目录结构部署到服</p><p>务器上，项目才可以运行。</p><p>所以综上所述：构建就是以我们编写的 Java 代码、框架配置文件、国际化等其他资源文件、JSP 页</p><p>面和图片等静态资源作为“原材料”，去“生产”出一个可以运行的项目的过程。</p><p>那么项目构建的全过程中都包含哪些环节呢？</p><h3 id="构建过程的几个主要环节"><a href="#构建过程的几个主要环节" class="headerlink" title="构建过程的几个主要环节"></a>构建过程的几个主要环节</h3><p>①<strong>清理</strong>：删除以前的编译结果，为重新编译做好准备。</p><p>②<strong>编译</strong>：将 Java 源程序编译为字节码文件。</p><p>③<strong>测试</strong>：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。</p><p>④<strong>报告</strong>：在每一次测试后以标准的格式记录和展示测试结果。</p><p>⑤<strong>打包</strong>：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java 工程对应 jar 包，Web</p><p>工程对应 war 包。</p><p>⑥<strong>安装</strong>：在 Maven 环境下特指将打包的结果——jar 包或 war 包安装到本地仓库中。</p><p>⑦<strong>部署</strong>：将打包的结果部署到远程仓库或将 war 包部署到服务器上运行。</p><h2 id="Maven-核心概念"><a href="#Maven-核心概念" class="headerlink" title="Maven 核心概念"></a>Maven 核心概念</h2><p>Maven 能够实现自动化构建是和它的内部原理分不开的，这里我们从 Maven 的九个核心概念入手，</p><p>看看 Maven 是如何实现自动化构建的</p><p>①POM</p><p>②约定的目录结构</p><p>③坐标</p><p>④依赖管理</p><p>⑤仓库管理</p><p>⑥生命周期</p><p>⑦插件和目标</p><p>⑧继承</p><p>⑨聚合</p><h2 id="第一个maven工程"><a href="#第一个maven工程" class="headerlink" title="第一个maven工程"></a>第一个maven工程</h2><h3 id="约定的目录结构"><a href="#约定的目录结构" class="headerlink" title="约定的目录结构"></a>约定的目录结构</h3><p>约定的目录结构对于 Maven 实现自动化构建而言是必不可少的一环，就拿自动编译来说，Maven 必须</p><p>能找到 Java 源文件，下一步才能编译，而编译之后也必须有一个准确的位置保持编译得到的字节码文件。</p><p>我们在开发中如果需要让第三方工具或框架知道我们自己创建的资源在哪，那么基本上就是两种方式：</p><p>①通过配置的形式明确告诉它</p><p>②基于第三方工具或框架的约定</p><p>Maven 对工程目录结构的要求就属于后面的一种。</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/maven/maven%E5%9B%BE%E7%89%87/maven02.png" alt=""></p><h3 id="常用maven命令"><a href="#常用maven命令" class="headerlink" title="常用maven命令"></a>常用maven命令</h3><ol><li>注意：执行与构建过程相关的Maven命令，必须进入pom.xml所在的目录。<ul><li>与构建过程相关：编译、测试、打包…</li></ul></li><li>常用命令<ol><li>mvn clean：清理</li><li>mvn compile：编译主程序</li><li>mvn test-compile：编译测试程序</li><li>mvn test：执行测试</li><li>mvn package：打包</li><li>mvn install:安装</li></ol></li></ol><h2 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h2><ol><li>含义：Project Object Model 项目对象模型</li><li>pom.xml对于Maven工程师核心配置文件，与构建过程相关的一切设置都在这个文件中进行配置</li></ol><h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><ol><li><p>数学中的坐标</p><ol><li>平面上，使用x、y两个向量可以唯一的定位平面中的任何一个点</li><li>在空间中使用x,y,z三个向量可以唯一定位空间中的任何一个点</li></ol></li><li><p>Maven的坐标</p><ul><li>使用下面三个向量在仓库中唯一定位一个Maven工程<ul><li>groupid：公司或组织域名倒序+项目名  <code>&lt;groupId&gt;com.dzu.maven&lt;/groupId&gt;</code></li><li>artifactid：模块名 <code>&lt;artifactId&gt;Hello&lt;/artifactId&gt;</code></li><li>version：版本 <code>&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</code></li></ul></li></ul></li><li><p>Maven工程的左边与仓库中路径的对应关系</p><p><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;</code></p><p><code>&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</code></p><p><code>&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</code></p><p>对应org/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar</p></li></ol><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><h3 id="仓库分类"><a href="#仓库分类" class="headerlink" title="仓库分类"></a>仓库分类</h3><ol><li><p>本地仓库</p><p>当前电脑上部署的仓库目录，为当前电脑上所有Maven工程服务</p></li><li><p>远程仓库</p><ol><li><p>私服：搭建在局域网环境中，为局域网范围内所有Maven工程服务</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/maven/maven%E5%9B%BE%E7%89%87/maven03.png" alt=""></p></li><li><p>中央仓库：假设在internet上，为全世界所有Maven工程服务</p></li><li><p>中央仓库镜像：为了分担中央仓库的流量，提升用户访问速度</p></li></ol></li></ol><h3 id="仓库中保存的内容"><a href="#仓库中保存的内容" class="headerlink" title="仓库中保存的内容"></a>仓库中保存的内容</h3><ol><li>maven自身所需要的插件</li><li>第三方框架或者工具的jar包</li><li>我们自己开发的Maven工程</li></ol><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ol><li><p>maven解析依赖信息时会到本地仓库查找本依赖的jar包</p><ul><li>对于我们自己开发的maven工程</li></ul></li><li><p>依赖的范围</p><ul><li>compile<ul><li>对主程序是否有效：有效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：参与</li></ul></li><li>test<ul><li>对主程序是否有效：无效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：不参与</li></ul></li><li>provided<ul><li>对主程序是否有效：有效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：不参与</li></ul></li></ul></li><li><p>依赖传递性</p><ol><li><p>A 依赖 B，B 依赖 C，A 能否使用 C 呢？那要看 B 依赖 C 的范围是不是 compile，如果是则可用，否则不</p><p>可用。</p></li></ol></li><li><p>依赖的排除</p><p>如果我们在当前工程中引入了一个依赖是 A，而 A 又依赖了 B，那么 Maven 会自动将 A 依赖的 B 引入当</p><p>前工程，但是个别情况下 B 有可能是一个不稳定版，或对当前工程有不良影响。这时我们可以在引入 A 的时</p><p>候将 B 排除。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HelloFriend<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span> </span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> </span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>同一版本号</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">atguigu.spring.version</span>&gt;</span>4.1.1.RELEASE<span class="tag">&lt;/<span class="name">atguigu.spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;atguigu.spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li><p>其他</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li>各个构建环节执行的顺序：不能打乱顺序，必须按照既定的正确顺序来执行。</li><li>maven的核心程序中定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的。</li><li>maven核心程序为了更好地实现自动化构建，按照这一特点执行生命周期中的各个阶段，不论现在要执行生命周期中的哪一个极端，都是从这个生命周期最初的位置开始执行。</li><li>插件和目标<ol><li>声明周期的各个阶段仅仅定义了要执行的任务是什么</li><li>各个阶段和插件的目标是对应的</li><li>相似的目标有特定的插件来完成</li></ol></li></ol><h2 id="eclipse这种使用maven"><a href="#eclipse这种使用maven" class="headerlink" title="eclipse这种使用maven"></a>eclipse这种使用maven</h2><ol><li><p>maven插件：eclipse内置</p></li><li><p>插件设置</p><ol><li><p>installations：指定maven核心程序的位置，不建议使用自带的。而使用我们自己解压的</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/maven/maven%E5%9B%BE%E7%89%87/maven04.png" alt=""></p></li><li><p>user setings：指定conf/settings.xml的位置，进而获取本地仓库的位置</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/maven/maven%E5%9B%BE%E7%89%87/maven05.png" alt=""></p></li></ol></li><li><p>基本操作</p><ol><li><p>创建maven版的java工程</p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/maven/maven图片/创建maven版java项目01.png" style="zoom: 80%;" /><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/maven/maven图片/创建maven版java项目02.png" style="zoom: 80%;" /><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/maven/maven%E5%9B%BE%E7%89%87/%E5%88%9B%E5%BB%BAmaven%E7%89%88java%E9%A1%B9%E7%9B%AE03.png" alt=""></p><p><strong>注意</strong>这里的jdk默认1.5,我们需要手动改成需要的版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">设置通过Maven创建的工程的JDK版本——一劳永逸</span><br><span class="line">[1]打开settings.xml文件</span><br><span class="line">[2]找到profiles标签</span><br><span class="line">[3]加入如下配置</span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.7<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p>创建maven版web工程</p><p>创建工程时将jar改成war，之后得到<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/maven/maven%E5%9B%BE%E7%89%87/web01.png" alt=""></p><p>但是这样还缺少很多东西。</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/maven/maven%E5%9B%BE%E7%89%87/web02.png" alt=""></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/maven/maven%E5%9B%BE%E7%89%87/web03.png" alt=""></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/maven/maven%E5%9B%BE%E7%89%87/web04.png" alt=""></p><p>之后创建jsp后会出错<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/maven/maven%E5%9B%BE%E7%89%87/jsp%E5%87%BA%E9%94%99.png" alt=""></p></li></ol><ol start="3"><li><p>执行maven命令</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/maven/maven%E5%9B%BE%E7%89%87/%E6%89%A7%E8%A1%8Cmaven%E5%91%BD%E4%BB%A4.png" alt=""></p></li></ol><h2 id="在子工程中引用父工程"><a href="#在子工程中引用父工程" class="headerlink" title="在子工程中引用父工程"></a>在子工程中引用父工程</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定从当前子工程的pom.xml文件出发，查找父工程的pom.xml的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../Parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时如果子工程的 groupId 和 version 如果和父工程重复则可以删除。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Maven&quot;&gt;&lt;a href=&quot;#Maven&quot; class=&quot;headerlink&quot; title=&quot;Maven&quot;&gt;&lt;/a&gt;Maven&lt;/h1&gt;&lt;h2 id=&quot;导言&quot;&gt;&lt;a href=&quot;#导言&quot; class=&quot;headerlink&quot; title=&quot;导言&quot;&gt;&lt;/a&gt;导言&lt;/h2&gt;&lt;p&gt;生产环境下开发不再是一个项目一个工程，而是每一个模块创建一个工程，而多个模块整合在一起就需要使用到像 Maven 这样的构建工具。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/java/"/>
    
      <category term="构建工具" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/09/03/HTML/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/09/03/HTML/</id>
    <published>2020-09-03T00:45:32.000Z</published>
    <updated>2020-09-07T01:35:22.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文参考黑马视频笔记，记录HTML基本用法。</p><a id="more"></a><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h1 id="web标准构成"><a href="#web标准构成" class="headerlink" title="web标准构成"></a>web标准构成</h1><p><strong>构成：</strong>主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p><table><thead><tr><th align="left">标准</th><th align="left">说明</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">结构</td><td align="left">结构用于对<strong>网页元素</strong>进行整理和分类，咱们主要学的是HTML。</td><td align="left"></td></tr><tr><td align="left">表现</td><td align="left">表现用于设置网页元素的版式、颜色、大小等<strong>外观样式</strong>，主要指的是CSS</td><td align="left"></td></tr><tr><td align="left">行为</td><td align="left">行为是指网页模型的定义及<strong>交互</strong>的编写，咱们主要学的是 Javascript</td><td align="left"></td></tr></tbody></table><h3 id="web标准小结"><a href="#web标准小结" class="headerlink" title="web标准小结"></a>web标准小结</h3><ul><li>web标准有三层结构，分别是结构（html）、表现（css）和行为（javascript）  </li><li>结构类似人的身体， 表现类似人的着装， 行为类似人的行为动作</li><li>理想状态下，他们三层都是独立的， 放到不同的文件里面</li></ul><h1 id="HTML-常用标签"><a href="#HTML-常用标签" class="headerlink" title="HTML 常用标签"></a>HTML 常用标签</h1><h2 id="1-排班标签"><a href="#1-排班标签" class="headerlink" title="1. 排班标签"></a>1. 排班标签</h2><p>排版标签主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p><h3 id="1-1标题标签h-熟记"><a href="#1-1标题标签h-熟记" class="headerlink" title="1.1标题标签h (熟记)"></a>1.1标题标签h (熟记)</h3><p>单词缩写：  head   头部. 标题       title  文档标题</p><p>单词缩写：  head   头部. 标题       title  文档标题</p><p>为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题，即</p><p><strong>标题标签语义：</strong>  作为标题使用，并且依据重要性递减</p><p>其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>小结 :</strong></p><ul><li>加了标题的文字会变的加粗，字号也会依次变大</li><li>一行是只能放一个标题的</li></ul><h3 id="1-2段落标签p-熟记"><a href="#1-2段落标签p-熟记" class="headerlink" title="1.2段落标签p ( 熟记)"></a>1.2段落标签p ( 熟记)</h3><p>单词缩写：  paragraph  段落  [ˈpærəgræf]    无须记这个单词</p><p><strong>作用语义：</strong></p><p>可以把 HTML 文档分割为若干段落</p><p> 在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>  文本内容  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。</p><h3 id="1-3水平线标签hr-认识"><a href="#1-3水平线标签hr-认识" class="headerlink" title="1.3水平线标签hr(认识)"></a>1.3水平线标签hr(认识)</h3><p>在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，<hr />就是创建横跨网页水平线的标签。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span>是单标签</span><br></pre></td></tr></table></figure><p> 在网页中显示默认样式的水平线。</p><h3 id="1-4换行标签br-熟记"><a href="#1-4换行标签br-熟记" class="headerlink" title="1.4换行标签br (熟记)"></a>1.4换行标签br (熟记)</h3><p>在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这时如果还像在word中直接敲回车键换行就不起作用了。</p><h3 id="1-5div-和-span标签-重点"><a href="#1-5div-和-span标签-重点" class="headerlink" title="1.5div 和  span标签(重点)"></a>1.5div 和  span标签(重点)</h3><p>div   span    是没有语义的     是我们网页布局主要的2个盒子   想必你听过  css+div</p><p>div 就是  division  的缩写   分割， 分区的意思  其实有很多div 来组合网页</p><p>语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 这是头部 <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">span</span>&gt;</span>今日价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>他们两个都是盒子，用来装我们网页元素的， 只不过他们有区别，现在我们主要记住使用方法和特点就好了</p><ul><li>div标签  用来布局的，但是现在一行只能放一个div</li><li>span标签  用来布局的，一行上可以放好多个span</li></ul><h3 id="排版标签总结"><a href="#排版标签总结" class="headerlink" title="排版标签总结"></a>排版标签总结</h3><table><thead><tr><th><code>标签名</code></th><th align="left"><code>定义</code></th><th align="left"><code>说明</code></th></tr></thead><tbody><tr><td><code>&lt;hx&gt;&lt;/hx&gt;</code></td><td align="left">标题标签</td><td align="left">作为标题使用，并且依据重要性递减</td></tr><tr><td><code>&lt;p&gt;&lt;/p&gt;</code></td><td align="left">段落标签</td><td align="left">可以把 HTML 文档分割为若干段落</td></tr><tr><td><code>&lt;hr /&gt;</code></td><td align="left">水平线标签</td><td align="left">没啥可说的，就是一条线</td></tr><tr><td><code>&lt;br /&gt;</code></td><td align="left">换行标签</td><td align="left"></td></tr><tr><td><code>&lt;div&gt;&lt;/div&gt;</code></td><td align="left">div标签</td><td align="left">用来布局的，但是现在一行只能放一个div</td></tr><tr><td><code>&lt;span&gt;&lt;/span&gt;</code></td><td align="left">span标签</td><td align="left">用来布局的，一行上可以放好多个span</td></tr></tbody></table><h2 id="2-文本格式化标签-熟记"><a href="#2-文本格式化标签-熟记" class="headerlink" title="2. 文本格式化标签(熟记)"></a>2. 文本格式化标签(熟记)</h2><p>在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p><table><thead><tr><th>标签</th><th>显示效果</th></tr></thead><tbody><tr><td><code>&lt;b&gt;&lt;/b&gt;&lt;strong&gt;&lt;/strong&gt;</code></td><td>文字以粗体方式显示</td></tr><tr><td><code>&lt;li&gt;&lt;/li&gt;&lt;em&gt;&lt;/em&gt;</code></td><td>文字以斜体方式显示</td></tr><tr><td><code>&lt;s&gt;&lt;/s&gt;&lt;del&gt;&lt;/del&gt;</code></td><td>文字以加删除线方式显示</td></tr><tr><td><code>&lt;u&gt;&lt;/u&gt;&lt;ins&gt;&lt;/ins&gt;</code></td><td>文字以加下划线方式显示</td></tr></tbody></table><h2 id="3-标签属性"><a href="#3-标签属性" class="headerlink" title="3. 标签属性"></a>3. 标签属性</h2><p>所谓属性就是<strong>外在特性</strong>  比如 手机的颜色 手机的尺寸 ，总结就是手机的。。</p><ul><li>手机的颜色是黑色   </li><li>手机的尺寸是 8寸 </li><li>水平线的长度是 200  </li><li>图片的宽度 是  300    </li></ul><p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> 属性<span class="attr">1</span>=<span class="string">"属性值1"</span> 属性<span class="attr">2</span>=<span class="string">"属性值2"</span> …&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">手机</span> 颜色=<span class="string">"红色"</span> 大小=<span class="string">"5寸"</span>&gt;</span>  <span class="tag">&lt;/<span class="name">手机</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-图像标签img（重点）"><a href="#4-图像标签img（重点）" class="headerlink" title="4. 图像标签img（重点）"></a>4. 图像标签img（重点）</h2><p>要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签<img />以及和他相关的属性。（它是一个单身狗）</p><p>语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图像URL"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>该语法中<strong>src</strong>属性用于指定图像文件的路径和文件名，他是img标签的<strong>必需属性</strong>。</p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>src</td><td>URL</td><td>图像的路径</td></tr><tr><td>alt</td><td>文本</td><td>图像不能显示时的替换文本</td></tr><tr><td>title</td><td>文本</td><td>鼠标悬停时显示的内容</td></tr><tr><td>width</td><td>像素</td><td>设置图像的宽度</td></tr><tr><td>height</td><td>像素</td><td>设置图像高度</td></tr><tr><td>border</td><td>数字</td><td>设置图像边框的宽度</td></tr></tbody></table><p><strong>注意</strong></p><ol><li>标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</li><li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li><li>采取  键值对 的格式   key=”value”  的格式 </li></ol><p>比如:  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">正常的<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"cz.jpg"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    带有边框的<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"cz.jpg"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">border</span>=<span class="string">"3"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">有提示文本的<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"cz.jpg"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">border</span>=<span class="string">"3"</span> <span class="attr">title</span>=<span class="string">"这是个小蒲公英"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">有替换文本的<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"cz.jpg"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">border</span>=<span class="string">"3"</span> <span class="attr">alt</span>=<span class="string">"图片不存在"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-链接标签"><a href="#5-链接标签" class="headerlink" title="5. 链接标签"></a>5. 链接标签</h2><p>语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"跳转目标"</span> <span class="attr">target</span>=<span class="string">"目标窗口的弹出方式"</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>href</td><td align="left">用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能</td></tr><tr><td>target</td><td align="left">用于指定链接页面的打开方式，其取值有_self和_blank两种，其中<strong>_self为默认值，__blank为在新窗口中打开方式</strong>。</td></tr></tbody></table><p><strong>注意：</strong></p><ol><li>外部链接 需要添加 http:// <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li><li>内部链接 直接链接内部页面名称即可 比如 <code>&lt; a href=&quot;index.html&quot;&gt; 首页 &lt;/a &gt;</code></li><li>如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</li><li>不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</li></ol><h2 id="6-注释标签"><a href="#6-注释标签" class="headerlink" title="6. 注释标签"></a>6. 注释标签</h2><p>语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释语句 --&gt;</span>     快捷键是：    ctrl + /       或者 ctrl +shift + /</span><br></pre></td></tr></table></figure><h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><p><strong>根目录：</strong>项目文件夹的第一级就是根目录。</p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a><strong>相对路径</strong></h2><p>以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，所使用的路径将不相同，故称之为相对路径。</p><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的。</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.itcast.cn/images/logo.gif”。" target="_blank" rel="noopener">http://www.itcast.cn/images/logo.gif”。</a></p><p><strong>注意：</strong></p><p>绝对路径用的较少，我们理解下就可以了。  但是要注意，它的写法 特别是符号  \  并不是 相对路径的   /    </p><h1 id="锚点定位"><a href="#锚点定位" class="headerlink" title="锚点定位"></a>锚点定位</h1><p>通过创建锚点链接，用户能够快速定位到目标内容。</p><p>创建锚点链接分为两步：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 使用相应的id名标注跳转目标的位置。 (找目标)</span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span>第2集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">2. 使用<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#id名"</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span>创建链接文本（被点击的） （拉关系）  我也有一个姓毕的姥爷..</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#two"</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="base-标签"><a href="#base-标签" class="headerlink" title="base 标签"></a>base 标签</h1><p><strong>语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">"_blank"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>*<em>总结： *</em></p><ol><li>base 可以设置整体链接的打开状态   </li><li>base 写到  <code>&lt;head&gt;  &lt;/head&gt;</code>  之间</li><li>把所有的连接 都默认添加 target=”_blank”</li></ol><h1 id="特殊字符-（理解）"><a href="#特殊字符-（理解）" class="headerlink" title="特殊字符 （理解）"></a>特殊字符 （理解）</h1><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/html/zifu.png" alt=""></p><p><strong>总结：</strong></p><ol><li>是以<strong>运算符</strong><code>&amp;</code>开头,以<strong>分号运算符</strong><code>;</code>结尾。</li><li>他们不是标签，而是符号。</li><li>HTML 中不能使用小于号 “&lt;” 和大于号 “&gt;”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML 源代码中使用字符实体</li></ol><h1 id="表格-table-会使用"><a href="#表格-table-会使用" class="headerlink" title="表格 table(会使用)"></a>表格 table(会使用)</h1><p><strong>表格作用：</strong></p><p>存在即是合理的。  表格的现在还是较为常用的一种标签，但不是用来布局，<strong>常见显示、展示表格式数据。</strong></p><p>因为它可以让数据显示的非常的规整，可读性非常好。</p><p><strong>特别是后台展示数据的时候表格运用是否熟练就显得很重要</strong>，一个清爽简约的表格能够把繁杂的数据表现得很有条理，虽然 div 布局也可以做到，但是总没有表格来得方便。</p><h2 id="1-创建表格"><a href="#1-创建表格" class="headerlink" title="1. 创建表格"></a>1. 创建表格</h2><p>在HTML网页中，要想创建表格，就需要使用表格相关的标签。</p><p><strong>创建表格的基本语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ol><li>table用于定义一个表格标签。</li><li>tr标签 用于定义表格中的行，必须嵌套在 table标签中。</li><li>td 用于定义表格中的单元格，必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中。</li><li>字母 td 指表格数据（table data），即数据单元格的内容，现在我们明白，表格最合适的地方就是用来存储数据的。</li></ol><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/html/table%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.jpg" alt=""></p><h2 id="2-表格属性"><a href="#2-表格属性" class="headerlink" title="2. 表格属性"></a>2. 表格属性</h2><p>表格有部分属性我们不常用，这里重点记住 cellspacing 、 cellpadding。</p><table><thead><tr><th>属性名</th><th>含义</th><th>常用属性值</th></tr></thead><tbody><tr><td>border</td><td>设置表格的边框（默认border=”0”无边框）</td><td>像素值</td></tr><tr><td>cellspacing</td><td>设置单元格与单元格边框之间的空白间距</td><td>像素值（默认2px）</td></tr><tr><td>cellpadding</td><td>设置单元格内容与单元格边框之间的空白间距</td><td>像素值（默认1px）</td></tr><tr><td>width</td><td>设置表格的宽度</td><td>像素值</td></tr><tr><td>height</td><td>设置表格的高度</td><td>像素值</td></tr><tr><td>algin</td><td>设置表格在网页中的水平对齐方式</td><td>left,center,right</td></tr></tbody></table><p>我们经常有个说法，是三参为0，  平时开发的我们这三个参数    border  cellpadding  cellspacing  为  0</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/html/table%E8%A1%A8%E6%A0%BC%E5%B1%9E%E6%80%A7.png" alt=""></p><h2 id="3-表头单元格标签th"><a href="#3-表头单元格标签th" class="headerlink" title="3. 表头单元格标签th"></a>3. 表头单元格标签th</h2><p><strong>作用：</strong>表头单元格位于表格的第一行或第一列，并且文本加粗居中</p><p><strong>语法：</strong>只需要使用<code>&lt;th&gt;&lt;/th&gt;</code>替代响应的单元格标签<code>&lt;td&gt;&lt;/td&gt;</code></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/html/th.png" alt=""></p><p><em>th 也是一个单元格   只不过和普通的 td单元格不一样，它会让自己里面的文字居中且加粗</em></p><h2 id="4-表格标题caption"><a href="#4-表格标题caption" class="headerlink" title="4. 表格标题caption"></a>4. 表格标题caption</h2><p><strong>定义和用法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>*<em>注意： *</em></p><ol><li>caption 元素定义<strong>表格标题</strong>，通常这个标题会被居中且显示于表格之上。</li><li>caption 标签必须紧随 table 标签之后。</li><li>这个标签只存在 表格里面才有意义。你是风儿我是沙</li></ol><h2 id="5-合并单元格"><a href="#5-合并单元格" class="headerlink" title="5. 合并单元格"></a>5. 合并单元格</h2><h3 id="5-1-合并单元格两种方式"><a href="#5-1-合并单元格两种方式" class="headerlink" title="5.1 合并单元格两种方式"></a>5.1 合并单元格两种方式</h3><ul><li><strong>跨行合并</strong>：rowspan=”合并单元格的个数”</li><li><strong>跨列合并</strong>：colspan=”合并单元格的个数”</li></ul><h3 id="5-2-合并单元格顺序"><a href="#5-2-合并单元格顺序" class="headerlink" title="5.2 合并单元格顺序"></a>5.2 合并单元格顺序</h3><p>先上后下、先左后右</p><h3 id="5-3-合并单元格三步曲"><a href="#5-3-合并单元格三步曲" class="headerlink" title="5.3 合并单元格三步曲"></a>5.3 合并单元格三步曲</h3><ol><li>先确定是跨行还是跨列合并</li><li>根据先上后下、先左后右的原则找到目标单元格，然后写上合并方式以及要合并单元格的数量。比如<code>&lt;td colspan=&quot;3&quot;&gt;   &lt;/td&gt;</code></li><li>删除多余的单元格</li></ol><h2 id="6-表格总结"><a href="#6-表格总结" class="headerlink" title="6. 表格总结"></a>6. 表格总结</h2><table><thead><tr><th>标签名</th><th align="left">定义</th><th align="left">说明</th></tr></thead><tbody><tr><td><code>&lt;table&gt;&lt;/table&gt;</code></td><td align="left">表格标签</td><td align="left">就是一个四方的盒子</td></tr><tr><td><code>&lt;tr&gt;&lt;/tr&gt;</code></td><td align="left">表格行标签</td><td align="left">行标签要再table标签内部才有意义</td></tr><tr><td><code>&lt;td&gt;&lt;/td&gt;</code></td><td align="left">单元格标签</td><td align="left">单元格标签是个容器级元素，可以放任何东西</td></tr><tr><td><code>&lt;th&gt;&lt;/th&gt;</code></td><td align="left">表头单元格标签</td><td align="left">它还是一个单元格，但是里面的文字会居中且加粗</td></tr><tr><td><code>&lt;caption&gt;&lt;/caption&gt;</code></td><td align="left">表格标题标签</td><td align="left">表格的标题，跟着表格一起走，和表格居中对齐</td></tr><tr><td>clospan 和 rowspan</td><td align="left">合并属性</td><td align="left">用来合并单元格的</td></tr></tbody></table><ol><li>表格提供了HTML 中定义表格式数据的方法。</li><li>表格中由行中的单元格组成。</li><li>表格中没有列元素，列的个数取决于行的单元格个数。</li><li>表格不要纠结于外观，那是CSS 的作用。</li><li>表格的学习要求：  能手写表格结构，并且能简单合并单元格。</li></ol><h2 id="7-表格拓展"><a href="#7-表格拓展" class="headerlink" title="7. 表格拓展"></a>7. 表格拓展</h2><p><strong>表格划分结构</strong></p><p>对于比较复杂的表格，表格的结构也就相对的复杂了，所以又将表格分割成三个部分：题头、正文和脚注。而这三部分分别用:thead,tbody,tfoot来标注， 这样更好的分清表格结构</p><p><strong>注意：</strong></p><ol><li><code>&lt;thead&gt;&lt;/thead&gt;</code>：用于定义表格的头部。用来放标题之类的东西。<thead> 内部必须拥有 <tr> 标签！</li><li><code>&lt;tbody&gt;&lt;/tbody&gt;</code>：用于定义表格的主体。放数据本体 。</li><li><code>&lt;tfoot&gt;&lt;/tfoot&gt;</code>放表格的脚注之类。</li><li>以上标签都是放到table标签中。</li></ol><h1 id="列表标签（重点）"><a href="#列表标签（重点）" class="headerlink" title="列表标签（重点）"></a>列表标签（重点）</h1><h2 id="1-无序列表ul（重点）"><a href="#1-无序列表ul（重点）" class="headerlink" title="1. 无序列表ul（重点）"></a>1. 无序列表ul（重点）</h2><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li><code>&lt;ul&gt;&lt;/ul&gt;</code>中只能嵌套<code>&lt;li&gt;&lt;/li&gt;</code>，直接在<code>&lt;ul&gt;&lt;/ul&gt;</code>标签中输入其他标签或者文字的做法是不被允许的</li><li><code>&lt;li&gt;&lt;/li&gt;</code>之间相当于一个容器，可以容纳所有元素。</li><li>无序列表会带有自己样式属性。</li></ol><h2 id="2-有序列表ol（了解）"><a href="#2-有序列表ol（了解）" class="headerlink" title="2. 有序列表ol（了解）"></a>2. 有序列表ol（了解）</h2><p>有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  所有特性基本与ul 一致。  但是实际中比 无序列表 用的少很多。</p><h2 id="3-自定义列表（理解）"><a href="#3-自定义列表（理解）" class="headerlink" title="3. 自定义列表（理解）"></a>3. 自定义列表（理解）</h2><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-列表总结"><a href="#4-列表总结" class="headerlink" title="4. 列表总结"></a>4. 列表总结</h2><table><thead><tr><th>标签名</th><th align="center">定义</th><th align="left">说明</th></tr></thead><tbody><tr><td><code>&lt;ul&gt;&lt;/ul&gt;</code></td><td align="center"><strong>无序标签</strong></td><td align="left">里面只能包含li    没有顺序，我们以后布局中最常用的列表</td></tr><tr><td><code>&lt;ol&gt;&lt;/ol&gt;</code></td><td align="center">有序标签</td><td align="left">里面只能包含li    有顺序， 使用情况较少</td></tr><tr><td><code>&lt;dl&gt;&lt;/dl&gt;</code></td><td align="center">自定义列表</td><td align="left">里面有2个兄弟， dt 和 dd</td></tr></tbody></table><h1 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h1><p><strong>作用：</strong>表单目的是为了收集用户信息。在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。</p><p>*<em>表单控件： *</em></p><p>​       包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p><p>  <strong>提示信息：</strong></p><p>​        一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p><p>  <strong>表单域：</strong>  </p><p>​      他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p><h2 id="1-input控件（重点）"><a href="#1-input控件（重点）" class="headerlink" title="1. input控件（重点）"></a>1. input控件（重点）</h2><ul><li>语法<ul><li><code>&lt;input type=&quot;属性值&quot; value=&quot;你好&quot;&gt;</code></li><li>input 输入的意思</li><li>&lt;input /&gt;标签为单标签</li><li>type属性设置不同的属性值用来指定不同的控件类型</li><li>除了type属性还有别的属性</li></ul></li></ul><p><strong>常用属性</strong></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/html/input.png" alt=""></p><p><strong>1.type</strong></p><ul><li>这个属性通过改变值，可以决定了你属于那种input表单</li><li>比如 type = ‘text’  就表示 文本框 可以做 用户名， 昵称等。</li><li>比如 type = ‘password’  就是表示密码框   用户输入的内容 是不可见的。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span> </span><br><span class="line">密  码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.value属性值</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>value 默认的文本值。 有些表单想刚打开页面就默认显示几个文字，就可以通过这个value 来设置。</p><p><strong>3.name属性</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">name</span>=<span class="string">“username”</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>name表单的名字， 这样，后台可以通过这个name属性找到这个表单。  页面中的表单很多，name主要作用就是用于区别不同的表单。</p><ul><li><p>name属性后面的值，是我们自己定义的。</p></li><li><p>radio  如果是一组，我们必须给他们命名相同的名字 name   这样就可以多个选其中的一个啦</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span>  /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span>女</span><br></pre></td></tr></table></figure></li><li><p>name属性，我们现在用的较少， 但是，当我们学ajax 和后台的时候，是必须的。</p></li></ul><p><strong>4.checked属性</strong></p><ul><li>表示默认选中状态。较常见于单选与复选按钮</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">性    别:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span> /&gt;</span>女</span><br></pre></td></tr></table></figure><p>上面这个，表示就默认选中了 男 这个单选按钮</p><p><strong>5.总结</strong></p><table><thead><tr><th>属性</th><th align="left">说明</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td align="left">表单类型</td><td>用来指定不同的控件类型</td></tr><tr><td>value</td><td align="left">表单值</td><td>表单里面默认显示的文本</td></tr><tr><td>name</td><td align="left">表单名字</td><td>页面中的表单很多，name主要作用就是用于区别不同的表单。</td></tr><tr><td>checked</td><td align="left">默认选中</td><td>表示那个单选或者复选按钮一开始就被选中了</td></tr></tbody></table><h2 id="2-label标签（理解）"><a href="#2-label标签（理解）" class="headerlink" title="2. label标签（理解）"></a>2. label标签（理解）</h2><p>label 标签为 input 元素定义标注（标签）。</p><p><strong>作用：</strong> </p><p> 用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点。</p><p><strong>如何绑定元素呢？</strong></p><ol><li>第一种用法就是用label直接包括input表单。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span> 用户名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"usename"</span> <span class="attr">value</span>=<span class="string">"请输入用户名"</span>&gt;</span>   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   适合单个表单选择</p><ol start="2"><li>第二种用法 for 属性规定 label 与哪个表单元素绑定。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span>  <span class="attr">id</span>=<span class="string">"sex"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-textarea控件（文本域）"><a href="#3-textarea控件（文本域）" class="headerlink" title="3.textarea控件（文本域）"></a>3.textarea控件（文本域）</h2><p><strong>语法：</strong><code>&lt;textarea&gt;&lt;/textarea&gt;</code></p><p><strong>作用：</strong></p><ol><li>通过textarea控件可以轻松地创建多行文本输入框.</li><li>cols=”每行中的字符数” rows=”显示的行数”  我们实际开发不用</li></ol><p><strong>文本框和文本域区别</strong></p><table><thead><tr><th align="left">表单</th><th align="center">名称</th><th align="center">区别</th><th align="right">默认值显示</th><th align="right">用于场景</th></tr></thead><tbody><tr><td align="left">input type=”text”</td><td align="center">文本框</td><td align="center">只能显示一行文本</td><td align="right">单标签，通过value显示默认值</td><td align="right">用户名、昵称、密码等</td></tr><tr><td align="left">textarea</td><td align="center">文本域</td><td align="center">可以显示多行文本</td><td align="right">双标签，默认值写到标签中间</td><td align="right">留言板</td></tr></tbody></table><h2 id="4-select下拉列表"><a href="#4-select下拉列表" class="headerlink" title="4. select下拉列表"></a>4. select下拉列表</h2><p><strong>语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>&lt;select&gt;  中至少包含一对 option </li><li>在option 中定义selected =” selected “时，当前项即为默认选中项。</li><li>但是我们实际开发会用的比较少</li></ol><h2 id="5-form表单域"><a href="#5-form表单域" class="headerlink" title="5. form表单域"></a>5. form表单域</h2><p>在HTML中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。</p><p><strong>语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"url地址"</span> <span class="attr">method</span>=<span class="string">"提交方式"</span> <span class="attr">name</span>=<span class="string">"表单名称"</span>&gt;</span></span><br><span class="line">  各种表单控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>常用属性：</strong></p><table><thead><tr><th>属性</th><th align="left">属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td align="left">url地址</td><td>用于指定接收并处理表单数据的服务器程序的url地址。</td></tr><tr><td>method</td><td align="left">get/post</td><td>用于设置表单数据的提交方式，其取值为get或post。</td></tr><tr><td>name</td><td align="left">名称</td><td>用于指定表单的名称，以区分同一个页面中的多个表单。</td></tr></tbody></table><p><strong>注意:</strong>  </p><p>每个表单都应该有自己表单域。我们现在做页面，不写看不到效果，但是 如果后面学 ajax 后台交互的时候，必须需要 form表单域。</p><h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="新增主体结构元素"><a href="#新增主体结构元素" class="headerlink" title="新增主体结构元素"></a>新增主体结构元素</h2><table><thead><tr><th><strong>名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>article元素</td><td>代表文档，页面或应用程序中独立的;完整的；可以独自被外部引用的内容。</td></tr><tr><td>section元素</td><td>用来对网站或应用程序中页面上的内容进行分块，一个section元素通常有内容及其标题组成。</td></tr><tr><td>nav元素</td><td>一个可以用来作为页面导航的链接组，其中的导航元素链接到其他页面或当前页面的其他部分。</td></tr><tr><td>aside元素</td><td>用来表示当前页面或文章的附属信息部分，它可以包含于当前页面或主要内容相关的引用。侧边栏，广告，导航条，以及其他类似的有别于主要内容的部分。</td></tr><tr><td>time元素</td><td>用来无歧义地，明确地对机器编码日期和时间，并且以让人易读的方式来展现。</td></tr><tr><td>pubdate属性</td><td>一个可选的boolean值得属性，他可以被应用到article元素中的time元素上，意思是time元素代表了文章（article元素的内容）或整个网页的发布日期。</td></tr></tbody></table><h2 id="新增非主体结构元素"><a href="#新增非主体结构元素" class="headerlink" title="新增非主体结构元素"></a>新增非主体结构元素</h2><table><thead><tr><th><strong>名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>header元素</td><td>一种具有引导和导航作用的结构元素，通常用来放置整个页面或页面内的一个内容区块的标题，但也可以包含其他内容，例如数据表格，搜索表单或相关的LOGO图片。</td></tr><tr><td>footer元素</td><td>可以作为其上层父级内容区块或一个根区块的脚注。</td></tr><tr><td>address元素</td><td>用来在文档中呈现联系信息，包括文档作者或文档维护者的名字，文档作者或文档维护者的网站链接，电子邮箱，真是地址，电话号码等。</td></tr><tr><td>main元素</td><td>表示网页中的主要内容。每个·网页内部只能放置一个main元素。</td></tr></tbody></table><p><strong>新的结构元素带来的是网页布局的改变以及提升对搜索引擎的友好</strong></p><h2 id="新增功能元素-多媒体交互标签"><a href="#新增功能元素-多媒体交互标签" class="headerlink" title="新增功能元素-多媒体交互标签"></a>新增功能元素-多媒体交互标签</h2><table><thead><tr><th><strong>名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>video元素</td><td>标记定义一个视频</td></tr><tr><td>audio元素</td><td>标记定义音频内容</td></tr><tr><td>source元素</td><td>标记定义媒体资源</td></tr><tr><td>canvas元素</td><td>标记定义图片。</td></tr><tr><td>embed元素</td><td>标记定义外部的可交互的内容或插件 比如flash</td></tr></tbody></table><h2 id="新增功能元素-Web应用标签"><a href="#新增功能元素-Web应用标签" class="headerlink" title="新增功能元素-Web应用标签"></a>新增功能元素-Web应用标签</h2><table><thead><tr><th><strong>名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>menu元素</td><td>命令列表</td></tr><tr><td>menuitem元素</td><td>menu命令列表标签 FF（嵌入系统）</td></tr><tr><td>command元素</td><td>menu标记定义一个命令按钮</td></tr><tr><td>meter元素</td><td>状态标签(实时状态显示:气压、气温)</td></tr><tr><td>progress元素</td><td>状态标签 (任务过程:安装、加载)</td></tr><tr><td>datalist</td><td>为input标记定义一个下拉列表,配合</td></tr><tr><td>details</td><td>标记定义一个元素的详细内容 ，配合dt、dd</td></tr></tbody></table><h2 id="新增功能元素-注释标签"><a href="#新增功能元素-注释标签" class="headerlink" title="新增功能元素-注释标签"></a>新增功能元素-注释标签</h2><table><thead><tr><th><strong>名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>ruby元素</td><td>标记定义 注释或音标</td></tr><tr><td>rp元素</td><td>告诉那些不支持 Ruby元素的浏览器如何去显示</td></tr><tr><td>rt元素</td><td>标记定义对ruby的注释内容文本</td></tr></tbody></table><h2 id="新增功能元素-其他标签"><a href="#新增功能元素-其他标签" class="headerlink" title="新增功能元素-其他标签"></a>新增功能元素-其他标签</h2><table><thead><tr><th><strong>名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>keygen元素</td><td>标记定义表单里一个生成的键值(加密信息传送)O、F</td></tr><tr><td>mark元素</td><td>标记定义有标记的文本 (黄色选中状态)</td></tr><tr><td>output元素</td><td>标记定义一些输出类型,计算表单结果配合oninput事件</td></tr></tbody></table><h1 id="HTML5智能表单"><a href="#HTML5智能表单" class="headerlink" title="HTML5智能表单"></a>HTML5智能表单</h1><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/html/%E8%A1%A8%E5%8D%9501.png" alt=""></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/html/%E8%A1%A8%E5%8D%9502.png" alt=""></p><h2 id="新增的input表单元素"><a href="#新增的input表单元素" class="headerlink" title="新增的input表单元素"></a><strong>新增的input表单元素</strong></h2><table><thead><tr><th><strong>元素名</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>email</td><td>限制用户输入必须为Email类型</td></tr><tr><td>url</td><td>限制用户输入必须为URL类型</td></tr><tr><td>date</td><td>限制用户输入必须为日期类型</td></tr><tr><td>time</td><td>限制用户输入必须为时间类型</td></tr><tr><td>month</td><td>限制用户输入必须为月类型</td></tr><tr><td>week</td><td>限制用户输入必须为周类型</td></tr><tr><td>number</td><td>限制用户输入必须为数字类型</td></tr><tr><td>range</td><td>产生一个滑动条的表单</td></tr><tr><td>search</td><td>产生一个搜索意义的表单 配合results=”n”属性</td></tr><tr><td>color</td><td>生成一个颜色选择表单</td></tr></tbody></table><h2 id="新增的表单属性"><a href="#新增的表单属性" class="headerlink" title="新增的表单属性"></a><strong>新增的表单属性</strong></h2><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Required</td><td>required</td><td>表单拥有该属性表示其内容不能为空，必填</td></tr><tr><td>placeholder</td><td>提示文本</td><td>表单的提示信息，存在默认值将不显示</td></tr><tr><td>Autofocus</td><td>autofocus</td><td>自动聚焦属性，页面加载完成自动聚焦到指定表单</td></tr><tr><td>Pattern</td><td>正则表达式</td><td>输入的内容必须匹配到指定正则</td></tr></tbody></table><h2 id="表单高级应用"><a href="#表单高级应用" class="headerlink" title="表单高级应用"></a>表单高级应用</h2><ul><li><p><strong>隐藏域：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"666"</span> <span class="attr">name</span>=<span class="string">"userid"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>只读文本框：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"张三"</span>  <span class="attr">readonly</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>禁用：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit "</span>  <span class="attr">disabled</span>   <span class="attr">value</span>=<span class="string">"保存"</span> &gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>标注：</strong></p><ul><li>增强鼠标的可用性</li><li>自动将焦点转移到与该标注相关的表单元素上</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id"</span>&gt;</span>标注的文本<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"male"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文参考黑马视频笔记，记录HTML基本用法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>java数据结构</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/06/29/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/06/29/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2020-06-29T08:57:38.000Z</published>
    <updated>2020-08-05T03:15:55.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java数据结构"><a href="#java数据结构" class="headerlink" title="java数据结构"></a>java数据结构</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这里介绍了基本数据结构，内容易懂，有代码实现，有思路分析，有图解。可以是我们更加容易的去学习数据结构。该笔记参考于</p><a id="more"></a><h1 id="稀疏sparsearray数组"><a href="#稀疏sparsearray数组" class="headerlink" title="稀疏sparsearray数组"></a>稀疏sparsearray数组</h1><p>编写的五子棋程序中，有存盘退出和续上盘的功能。</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5.png" alt="image-20200609144127262"></p><p>分析问题:<br>因为该二维数组的很多值是默认值0, 因此<strong>记录了很多没有意义的数据.</strong>-&gt;稀疏数组。</p><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ul><li>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</li><li>稀疏数组的处理方法是:<ul><li>记录数组一共有几行几列，有多少个不同的值</li><li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</li></ul></li><li>稀疏数组第一行，也就是索引为0的行，记录原二维数组的基本信息【多少行，多少列，多少有效值】</li><li>稀疏矩阵其他行，记录原二维数组的有效值信息【原第几行，原第几列，值】</li><li>因此二维数组转换得到的稀疏矩阵是N行3列。</li></ul><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E4%BA%8C%E7%BB%B4%E8%BD%AC%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5.png" alt=""></p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E4%BA%8C%E7%BB%B4%E4%B8%8E%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E4%BA%92%E8%BD%AC.png" alt="image-20200609144831136"></p><p>类似于棋盘，没有棋子的位置保存为0，黑棋保存1，蓝棋保存2</p><h2 id="二维数组与稀疏矩阵互相转换的思路"><a href="#二维数组与稀疏矩阵互相转换的思路" class="headerlink" title="二维数组与稀疏矩阵互相转换的思路"></a>二维数组与稀疏矩阵互相转换的思路</h2><h3 id="二维-转-稀疏"><a href="#二维-转-稀疏" class="headerlink" title="二维 转 稀疏"></a>二维 转 稀疏</h3><ol><li>遍历原始的二维数组，得到有效数据个数 sum，因为第0行保存原数组基本信息，所以总行数为sum+1。</li><li>根据sum就可以创建稀疏数组  <code>int[sum+1][3]sparseArr</code>。</li><li>将二维数组的有效值存入稀疏数组。</li></ol><h3 id="稀疏-转-二维数组"><a href="#稀疏-转-二维数组" class="headerlink" title="稀疏 转 二维数组"></a>稀疏 转 二维数组</h3><ol><li>先读取稀疏数组第一行，根据第一行数据创建原始二维数组，比如上面的 <code>chessArr2  = int[11][11]</code></li><li>在读取稀疏数组后几行数据，并赋值给原数组即可。</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sparseArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个原始二维数组11*11</span></span><br><span class="line"><span class="comment">//0表示没有棋子，1表示黑子，2表示蓝子</span></span><br><span class="line"><span class="keyword">int</span>[][] chessArr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">chessArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">chessArr1[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//输出原始的二维数组</span></span><br><span class="line">System.out.println(<span class="string">"原始的二维数组"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArr1) &#123;<span class="comment">//每一行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;<span class="comment">//每一行的每一个数据</span></span><br><span class="line">System.out.printf(<span class="string">"%d\t"</span>,data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将二维数组 转 稀疏数组</span></span><br><span class="line"><span class="comment">/* 1.先遍历二维数组，得到非零数据的个数</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt; <span class="number">11</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(chessArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.创建对应的稀疏数组</span></span><br><span class="line"><span class="keyword">int</span>[][] sparseArr = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//给稀疏数组赋值</span></span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历二位数组，将非零的值存到稀疏数组中</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//用于记录是第几个非零数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt; <span class="number">11</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(chessArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">sparseArr[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出稀疏数组</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"得到的稀疏数组为如下形式："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;sparseArr.length;i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t%d\t%d\t\n"</span>,sparseArr[i][<span class="number">0</span>],sparseArr[i][<span class="number">1</span>],sparseArr[i][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//稀疏数组转回二维数组</span></span><br><span class="line"><span class="comment">//1.先读取稀疏数组第一行，创建原始二维数组</span></span><br><span class="line"><span class="keyword">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="keyword">int</span>[ sparseArr[<span class="number">0</span>][<span class="number">0</span>] ][ sparseArr[<span class="number">0</span>][<span class="number">1</span>] ];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;sparseArr.length;i++) &#123;</span><br><span class="line">chessArr2[ sparseArr[i][<span class="number">0</span>] ][ sparseArr[i][<span class="number">1</span>] ] = sparseArr[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"恢复后的二维数组"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArr2) &#123;<span class="comment">//每一行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;<span class="comment">//每一行的每一个数据</span></span><br><span class="line">System.out.printf(<span class="string">"%d\t"</span>,data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="队列介绍"><a href="#队列介绍" class="headerlink" title="队列介绍"></a>队列介绍</h2><ol><li>队列是一个<strong>有序列表</strong>，可以用<strong>数组</strong>或<strong>链表</strong>来实现。</li><li>遵循<strong>先入先出</strong>的原则，即：先存入队列的数据，要先取出。后存入的要后取出。</li></ol><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E9%98%9F%E5%88%97.png" alt=""></p><h2 id="数组模拟队列"><a href="#数组模拟队列" class="headerlink" title="数组模拟队列"></a>数组模拟队列</h2><p><strong>思路</strong></p><ul><li><p>队列本身是有序列表，若使用数组结构来存储队列数据，则队列数组的声明如上图，其中<strong>maxSize</strong>是该队列的<strong>最大容量</strong>。</p></li><li><p>因为队列的输出、输入是分别从前后端来处理，因此需要两个变量front及rear分别记录队列前后端的下标。</p><ul><li>front会随着数据输出而改变。</li><li>rear则是随着数据输入而改变。</li></ul></li><li><p>当我们将数据存入队列时称为“addQueue”，addQueue的处理需要两个步骤</p><ol><li>将为指针往后移：rear+1,<strong>当front==rear时【队列空】</strong></li><li>若尾指针rear小于队列的最大下标maxSize-1，则将数据存入rear所指的数组元素中，否则无法存入数据。<strong>rear == maxSize-1【队列满】</strong>，因为下标从0开始所以maxSize要-1</li></ol></li><li><p>注意这里的rear和front的初始值都为-1.</p></li><li><p><strong>这里的front指向第一个元素的前一位</strong>！</p></li></ul><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用数组模拟队列，编写一个ArrayQueue类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//表示数组最大容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> front;<span class="comment">//指向队头</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear; <span class="comment">//指向队尾</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr;<span class="comment">//该数组用于存放数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建队列的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span> </span>&#123;</span><br><span class="line">maxSize = arrMaxSize;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">front = -<span class="number">1</span>;<span class="comment">//指向队列头部，未赋值前分析出front指向队列头的前一个位置</span></span><br><span class="line">rear = -<span class="number">1</span>;<span class="comment">//指向队列尾部，就是最后一个数据</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == maxSize-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加数据到队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">"队列满，不能加入数据"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">rear++;<span class="comment">//让rear后移，这里先后移然后赋值</span></span><br><span class="line">arr[rear] = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line"><span class="comment">//通过抛出异常来处理</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空，不能取数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">front++;<span class="comment">//头指针后移</span></span><br><span class="line"><span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">"队列空的，没有数据"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">"arr[%d]=%d\n"</span>,i,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示队列的头数据，注意不是取出数据，仅仅显示</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空的，没有数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[front+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试以上代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueueDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个队列</span></span><br><span class="line">ArrayQueue aq = <span class="keyword">new</span> ArrayQueue(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">char</span> key = <span class="string">' '</span>;<span class="comment">//接收用户输入</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//输出一个菜单</span></span><br><span class="line"><span class="keyword">while</span>(loop) &#123;</span><br><span class="line">System.out.println(<span class="string">"s(show):显示队列"</span>);</span><br><span class="line">System.out.println(<span class="string">"e(exit):退出程序"</span>);</span><br><span class="line">System.out.println(<span class="string">"a(add):添加数据到队列"</span>);</span><br><span class="line">System.out.println(<span class="string">"g(get):从队列取数据"</span>);</span><br><span class="line">System.out.println(<span class="string">"h(show):查看队列头数据"</span>);</span><br><span class="line">key = sc.next().charAt(<span class="number">0</span>);<span class="comment">//接受一个字符</span></span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">aq.showQueue();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">System.out.println(<span class="string">"请输入一个数"</span>);</span><br><span class="line"><span class="keyword">int</span> value = sc.nextInt();</span><br><span class="line">aq.addQueue(value);;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> result = aq.getQueue();</span><br><span class="line">System.out.printf(<span class="string">"取出的数据是%d\n"</span>,result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'h'</span>:<span class="comment">//查看队头数据</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> r = aq.headQueue();</span><br><span class="line">System.out.printf(<span class="string">"队列头的数据是%d\n"</span>,r);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">sc.close();</span><br><span class="line">loop=<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"程序退出"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们通过测试可以发现，当我们创建了一个队列，随着我们不断地进队、出队操作，front与rear越来越靠后，而它们之前的空间就无法被再次使用，以至于这个队列用一次就不能用了。<br>为了解决这个问题，我们引入了循环队列。</p><h2 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h2><p>对前面的数组模拟队列的优化，充分利用数组，因此将数组看做是一个环形（通过<strong>取模</strong>实现）。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>尾指针的下一个为头指针时表示队列满，即：将队列容量空出一个作为约定。<ul><li>这里的尾指针指向最后一个元素的下一位。</li><li>队列满条件【(rear+1)%maxSize == front】</li><li>实际最大存储maxSize-1个数据，因为要空出一个空间。</li><li>这里的设定不唯一，后面我们会总结一下！</li></ul></li><li>rear == front【队列空】</li></ul><h3 id="编写环形队列思路"><a href="#编写环形队列思路" class="headerlink" title="编写环形队列思路"></a>编写环形队列思路</h3><ul><li>front变量的含义嘴一个调整：<strong>front就指向队列的第一个元素</strong>，<strong>初值=0</strong></li><li><strong>rear指向最后一个元素后一个位置</strong>，因为空出一个空间作为约定。<strong>初值=0</strong></li><li>队列满：<code>(rear+1)%maxSize == front</code>【满】</li><li>队列空：<code>rear == front</code>【空】</li><li>队列中的有效数据个数：<code>(rear-front+maxSize)%maxSize</code></li></ul><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleArray</span></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * front指向队列的第一个元素，也就是说arr[front]就是头部数据</span></span><br><span class="line"><span class="comment"> * front初始值=0</span></span><br><span class="line"><span class="comment"> * rear指向最后一个元素的后一个位置，因为希望空出一个空间作为约束</span></span><br><span class="line"><span class="comment"> * rear初始值=0</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//表示数组最大容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr;<span class="comment">//该数组用于存放数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CircleArray</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span> </span>&#123;</span><br><span class="line">maxSize = arrMaxSize;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (rear + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加数据到队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">"队列满，不能加入数据"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接将数据加入</span></span><br><span class="line">arr[rear] = n;</span><br><span class="line"><span class="comment">//将rear后移，这里必须考虑取模</span></span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line"><span class="comment">//通过抛出异常来处理</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空，不能取数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里需要分析出 front是指向队列的第一个元素</span></span><br><span class="line"><span class="comment">/* 1.先把front的值保存到一个临时变量</span></span><br><span class="line"><span class="comment"> * 2.将front后移</span></span><br><span class="line"><span class="comment"> * 3.将临时保存的变量返回</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">int</span> value =arr[front];</span><br><span class="line">front = (front+<span class="number">1</span>) % maxSize;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">"队列空的，没有数据"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//思路：从front开始遍历，遍历多少个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = front; i&lt;front+size();i++ ) &#123;</span><br><span class="line">System.out.printf(<span class="string">"arr[%d]=%d\n"</span>,i % maxSize,arr[i%maxSize]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求出当前队列有效数据的个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (rear+maxSize-front)%maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列的头数据，注意不是取出数据，仅仅显示</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空的，没有数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试上面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleArrayQueueDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个队列</span></span><br><span class="line">CircleArray aq = <span class="keyword">new</span> CircleArray(<span class="number">4</span>);<span class="comment">//其队列有效数据最大是3，因为有一个空间作为约定</span></span><br><span class="line"><span class="keyword">char</span> key = <span class="string">' '</span>;<span class="comment">//接收用户输入</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//输出一个菜单</span></span><br><span class="line"><span class="keyword">while</span>(loop) &#123;</span><br><span class="line">System.out.println(<span class="string">"s(show):显示队列"</span>);</span><br><span class="line">System.out.println(<span class="string">"e(exit):退出程序"</span>);</span><br><span class="line">System.out.println(<span class="string">"a(add):添加数据到队列"</span>);</span><br><span class="line">System.out.println(<span class="string">"g(get):从队列取数据"</span>);</span><br><span class="line">System.out.println(<span class="string">"h(show):查看队列头数据"</span>);</span><br><span class="line">key = sc.next().charAt(<span class="number">0</span>);<span class="comment">//接受一个字符</span></span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">aq.showQueue();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">System.out.println(<span class="string">"请输入一个数"</span>);</span><br><span class="line"><span class="keyword">int</span> value = sc.nextInt();</span><br><span class="line">aq.addQueue(value);;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> result = aq.getQueue();</span><br><span class="line">System.out.printf(<span class="string">"取出的数据是%d\n"</span>,result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'h'</span>:<span class="comment">//查看队头数据</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> r = aq.headQueue();</span><br><span class="line">System.out.printf(<span class="string">"队列头的数据是%d\n"</span>,r);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">sc.close();</span><br><span class="line">loop=<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"程序退出"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么循环队列要空一个空间作为约定？"><a href="#为什么循环队列要空一个空间作为约定？" class="headerlink" title="为什么循环队列要空一个空间作为约定？"></a>为什么循环队列要空一个空间作为约定？</h3><p>在循环队列中，入队时，尾指针追赶头指针；出队时，头指针追赶尾指针。这样就造成了【队满】与【队空】的状态一样，即：入队，尾指针追上了头指针，此时rear==front  【队满】；出队，头指针追上了尾指针，此时reat==front【队空】。所以无法通过rear==front来判断队空或队满。解决方法至少有三种：</p><ol><li>另外增加布尔变量来表示队空和队满。</li><li>少用一个空间，比如我们这种形式。</li><li>使用计数器，记录队列中元素的总数。</li></ol><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>单链表是有序列表，内存中存储如下：</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E9%93%BE%E8%A1%A8.png" alt=""></p><ul><li>链表是以节点的方式来寻出，是链式存储</li><li>每个节点包含<strong>data域</strong>，<strong>next域</strong>：指向下一个节点</li><li>如图发现链表的各个节点<strong>不一定是连续</strong>的，逻辑上连续，物理上不一定连续。</li><li>链表分带头结点的链表和没有头结点的链表，根据实际的需求来确定</li></ul><p>带头结点的逻辑结构示意图</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E7%9A%84%E5%8D%95%E9%93%BE%E8%A1%A8.png" alt=""></p><h3 id="单链表案例"><a href="#单链表案例" class="headerlink" title="单链表案例"></a>单链表案例</h3><p>使用带head头的单向链表实现，水浒英雄排行榜管理，完成对英雄人物的增删改查操作。</p><h4 id="定义节点类"><a href="#定义节点类" class="headerlink" title="定义节点类"></a><strong>定义节点类</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义HeroNode</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> String nickname;</span><br><span class="line"><span class="keyword">public</span> HeroNode next;<span class="comment">//指向下一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> no,String name,String nickName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.nickname=nickName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为了显示方便，重写toString</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"HeroNode [no="</span> + no + <span class="string">", name="</span> + name + <span class="string">", nickname="</span> + nickname + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义单链表类"><a href="#定义单链表类" class="headerlink" title="定义单链表类"></a>定义单链表类</h4><p>这里面的其他方法，我们一一介绍，然后加到该类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义SingleLinkList管理我们的英雄</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span></span>&#123;</span><br><span class="line"><span class="comment">//先初始化头结点，头结点不要动，不存放具体数据</span></span><br><span class="line"><span class="keyword">private</span> HeroNode head = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h5><p><strong>第一种，不考虑顺序的添加。</strong><br><strong>思路</strong></p><ol><li><p>先创建一个head头结点，作用就是表示单链表的头。</p></li><li><p>后面每加一个节点，就直接加入到链表的最后。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加节点到单向链表</span></span><br><span class="line"><span class="comment">//当不考虑编号的顺序时</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.找到当前链表的最后节点</span></span><br><span class="line"><span class="comment"> * 2.将最后这个节点的next指向新节点</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode heroNode)</span> </span>&#123;</span><br><span class="line"><span class="comment">//因为head节点不能动，因此需要一个辅助节点</span></span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="comment">//遍历链表，找到最后</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//找到链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有找到最后，将temp后移</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出循环时，temp就指向了链表最后</span></span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>第二种，考虑顺序</strong></p><p><strong>思路</strong></p><ol><li>首先找到新添加节点的位置，是通过辅助变量temp，通过遍历来搞定。temp要指向添加位置的前一个节点。</li><li>新节点.next = temp.next。新节点指向添加位置的后一个节点。</li><li>temp.next = 新节点。添加位置的前一个节点的next指向新节点。</li></ol><p><strong>示意图</strong></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%B7%BB%E5%8A%A0.png" alt=""></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二种方式再添加英雄时，根据排名将英雄插入到指定位置</span></span><br><span class="line"><span class="comment">//如果有这个排名。则添加失败</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByOrder</span><span class="params">(HeroNode heroNode)</span> </span>&#123;</span><br><span class="line"><span class="comment">//因为头结点不能动，因此通过辅助指针帮助找到添加的位置</span></span><br><span class="line"><span class="comment">//因为单链表，因此我们找的temp是位于添加位置的前一个节点，否则插入不了</span></span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//标志添加的编号是否存在，默认false</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="keyword">null</span>) &#123;<span class="comment">//说明temp在链表最后了</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.next.no &gt; heroNode.no) &#123;<span class="comment">//位置找到，就在temp后面</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp.next.no == heroNode.no) &#123;<span class="comment">//说明希望添加的heroNode的编号已然存在</span></span><br><span class="line">flag = <span class="keyword">true</span>;<span class="comment">//说明编号存在</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;<span class="comment">//后移，遍历当前链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断flag的值</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;<span class="comment">//说明编号存在，不能添加</span></span><br><span class="line">System.out.printf(<span class="string">"准备插入的英雄的编号 %d 已经存在，不能加入\n"</span>,heroNode.no);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//插入到链表中，temp的后面</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.先让heroNode.next =temp.next</span></span><br><span class="line"><span class="comment"> * 2.再让temp.next = heroNode</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">heroNode.next = temp.next;</span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="显示链表内容"><a href="#显示链表内容" class="headerlink" title="显示链表内容"></a>显示链表内容</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//先判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为头节点不能动，需要辅助变量</span></span><br><span class="line">HeroNode temp = head.next;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//判断是否到最后</span></span><br><span class="line"><span class="keyword">if</span>(temp==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出节点的信息</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="comment">//将temp后移</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改节点内容"><a href="#修改节点内容" class="headerlink" title="修改节点内容"></a>修改节点内容</h5><p><strong>思路</strong></p><ol><li>先通过遍历找到找到该节点。</li><li>然后为对应属性赋值。</li></ol><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改节点的信息，根据no来修改，即no不可变</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HeroNode newHeroNode)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空----"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到修改的节点，根据no</span></span><br><span class="line"><span class="comment">//定义辅助变量</span></span><br><span class="line">HeroNode temp = head.next;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//表示是否找到该节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//表示链表已经遍历完</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.no == newHeroNode.no) &#123;<span class="comment">//找到要修改的节点</span></span><br><span class="line">flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据flag判断是否找到要修改的节点</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">temp.name = newHeroNode.name;</span><br><span class="line">temp.nickname = newHeroNode.nickname;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//没有找到</span></span><br><span class="line">System.out.printf(<span class="string">"没有找到编号 %d 的节点，不能修改\n"</span>,newHeroNode.no);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h5><p><strong>思路</strong></p><ol><li>先创建temp辅助指针，通过遍历找到要删除节点的前一个节点。</li><li>将temp.next = temp.next.next。将要删除节点的前一个节点的next指向要删除节点的后一个节点。</li><li>被删除节点会因为没有其他引用，而被垃圾回收机制回收。</li></ol><p><strong>示例图</strong></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9.png" alt=""></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.head不动，用temp辅助借调找到待删除节点的前一个节点</span></span><br><span class="line"><span class="comment"> * 2.说明我们在比较时，是temp.next.no和需要删除的节点no比较 </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//表示是否找到待删除的节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="keyword">null</span>) &#123;<span class="comment">//已经到链表的最后</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.next.no == no) &#123;</span><br><span class="line"><span class="comment">//找到待删除节点的前一个节点temp</span></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;<span class="comment">//后移，遍历链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line"><span class="comment">//找到可以删除</span></span><br><span class="line">temp.next = temp.next.next;</span><br><span class="line"><span class="comment">/*解释一下，temp现在指向待删除节点的前一个节点，temp.next本来指向要删除的节点</span></span><br><span class="line"><span class="comment"> * 把要删除的节点删除后，temp.next要指向要删除节点的后一个节点，而temp.next.next指向的就是要删除节点的后一个节点</span></span><br><span class="line"><span class="comment"> * 所以要删除节点的前一个节点，指向要删除节点的后一个节点就是temp.next = temp.next.next</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.printf(<span class="string">"没有找到 %d 号节点，无法删除\n"</span>,no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码综合"><a href="#代码综合" class="headerlink" title="代码综合"></a>代码综合</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义SingleLinkList管理我们的英雄</span></span><br><span class="line"><span class="keyword">class</span> SingleLinkedList&#123;</span><br><span class="line"><span class="comment">//先初始化头结点，头结点不要动，不存放具体数据</span></span><br><span class="line"><span class="keyword">private</span> HeroNode head = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加节点到单向链表</span></span><br><span class="line"><span class="comment">//当不考虑编号的顺序时</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.找到当前链表的最后节点</span></span><br><span class="line"><span class="comment"> * 2.将最后这个节点的next指向新节点</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> add(HeroNode heroNode) &#123;</span><br><span class="line"><span class="comment">//因为head节点不能动，因此需要一个辅助节点</span></span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="comment">//遍历链表，找到最后</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//找到链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.<span class="keyword">next</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有找到最后，将temp后移</span></span><br><span class="line">temp = temp.<span class="keyword">next</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出循环时，temp就指向了链表最后</span></span><br><span class="line">temp.<span class="keyword">next</span> = heroNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二种方式再添加英雄时，根据排名将英雄插入到指定位置</span></span><br><span class="line"><span class="comment">//如果有这个排名。则添加失败</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> addByOrder(HeroNode heroNode) &#123;</span><br><span class="line"><span class="comment">//因为头结点不能动，因此通过辅助指针帮助找到添加的位置</span></span><br><span class="line"><span class="comment">//因为单链表，因此我们找的temp是位于添加位置的前一个节点，否则插入不了</span></span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//标志添加的编号是否存在，默认false</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp.<span class="keyword">next</span> == <span class="keyword">null</span>) &#123;<span class="comment">//说明temp在链表最后了</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.<span class="keyword">next</span>.no &gt; heroNode.no) &#123;<span class="comment">//位置找到，就在temp后面</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp.<span class="keyword">next</span>.no == heroNode.no) &#123;<span class="comment">//说明希望添加的heroNode的编号已然存在</span></span><br><span class="line">flag = <span class="keyword">true</span>;<span class="comment">//说明编号存在</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.<span class="keyword">next</span>;<span class="comment">//后移，遍历当前链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断flag的值</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;<span class="comment">//说明编号存在，不能添加</span></span><br><span class="line">System.out.printf(<span class="string">"准备插入的英雄的编号 %d 已经存在，不能加入\n"</span>,heroNode.no);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//插入到链表中，temp的后面</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.先让heroNode.next =temp.next</span></span><br><span class="line"><span class="comment"> * 2.再让temp.next = heroNode</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">heroNode.<span class="keyword">next</span> = temp.<span class="keyword">next</span>;</span><br><span class="line">temp.<span class="keyword">next</span> = heroNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> list() &#123;</span><br><span class="line"><span class="comment">//先判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.<span class="keyword">next</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为头节点不能动，需要辅助变量</span></span><br><span class="line">HeroNode temp = head.<span class="keyword">next</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//判断是否到最后</span></span><br><span class="line"><span class="keyword">if</span>(temp==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出节点的信息</span></span><br><span class="line">System.out.<span class="keyword">println</span>(temp);</span><br><span class="line"><span class="comment">//将temp后移</span></span><br><span class="line">temp = temp.<span class="keyword">next</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改节点的信息，根据no来修改，即no不可变</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> update(HeroNode newHeroNode) &#123;</span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="keyword">if</span>(head.<span class="keyword">next</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.<span class="keyword">println</span>(<span class="string">"链表为空----"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到修改的节点，根据no</span></span><br><span class="line"><span class="comment">//定义辅助变量</span></span><br><span class="line">HeroNode temp = head.<span class="keyword">next</span>;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//表示是否找到该节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//表示链表已经遍历完</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.no == newHeroNode.no) &#123;<span class="comment">//找到要修改的节点</span></span><br><span class="line">flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.<span class="keyword">next</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据flag判断是否找到要修改的节点</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">temp.name = newHeroNode.name;</span><br><span class="line">temp.nickname = newHeroNode.nickname;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//没有找到</span></span><br><span class="line">System.out.printf(<span class="string">"没有找到编号 %d 的节点，不能修改\n"</span>,newHeroNode.no);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.head不动，用temp辅助借调找到待删除节点的前一个节点</span></span><br><span class="line"><span class="comment"> * 2.说明我们在比较时，是temp.next.no和需要删除的节点no比较</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> del(<span class="keyword">int</span> no) &#123;</span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//表示是否找到待删除的节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp.<span class="keyword">next</span> == <span class="keyword">null</span>) &#123;<span class="comment">//已经到链表的最后</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.<span class="keyword">next</span>.no == no) &#123;</span><br><span class="line"><span class="comment">//找到待删除节点的前一个节点temp</span></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.<span class="keyword">next</span>;<span class="comment">//后移，遍历链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line"><span class="comment">//找到可以删除</span></span><br><span class="line">temp.<span class="keyword">next</span> = temp.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line"><span class="comment">/*解释一下，temp现在指向待删除节点的前一个节点，temp.next本来指向要删除的节点</span></span><br><span class="line"><span class="comment"> * 把要删除的节点删除后，temp.next要指向要删除节点的后一个节点，而temp.next.next指向的就是要删除节点的后一个节点</span></span><br><span class="line"><span class="comment"> * 所以要删除节点的前一个节点，指向要删除节点的后一个节点就是temp.next = temp.next.next</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.printf(<span class="string">"没有找到 %d 号节点，无法删除\n"</span>,no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">HeroNode h1 = <span class="keyword">new</span> HeroNode(<span class="number">1</span>,<span class="string">"宋江"</span>,<span class="string">"及时雨"</span>);</span><br><span class="line">HeroNode h2 = <span class="keyword">new</span> HeroNode(<span class="number">2</span>,<span class="string">"卢俊义"</span>,<span class="string">"玉麒麟"</span>);</span><br><span class="line">HeroNode h3 = <span class="keyword">new</span> HeroNode(<span class="number">3</span>,<span class="string">"吴用"</span>,<span class="string">"智多星"</span>);</span><br><span class="line">HeroNode h4 = <span class="keyword">new</span> HeroNode(<span class="number">4</span>,<span class="string">"公孙胜"</span>,<span class="string">"入云龙"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line">SingleLinkedList s1 = <span class="keyword">new</span> SingleLinkedList();</span><br><span class="line"></span><br><span class="line"><span class="comment">//加入</span></span><br><span class="line"><span class="comment">//s1.add(h1);</span></span><br><span class="line"><span class="comment">//s1.add(h2);</span></span><br><span class="line"><span class="comment">//s1.add(h3);</span></span><br><span class="line"><span class="comment">//s1.add(h4);</span></span><br><span class="line">s1.addByOrder(h1);</span><br><span class="line">s1.addByOrder(h4);</span><br><span class="line">s1.addByOrder(h3);</span><br><span class="line">s1.addByOrder(h2);</span><br><span class="line">s1.addByOrder(h2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试修改节点</span></span><br><span class="line">System.out.println(<span class="string">"修改前的链表"</span>);</span><br><span class="line"><span class="comment">//显示</span></span><br><span class="line">s1.list();</span><br><span class="line">HeroNode newHeroNode = <span class="keyword">new</span> HeroNode(<span class="number">4</span>,<span class="string">"公孙小胜"</span>,<span class="string">"入云龙儿"</span>);</span><br><span class="line">s1.update(newHeroNode);</span><br><span class="line">HeroNode newHeroNode2 = <span class="keyword">new</span> HeroNode(<span class="number">5</span>,<span class="string">"公孙小胜"</span>,<span class="string">"入云龙儿"</span>);<span class="comment">//这里测试没有找到</span></span><br><span class="line">s1.update(newHeroNode2);</span><br><span class="line">System.out.println(<span class="string">"修改后的链表"</span>);</span><br><span class="line">s1.list();</span><br><span class="line"><span class="comment">//测试删除</span></span><br><span class="line">s1.del(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"删除以后的链表"</span>);</span><br><span class="line">s1.list();</span><br><span class="line"><span class="comment">//测试删除失败</span></span><br><span class="line">s1.del(<span class="number">88</span>);</span><br><span class="line">s1.del(<span class="number">4</span>);</span><br><span class="line">s1.list();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表面试题"><a href="#单链表面试题" class="headerlink" title="单链表面试题"></a>单链表面试题</h3><h5 id="1-求单链表中有效节点的个数。"><a href="#1-求单链表中有效节点的个数。" class="headerlink" title="1.求单链表中有效节点的个数。"></a>1.求单链表中有效节点的个数。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法：获取到单链表的节点个数（如果是带头结点的链表，需求不统计头结点）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(HeroNode head)</span> </span>&#123;<span class="comment">//传头结点进来</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//定义一个辅助变量</span></span><br><span class="line">HeroNode cur = head.next;</span><br><span class="line"><span class="keyword">while</span>(cur!=<span class="keyword">null</span>) &#123;</span><br><span class="line">length++;</span><br><span class="line">cur = cur.next;<span class="comment">//遍历</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-查找单链表中倒数第K个节点"><a href="#2-查找单链表中倒数第K个节点" class="headerlink" title="2.查找单链表中倒数第K个节点"></a>2.查找单链表中倒数第K个节点</h5><p><strong>思路</strong></p><ol><li>编写一个方法，接收head节点，同时接收一个index.</li><li>index表示倒数第index个节点</li><li>先把链表从头到尾遍历，得到链表的总长度 getLength()</li><li>得到size后，我们从链表第一个开始遍历(size-index)个，就可以找到</li><li>如果找到，则返回该节点，否则返回null</li></ol><p><strong>代码</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HeroNode findLastNode(HeroNode head,<span class="keyword">int</span> index) &#123;</span><br><span class="line"><span class="comment">//如果链表为空</span></span><br><span class="line"><span class="keyword">if</span>(head.<span class="keyword">next</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一次遍历得到链表的长度</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">size</span> = getLength(head);</span><br><span class="line"><span class="comment">//第二次遍历（size-index）就是倒数第几个</span></span><br><span class="line"><span class="comment">//先做一个index的校验</span></span><br><span class="line"><span class="keyword">if</span>(index&lt;=<span class="number">0</span> || index&gt;<span class="keyword">size</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义以一个辅助变量</span></span><br><span class="line">HeroNode temp = head.<span class="keyword">next</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;(<span class="keyword">size</span>-index);i++) &#123;</span><br><span class="line">temp = temp.<span class="keyword">next</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-单链表的反转，有难度"><a href="#3-单链表的反转，有难度" class="headerlink" title="3.单链表的反转，有难度"></a>3.单链表的反转，有难度</h5><p><strong>思路</strong></p><ol><li>先定义一个节点reverseHead = new HeroNode();</li><li>从头到尾遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead的最前端</li><li>最后原来链表的head.next = reverseHead.next</li></ol><p><strong>图解</strong></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC%E5%9B%BE%E8%A7%A3.png" alt=""></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表的反转</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reversetList</span><span class="params">(HeroNode head)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果当前链表为空或只有一个节点，就无须翻转</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建辅助指针</span></span><br><span class="line">HeroNode temp = head.next;</span><br><span class="line">HeroNode next = <span class="keyword">null</span>;<span class="comment">//指向当前节点temp的下一个节点</span></span><br><span class="line">HeroNode reserseHead = <span class="keyword">new</span> HeroNode(<span class="number">0</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"><span class="keyword">while</span>(temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">next = temp.next;<span class="comment">//先暂时保留当前节点的下一个节点</span></span><br><span class="line">temp.next = reserseHead.next;<span class="comment">//将temp的下一个节点指向新链表的最前端</span></span><br><span class="line">reserseHead.next = temp;<span class="comment">//将temp连接到新的链表上</span></span><br><span class="line">temp = next;<span class="comment">//让temp指向下一个节点，后移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将head.next指向reserseHead.next，实现单链表的反转</span></span><br><span class="line">head.next = reserseHead.next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-从尾到头打印单链表"><a href="#4-从尾到头打印单链表" class="headerlink" title="4.从尾到头打印单链表"></a>4.从尾到头打印单链表</h5><p>思路：使用栈，进行压栈，出栈从而实现从尾到头打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从尾到头打印单链表，使用栈</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reversePrint</span><span class="params">(HeroNode head)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//空链表无法打印</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个栈，将各个节点压栈</span></span><br><span class="line">Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> Stack&lt;HeroNode&gt;();</span><br><span class="line">HeroNode cur = head.next;</span><br><span class="line"><span class="comment">//将链表的·所有节点压栈</span></span><br><span class="line"><span class="keyword">while</span>(cur!=<span class="keyword">null</span>) &#123;</span><br><span class="line">stack.push(cur);</span><br><span class="line">cur = cur.next;<span class="comment">//后移</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将栈中的节点打印</span></span><br><span class="line"><span class="keyword">while</span>(stack.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(stack.pop());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-合并两个有序单链表，结果仍然有序"><a href="#5-合并两个有序单链表，结果仍然有序" class="headerlink" title="5.合并两个有序单链表，结果仍然有序"></a>5.合并两个有序单链表，结果仍然有序</h5><p><strong>思路</strong></p><ol><li>分别为两条单链表创建temp1、temp2和next1，next2作用和反转单链表相同</li><li>创建一个新链表newlist，并创建一个temp用来指向该链表最后</li><li>先判断是否可以合并，不可以则返回null</li><li>如果可以合并，当两个链表都不为null时，也就是都还有数据时，判断大小</li><li>对应的next后移，temp指向判断结果temp1或2，然后temp1或2指向next1或2</li><li>temp后移，因为它要在最后。</li><li>当有一个链表遍历完后，判断谁还有数据，然后就把数据都加到新链表最后就好了。</li><li>最后返回合并好的链表。</li></ol><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleLinkedList <span class="title">mergeByOrder</span><span class="params">(HeroNode head1,HeroNode head2)</span> </span>&#123;<span class="comment">//这里顺序为从小到大</span></span><br><span class="line"><span class="keyword">if</span>(head1.next == <span class="keyword">null</span> || head2.next == <span class="keyword">null</span>) &#123;<span class="comment">//没有数据无法合并</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">SingleLinkedList newlist = <span class="keyword">new</span> SingleLinkedList();</span><br><span class="line">HeroNode temp = newlist.getHead();<span class="comment">//使它一直指向新链表的最后</span></span><br><span class="line">HeroNode temp1 = head1.next;<span class="comment">//先指向第一个链表</span></span><br><span class="line">HeroNode temp2 = head2.next;<span class="comment">//先指向第二个链表</span></span><br><span class="line">HeroNode next1 = <span class="keyword">null</span>;<span class="comment">//用来记录第一条链表的位置</span></span><br><span class="line">HeroNode next2 = <span class="keyword">null</span>;<span class="comment">//用来记录第二条链表的位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(temp1!=<span class="keyword">null</span> &amp;&amp; temp2!=<span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(temp1.no&lt;=temp2.no) &#123;</span><br><span class="line">next1 = temp1.next;</span><br><span class="line">temp.next = temp1;</span><br><span class="line">temp1 = next1;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">next2 = temp2.next;</span><br><span class="line">temp.next = temp2;</span><br><span class="line">temp2 = next2;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">temp.next = temp1!=<span class="keyword">null</span> ? temp1 : temp2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newlist;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><ul><li>单向链表，查找只能是一个方向，而双向链表可以向前或者向后查找</li><li>单向链表不能自我删除，需要靠辅助节点。而双向链表可以自我删除。</li></ul><p><strong>示意图</strong></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><h3 id="双向链表增删改查操作"><a href="#双向链表增删改查操作" class="headerlink" title="双向链表增删改查操作"></a>双向链表增删改查操作</h3><p><strong>创建节点类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义HeroNode2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode2</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> String nickname;</span><br><span class="line"><span class="keyword">public</span> HeroNode2 next;<span class="comment">//指向下一个节点</span></span><br><span class="line"><span class="keyword">public</span> HeroNode2 pre;<span class="comment">//指向前一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeroNode2</span><span class="params">(<span class="keyword">int</span> no,String name,String nickName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.nickname=nickName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为了显示方便，重写toString</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"HeroNode [no="</span> + no + <span class="string">", name="</span> + name + <span class="string">", nickname="</span> + nickname + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建双向链表类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个双向链表类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span></span>&#123;</span><br><span class="line"><span class="comment">//先初始化头结点，头结点不要动，不存放具体数据</span></span><br><span class="line"><span class="keyword">private</span> HeroNode2 head = <span class="keyword">new</span> HeroNode2(<span class="number">0</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> HeroNode2 <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//先判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为头节点不能动，需要辅助变量</span></span><br><span class="line">HeroNode2 temp = head.next;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//判断是否到最后</span></span><br><span class="line"><span class="keyword">if</span>(temp==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出节点的信息</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="comment">//将temp后移</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认加到最后</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode2 heroNode)</span> </span>&#123;</span><br><span class="line"><span class="comment">//因为head节点不能动，因此需要一个辅助节点</span></span><br><span class="line">HeroNode2 temp = head;</span><br><span class="line"><span class="comment">//遍历链表，找到最后</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//找到链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有找到最后，将temp后移</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出循环时，temp就指向了链表最后</span></span><br><span class="line">temp.next = heroNode;</span><br><span class="line">heroNode.pre = temp;</span><br><span class="line"><span class="comment">//形成双向链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HeroNode2 newHeroNode)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空----"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到修改的节点，根据no</span></span><br><span class="line"><span class="comment">//定义辅助变量</span></span><br><span class="line">HeroNode2 temp = head.next;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//表示是否找到该节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//表示链表已经遍历完</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.no == newHeroNode.no) &#123;<span class="comment">//找到要修改的节点</span></span><br><span class="line">flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据flag判断是否找到要修改的节点</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">temp.name = newHeroNode.name;</span><br><span class="line">temp.nickname = newHeroNode.nickname;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//没有找到</span></span><br><span class="line">System.out.printf(<span class="string">"没有找到编号 %d 的节点，不能修改\n"</span>,newHeroNode.no);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除，对于双向链表，我们可以直接找到要删除的节点，然后自我删除！！</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空，无法删除------"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HeroNode2 temp = head.next;<span class="comment">//这里从第一个节点开始就可以</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//表示是否找到待删除的节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>) &#123;<span class="comment">//已经到链表的最后</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.no == no) &#123;</span><br><span class="line"><span class="comment">//找到待删除节点</span></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;<span class="comment">//后移，遍历链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line"><span class="comment">//找到可以删除</span></span><br><span class="line">temp.pre.next = temp.next;</span><br><span class="line"><span class="comment">//这里有问题，如果这是最后一个节点，就不需要执行下面，否则会出现空指针异常</span></span><br><span class="line"><span class="keyword">if</span>(temp.name!=<span class="keyword">null</span>) &#123;</span><br><span class="line">temp.next.pre = temp.pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.printf(<span class="string">"没有找到 %d 号节点，无法删除\n"</span>,no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式再添加英雄时，根据排名将英雄插入到指定位置</span></span><br><span class="line"><span class="comment">//如果有这个排名。则添加失败</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByOrder</span><span class="params">(HeroNode2 heroNode)</span> </span>&#123;</span><br><span class="line"><span class="comment">//因为头结点不能动，因此通过辅助指针帮助找到添加的位置</span></span><br><span class="line"><span class="comment">//因为单链表，因此我们找的temp是位于添加位置的前一个节点，否则插入不了</span></span><br><span class="line">HeroNode2 temp = head;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//标志添加的编号是否存在，默认false</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="keyword">null</span>) &#123;<span class="comment">//说明temp在链表最后了</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.next.no &gt; heroNode.no) &#123;<span class="comment">//位置找到，就在temp后面</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp.next.no == heroNode.no) &#123;<span class="comment">//说明希望添加的heroNode的编号已然存在</span></span><br><span class="line">flag = <span class="keyword">true</span>;<span class="comment">//说明编号存在</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;<span class="comment">//后移，遍历当前链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断flag的值</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;<span class="comment">//说明编号存在，不能添加</span></span><br><span class="line">System.out.printf(<span class="string">"准备插入的英雄的编号 %d 已经存在，不能加入\n"</span>,heroNode.no);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//插入到链表中，temp的后面</span></span><br><span class="line"></span><br><span class="line">heroNode.next = temp.next;</span><br><span class="line">heroNode.pre = temp;</span><br><span class="line"><span class="keyword">if</span>(temp.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line">temp.next.pre = heroNode;</span><br><span class="line">&#125;</span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加操作"><a href="#添加操作" class="headerlink" title="添加操作"></a>添加操作</h3><p><strong>第一种，不考虑顺序，加到最后</strong></p><p>这里跟单链表差不多，区别在于<strong>把最后节点的next指向加入的节点</strong>，之后把<strong>加入节点的pre指向原最后一个节点</strong>。</p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认加到最后</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode2 heroNode)</span> </span>&#123;</span><br><span class="line"><span class="comment">//因为head节点不能动，因此需要一个辅助节点</span></span><br><span class="line">HeroNode2 temp = head;</span><br><span class="line"><span class="comment">//遍历链表，找到最后</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//找到链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有找到最后，将temp后移</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出循环时，temp就指向了链表最后</span></span><br><span class="line">temp.next = heroNode;</span><br><span class="line">heroNode.pre = temp;</span><br><span class="line"><span class="comment">//形成双向链表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二种，考虑顺序</strong></p><p>这里跟单链表思路也很像，区别在于最后。</p><ul><li>先把新加入节点的next指向temp.next</li><li>再把新加节点的pre指向temp</li><li>然后需要判断一下，是不是在最后加，即：后面还有没有节点<ul><li>如果是最后，判断temp.next==null，这时只需要将temp.next指向新加节点。</li><li>如果不是最后，在中间加，先把temp.next.pre指向新加节点，然后将temp.next指向新加节点。</li></ul></li></ul><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二种方式再添加英雄时，根据排名将英雄插入到指定位置</span></span><br><span class="line"><span class="comment">//如果有这个排名。则添加失败</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByOrder</span><span class="params">(HeroNode2 heroNode)</span> </span>&#123;</span><br><span class="line"><span class="comment">//因为头结点不能动，因此通过辅助指针帮助找到添加的位置</span></span><br><span class="line"><span class="comment">//因为单链表，因此我们找的temp是位于添加位置的前一个节点，否则插入不了</span></span><br><span class="line">HeroNode2 temp = head;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//标志添加的编号是否存在，默认false</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="keyword">null</span>) &#123;<span class="comment">//说明temp在链表最后了</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.next.no &gt; heroNode.no) &#123;<span class="comment">//位置找到，就在temp后面</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp.next.no == heroNode.no) &#123;<span class="comment">//说明希望添加的heroNode的编号已然存在</span></span><br><span class="line">flag = <span class="keyword">true</span>;<span class="comment">//说明编号存在</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;<span class="comment">//后移，遍历当前链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断flag的值</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;<span class="comment">//说明编号存在，不能添加</span></span><br><span class="line">System.out.printf(<span class="string">"准备插入的英雄的编号 %d 已经存在，不能加入\n"</span>,heroNode.no);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//插入到链表中，temp的后面</span></span><br><span class="line"></span><br><span class="line">heroNode.next = temp.next;</span><br><span class="line">heroNode.pre = temp;</span><br><span class="line"><span class="keyword">if</span>(temp.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line">temp.next.pre = heroNode;</span><br><span class="line">&#125;</span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a><strong>修改操作</strong></h3><p>思路跟单链表一样。</p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HeroNode2 newHeroNode)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空----"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到修改的节点，根据no</span></span><br><span class="line"><span class="comment">//定义辅助变量</span></span><br><span class="line">HeroNode2 temp = head.next;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//表示是否找到该节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//表示链表已经遍历完</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.no == newHeroNode.no) &#123;<span class="comment">//找到要修改的节点</span></span><br><span class="line">flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据flag判断是否找到要修改的节点</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">temp.name = newHeroNode.name;</span><br><span class="line">temp.nickname = newHeroNode.nickname;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//没有找到</span></span><br><span class="line">System.out.printf(<span class="string">"没有找到编号 %d 的节点，不能修改\n"</span>,newHeroNode.no);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p><strong>思路</strong></p><ol><li>因为是双向链表，因此，我们可以实现自我删除某个节点</li><li>直接找到眼删除的节点</li><li>temp.pre.next = temp.next,这句话是把待删除前一个节点的next指向待删除的后一个节点，相当于空过了待删除节点，而连接下一个</li><li>temp.next.pre = temp.pre,这句话待删除节点下一个节点的pre指向待删除节点的上一个节点，相当于空过了待删除节点，而连接上一个<ul><li>执行temp.next.pre = temp.pre要先判断一下，是不是最后一个节点，不是删除最后一个节点才要执行！</li></ul></li></ol><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除，对于双向链表，我们可以直接找到要删除的节点，然后自我删除！！</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空，无法删除------"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HeroNode2 temp = head.next;<span class="comment">//这里从第一个节点开始就可以</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//表示是否找到待删除的节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>) &#123;<span class="comment">//已经到链表的最后</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.no == no) &#123;</span><br><span class="line"><span class="comment">//找到待删除节点</span></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;<span class="comment">//后移，遍历链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line"><span class="comment">//找到可以删除</span></span><br><span class="line">temp.pre.next = temp.next;</span><br><span class="line"><span class="comment">//这里有问题，如果这是最后一个节点，就不需要执行下面，否则会出现空指针异常</span></span><br><span class="line"><span class="keyword">if</span>(temp.name!=<span class="keyword">null</span>) &#123;</span><br><span class="line">temp.next.pre = temp.pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.printf(<span class="string">"没有找到 %d 号节点，无法删除\n"</span>,no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示链表"><a href="#显示链表" class="headerlink" title="显示链表"></a>显示链表</h3><p>这里跟单链表一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//先判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为头节点不能动，需要辅助变量</span></span><br><span class="line">HeroNode2 temp = head.next;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//判断是否到最后</span></span><br><span class="line"><span class="keyword">if</span>(temp==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出节点的信息</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="comment">//将temp后移</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="环形链表与约瑟夫问题"><a href="#环形链表与约瑟夫问题" class="headerlink" title="环形链表与约瑟夫问题"></a>环形链表与约瑟夫问题</h2><h3 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h3><p>Josephu问题为：设编号为1,2,3….n的n个人围坐一圈，约定编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到m的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，以此类推，知道所有人出列为止，由此产生一个出队编号的序列。</p><p>提示：用一个不带头结点的循环链表来处理Josephu问题：先构成一个有n个节点的单向循环链表，然后由k节点起从1开始计数，计到m时，对应节点从链表中删除，然后再从被删除节点的下一个节点又从1开始计数，知道最后一个节点从链表删除算法结束。</p><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png" alt=""></p><h3 id="约瑟夫问题解题思路"><a href="#约瑟夫问题解题思路" class="headerlink" title="约瑟夫问题解题思路"></a>约瑟夫问题解题思路</h3><h4 id="创建小孩节点"><a href="#创建小孩节点" class="headerlink" title="创建小孩节点"></a>创建小孩节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Boy类表示一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> no;<span class="comment">//编号</span></span><br><span class="line"><span class="keyword">private</span> Boy next;<span class="comment">//指向下一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Boy</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no=no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boy <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Boy next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建环形链表"><a href="#创建环形链表" class="headerlink" title="创建环形链表"></a>创建环形链表</h4><ol><li>先创建第一个节点，让first指向该节点，并形成环形</li><li>后面当我们没创建一个新的节点，就把该节点，加入到已有的环形链表中即可。</li></ol><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9.png" alt=""></p><p>这是第一个节点的操作，与其他节点加入环形链表有点区别</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E7%8E%AF%E5%BD%A2%E5%8D%95%E9%87%8F%E9%93%BE%E8%A1%A8%E7%AC%AC%E4%BA%8C%E4%B8%AA%E8%8A%82%E7%82%B9%E5%8A%A0%E5%85%A5.png" alt=""></p><p>这是从第二个节点开始加入环形链表，由此我们可以看出first的作用是充当头指针，curBoy的作用是决定在哪里加节点。</p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleSingleLinkedList</span></span>&#123;</span><br><span class="line"><span class="comment">//创建一个first节点，当前没有值</span></span><br><span class="line"><span class="keyword">private</span> Boy first =<span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//添加小孩节点，构建成一个环形链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBoy</span><span class="params">(<span class="keyword">int</span> nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(nums&lt;<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"nums的值不正确"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Boy curBoy = <span class="keyword">null</span>;<span class="comment">//辅助指针，帮助构建环形链表</span></span><br><span class="line"><span class="comment">//使用for循环来创建环形链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=nums;i++) &#123;</span><br><span class="line"><span class="comment">//根据编号创建小孩节点</span></span><br><span class="line">Boy boy = <span class="keyword">new</span> Boy(i);</span><br><span class="line"><span class="comment">//如果是第一个小孩</span></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>) &#123;</span><br><span class="line">first = boy;</span><br><span class="line">first.setNext(first);<span class="comment">//构成环，只不过只有自己</span></span><br><span class="line">curBoy = first;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">curBoy.setNext(boy);</span><br><span class="line">boy.setNext(first);</span><br><span class="line">curBoy = boy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历环形链表"><a href="#遍历环形链表" class="headerlink" title="遍历环形链表"></a>遍历环形链表</h4><p><strong>思路</strong></p><ol><li>first节点相当于头结点，不能动，所以创建curBoy辅助节点。</li><li>curBoy=curBoy.next实现后移，从而遍历。</li><li>遍历完成条件curBoy.next == first</li></ol><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历当前环形链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showBoy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(first == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"没有任何小孩"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为first不能动，所以我们任然使用辅助指针完成遍历</span></span><br><span class="line">Boy curBoy = first;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.printf(<span class="string">"小孩的编号 %d \n"</span>,curBoy.getNo());</span><br><span class="line"><span class="keyword">if</span>(curBoy.getNext() == first) &#123;</span><br><span class="line"><span class="comment">//遍历完毕</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">curBoy = curBoy.getNext();<span class="comment">//curBoy后移，实现遍历</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小孩出圈"><a href="#小孩出圈" class="headerlink" title="小孩出圈"></a>小孩出圈</h4><p><strong>思路</strong></p><ol><li>首先要让first和helper移动到对应位置<ul><li>helper永远在frist后面一个位置</li><li>因为是n个小孩中，从第k个开始报数，所以first和helper要移动k-1次</li></ul></li><li>小孩报数时，报m的小孩出圈，first和helper要移动m-1次</li><li>以上完成后，要对小孩进行出圈，使first移动到出圈小孩的下一位，然后helper.next指向first即可。</li></ol><p><strong>示意图</strong></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E5%87%BA%E5%9C%88.png" alt=""></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据用户的输入，计算出小孩出圈的顺序</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startNo  表示从第几个小孩开始数数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> countNum 表示数几下</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 表示最初有多少小孩在圈中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countBoy</span><span class="params">(<span class="keyword">int</span> startNo,<span class="keyword">int</span> countNum,<span class="keyword">int</span> nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(first == <span class="keyword">null</span> || startNo&lt; <span class="number">1</span> || startNo&gt;nums) &#123;</span><br><span class="line">System.out.println(<span class="string">"参数输入有误！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建辅助指针，帮助完成小孩出圈，开始应该指向最后节点</span></span><br><span class="line">Boy helper = first;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(helper.getNext() == first) &#123;<span class="comment">//说明此时已经指向最后节点</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小孩报数前，先让first和helper移动k-1次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;startNo-<span class="number">1</span>;j++) &#123;</span><br><span class="line">first = first.getNext();</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当小孩报数时，让first和helper指针同时移动countNum-1次，然后出圈</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(helper == first) &#123;<span class="comment">//说明圈中只有一个节点</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让first和helper指针同时移动countNum-1次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;countNum-<span class="number">1</span>;j++) &#123;</span><br><span class="line">first = first.getNext();</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时first所指的节点就是要出圈的节点</span></span><br><span class="line">System.out.printf(<span class="string">"小孩%d出圈\n"</span>,first.getNo());</span><br><span class="line">first = first.getNext();<span class="comment">//让first指向下一个</span></span><br><span class="line">helper.setNext(first);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.printf(<span class="string">"最后留在圈中的小孩编号%d \n"</span>,first.getNo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="环形链表整合"><a href="#环形链表整合" class="headerlink" title="环形链表整合"></a>环形链表整合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建环形单向链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleSingleLinkedList</span></span>&#123;</span><br><span class="line"><span class="comment">//创建一个first节点，当前没有值</span></span><br><span class="line"><span class="keyword">private</span> Boy first =<span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//添加小孩节点，构建成一个环形链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBoy</span><span class="params">(<span class="keyword">int</span> nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(nums&lt;<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"nums的值不正确"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Boy curBoy = <span class="keyword">null</span>;<span class="comment">//辅助指针，帮助构建环形链表</span></span><br><span class="line"><span class="comment">//使用for循环来创建环形链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=nums;i++) &#123;</span><br><span class="line"><span class="comment">//根据编号创建小孩节点</span></span><br><span class="line">Boy boy = <span class="keyword">new</span> Boy(i);</span><br><span class="line"><span class="comment">//如果是第一个小孩</span></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>) &#123;</span><br><span class="line">first = boy;</span><br><span class="line">first.setNext(first);<span class="comment">//构成环，只不过只有自己</span></span><br><span class="line">curBoy = first;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">curBoy.setNext(boy);</span><br><span class="line">boy.setNext(first);</span><br><span class="line">curBoy = boy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历当前环形链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showBoy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(first == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"没有任何小孩"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为first不能动，所以我们任然使用辅助指针完成遍历</span></span><br><span class="line">Boy curBoy = first;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.printf(<span class="string">"小孩的编号 %d \n"</span>,curBoy.getNo());</span><br><span class="line"><span class="keyword">if</span>(curBoy.getNext() == first) &#123;</span><br><span class="line"><span class="comment">//遍历完毕</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">curBoy = curBoy.getNext();<span class="comment">//curBoy后移，实现遍历</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据用户的输入，计算出小孩出圈的顺序</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startNo  表示从第几个小孩开始数数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> countNum 表示数几下</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 表示最初有多少小孩在圈中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countBoy</span><span class="params">(<span class="keyword">int</span> startNo,<span class="keyword">int</span> countNum,<span class="keyword">int</span> nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(first == <span class="keyword">null</span> || startNo&lt; <span class="number">1</span> || startNo&gt;nums) &#123;</span><br><span class="line">System.out.println(<span class="string">"参数输入有误！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建辅助指针，帮助完成小孩出圈，开始应该指向最后节点</span></span><br><span class="line">Boy helper = first;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(helper.getNext() == first) &#123;<span class="comment">//说明此时已经指向最后节点</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小孩报数前，先让first和helper移动k-1次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;startNo-<span class="number">1</span>;j++) &#123;</span><br><span class="line">first = first.getNext();</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当小孩报数时，让first和helper指针同时移动countNum-1次，然后出圈</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(helper == first) &#123;<span class="comment">//说明圈中只有一个节点</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让first和helper指针同时移动countNum-1次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;countNum-<span class="number">1</span>;j++) &#123;</span><br><span class="line">first = first.getNext();</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时first所指的节点就是要出圈的节点</span></span><br><span class="line">System.out.printf(<span class="string">"小孩%d出圈\n"</span>,first.getNo());</span><br><span class="line">first = first.getNext();<span class="comment">//让first指向下一个</span></span><br><span class="line">helper.setNext(first);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.printf(<span class="string">"最后留在圈中的小孩编号%d \n"</span>,first.getNo());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Josepfu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//测试构建和遍历</span></span><br><span class="line">CircleSingleLinkedList c = <span class="keyword">new</span> CircleSingleLinkedList();</span><br><span class="line">c.addBoy(<span class="number">5</span>);<span class="comment">//加入五个小孩节点</span></span><br><span class="line">c.showBoy();</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试出圈</span></span><br><span class="line">c.countBoy(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>);<span class="comment">//2,4,1,5,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>计算式【<code>7*5*6+9-8*6+4-3</code>】的结果。</p><p>请问：计算机底层如何计算得到结果的？注意不是简单地把算式列出运算，而是输入一串算式字符串直接出结果，我们要考虑数字部分和运算符，以及运算符的优先级问题等等。<strong>栈</strong>就可以解决该问题。</p><h2 id="栈的介绍"><a href="#栈的介绍" class="headerlink" title="栈的介绍"></a>栈的介绍</h2><ul><li>英文名stack</li><li>是一个<strong>先入后出</strong>(FILO First In Last  out)的有序列表</li><li>栈中元素的插入和删除只能在同一端。允许插入和删除的一端，为变化的一端，成为<strong>栈顶</strong>（top）,另一固定的一端为<strong>栈底</strong>（Bottom）</li></ul><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E6%A0%88.png" alt=""></p><h2 id="栈的应用场景"><a href="#栈的应用场景" class="headerlink" title="栈的应用场景"></a>栈的应用场景</h2><ol><li>子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的的程序中。</li><li>处理递归调用：和子程序的调用类似，知识处理存储下一个执行的地址外，也将参数、区域变量等数据存入堆栈中。</li><li>表达式的转换[中缀表达式转后缀表达式]与求实值。</li><li>二叉树的遍历。</li><li>图形的深度优先(depth-&gt;first)搜索法。</li></ol><h2 id="栈的快速入门"><a href="#栈的快速入门" class="headerlink" title="栈的快速入门"></a>栈的快速入门</h2><h3 id="数组实现栈"><a href="#数组实现栈" class="headerlink" title="数组实现栈"></a>数组实现栈</h3><p><strong>思路</strong></p><ol><li>定义一个top表示栈顶 初始为-1</li><li>入栈操作，当有数据加入栈，top++;stack[top] = data;</li><li>出栈操作，int value = stack[top]; top–,return value</li></ol><p><strong>示意图</strong></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E6%A0%88.png" alt=""></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个ArrayStack表示栈</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//栈的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] stack;<span class="comment">//数组模拟栈，存放数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> top = -<span class="number">1</span>;<span class="comment">//栈顶，初始化-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maxSize =maxSize;</span><br><span class="line">stack = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> top == maxSize-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断栈空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈 push</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="comment">//先判断栈是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">"栈满"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">top++;</span><br><span class="line">stack[top] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈pop</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈空，没有数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> value = stack[top];</span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历栈,遍历时从栈顶开始显示</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">"栈空没有数据"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= top;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">System.out.printf(<span class="string">"stack[%d]=%d\n"</span>,i,stack[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStackDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//测试栈</span></span><br><span class="line">ArrayStack  as = <span class="keyword">new</span> ArrayStack(<span class="number">4</span>);</span><br><span class="line">String key = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">boolean</span> loop = <span class="keyword">true</span>;<span class="comment">//控制是否退出</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">while</span>(loop) &#123;</span><br><span class="line">System.out.println(<span class="string">"show:表示显示栈"</span>);</span><br><span class="line">System.out.println(<span class="string">"exit:表示退出栈"</span>);</span><br><span class="line">System.out.println(<span class="string">"push:表示入栈"</span>);</span><br><span class="line">System.out.println(<span class="string">"pop:表示出栈"</span>);</span><br><span class="line">System.out.println(<span class="string">"请输出你的选择："</span>);</span><br><span class="line">key = sc.next();</span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"show"</span>:</span><br><span class="line">as.list();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"push"</span>:</span><br><span class="line">System.out.println(<span class="string">"请输入一个数"</span>);</span><br><span class="line"><span class="keyword">int</span> value = sc.nextInt();</span><br><span class="line">as.push(value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"pop"</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> res = as.pop();</span><br><span class="line">System.out.printf(<span class="string">"出栈的数据是 %d\n"</span>,res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line">sc.close();</span><br><span class="line">loop = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"程序退出！！"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表实现栈"><a href="#单链表实现栈" class="headerlink" title="单链表实现栈"></a>单链表实现栈</h3><p><strong>思路</strong></p><ol><li>链表不需要关注栈满情况。</li><li>head.next == null时表示栈空。</li><li>head.next节点表示栈顶，即：每次都在头结点后面入栈，每次也都在头结点后面出栈。</li></ol><p><strong>示意图</strong></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E6%A0%88.png" alt=""></p><p><strong>代码实现</strong></p><p>先创建一个节点类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoyNode</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line"><span class="keyword">private</span> BoyNode next;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BoyNode</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BoyNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> BoyNode <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(BoyNode next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedShack</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> BoyNode head   ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedShack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">head = <span class="keyword">new</span> BoyNode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BoyNode <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(BoyNode head)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.head = head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head.getNext() == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(BoyNode newNode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">newNode.setNext(head.getNext());</span><br><span class="line">head.setNext(newNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head.getNext()==<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"栈空，无法出栈"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">BoyNode node = head.getNext();</span><br><span class="line">head.setNext(head.getNext().getNext()) ; <span class="comment">//相当于head.next = head.next,next</span></span><br><span class="line">System.out.printf(<span class="string">"出栈BoyNode:no=%d\n"</span>,node.getNo());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head.getNext() == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"栈空，无数据展示"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">BoyNode temp = head.getNext();</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.printf(<span class="string">"BoyNode:no=%d\n"</span>,temp.getNo());</span><br><span class="line">temp = temp.getNext();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BoyNode <span class="title">getTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head.getNext() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈空，无数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head.getNext();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedStackDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">LinkedShack ls = <span class="keyword">new</span> LinkedShack();</span><br><span class="line">BoyNode b1 = <span class="keyword">new</span> BoyNode(<span class="number">1</span>);</span><br><span class="line">BoyNode b2 = <span class="keyword">new</span> BoyNode(<span class="number">2</span>);</span><br><span class="line">BoyNode b3 = <span class="keyword">new</span> BoyNode(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">ls.push(b1);</span><br><span class="line">ls.push(b2);</span><br><span class="line">ls.push(b3);</span><br><span class="line">ls.list();</span><br><span class="line">ls.pop();</span><br><span class="line">ls.list();</span><br><span class="line">System.out.println(ls.getTop().getNo());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈实现综合计算器（中缀表达式）"><a href="#栈实现综合计算器（中缀表达式）" class="headerlink" title="栈实现综合计算器（中缀表达式）"></a>栈实现综合计算器（中缀表达式）</h3><p>计算式【<code>7*2*2-5+1-5+3-3</code>】</p><p><strong>思路</strong></p><ol><li>分别创建数字栈和符号栈，以存放数和运算符</li><li>通过一个index值（索引），来遍历我们的表达式字符串</li><li>如果发现是一个数字，就直接入数栈。</li><li>如果发现扫描到的是一个符号，就分如下情况：<ol><li>如果发现当前符号栈为空，就直接入栈</li><li>如果发现当前符号栈有操作符，就进行比较<ol><li>当前操作符优先级如果小于或等于栈中操作符，就需要从数栈中pop两个数，从符号栈中pop一个符号，进行运算，得到结果，入数栈，然后把当前操作符入符号栈。</li><li>如果当前操作符优先级大于栈中操作符，则直接入符号栈。</li></ol></li></ol></li><li>当表达式扫描完毕，就顺序从数栈和符号栈中pop相应的数和符号，并运算。</li><li>最后在数栈只有一个数字，那就是表达式的结果。</li></ol><p><strong>代码实现</strong></p><p>首先改造一下上面数组实现栈，在里面加入几个方法：查看栈顶(peek)、返回运算符优先级(priority)、判断是不是一个运算符(isOper)和计算方法(cal)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStack2</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//栈的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] stack;<span class="comment">//数组模拟栈，存放数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> top = -<span class="number">1</span>;<span class="comment">//栈顶，初始化-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayStack2</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maxSize =maxSize;</span><br><span class="line">stack = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayStack2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> top == maxSize-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断栈空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈 push</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="comment">//先判断栈是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">"栈满"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">top++;</span><br><span class="line">stack[top] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈pop</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈空，没有数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> value = stack[top];</span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历栈,遍历时从栈顶开始显示</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">"栈空没有数据"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= top;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">System.out.printf(<span class="string">"stack[%d]=%d\n"</span>,i,stack[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看栈顶</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stack[top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回运算级的优先级，优先级使用数字表示，数字越大，优先级越高</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">priority</span><span class="params">(<span class="keyword">int</span> oper)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(oper == <span class="string">'*'</span> || oper==<span class="string">'/'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(oper == <span class="string">'+'</span> || oper == <span class="string">'-'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//假定目前表达式只含有加减乘除</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是不是一个运算符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOper</span><span class="params">(<span class="keyword">char</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> val==<span class="string">'*'</span> || val==<span class="string">'/'</span> || val ==<span class="string">'+'</span> || val==<span class="string">'-'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2 ,<span class="keyword">int</span> oper)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;<span class="comment">//用于存放计算结果</span></span><br><span class="line"><span class="keyword">switch</span> (oper) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">res = num1 + num2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">res = num2 - num1;<span class="comment">//注意顺序</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">res = num1 * num2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">res = num2 / num1;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现计算器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String expression = <span class="string">"5-2*3+1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建两个栈，数栈和符号栈</span></span><br><span class="line">ArrayStack2 numStack = <span class="keyword">new</span> ArrayStack2(<span class="number">10</span>);</span><br><span class="line">ArrayStack2 operStack = <span class="keyword">new</span> ArrayStack2(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//定义需要的相关变量</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;<span class="comment">//用于扫描</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> oper = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">' '</span>;<span class="comment">//每次将扫描得到的char保存到ch</span></span><br><span class="line">String keepNum = <span class="string">""</span>;<span class="comment">//用于拼接多位数</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//一次的奥expression的每个字符</span></span><br><span class="line">ch = expression.substring(index, index+<span class="number">1</span>).charAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//判断ch是什么</span></span><br><span class="line"><span class="keyword">if</span>(operStack.isOper(ch)) &#123;<span class="comment">//如果是运算符</span></span><br><span class="line"><span class="comment">//判断当前符号栈是否为空</span></span><br><span class="line"><span class="keyword">if</span>(!operStack.isEmpty()) &#123;</span><br><span class="line"><span class="comment">//如果不为空</span></span><br><span class="line"><span class="comment">/*如果当前操作符的优先级小于等于栈中操作符的优先级</span></span><br><span class="line"><span class="comment"> * 在符号栈中pop一个符号，数栈pop两个数，进行运算，然后入数栈，然后将当前操作符如符号栈</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">if</span>(operStack.priority(ch) &lt;= operStack.priority(operStack.peek())) &#123;</span><br><span class="line">num1 = numStack.pop();</span><br><span class="line">num2 = numStack.pop();</span><br><span class="line">oper = operStack.pop();</span><br><span class="line">res = numStack.cal(num1, num2, oper);</span><br><span class="line"><span class="comment">//把运算结果入数栈</span></span><br><span class="line">numStack.push(res);</span><br><span class="line"><span class="comment">//把操作符入符号栈</span></span><br><span class="line">operStack.push(ch);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果当前符号优先级大于栈中符号，就直接入栈</span></span><br><span class="line">operStack.push(ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果为空，直接加入</span></span><br><span class="line">operStack.push(ch);                                                                                    </span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果是数，则直接入数栈</span></span><br><span class="line"><span class="comment">//numStack.push(ch-48);//'1'不是1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.当处理多位数时，不能发现一个数就立即入栈</span></span><br><span class="line"><span class="comment"> * 2.在处理数时，需要向表达式的index在看一位，如果是数，就继续扫描，如果是符号就入栈</span></span><br><span class="line"><span class="comment"> * 3.因此需要定义一个字符串变量用于拼接</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">keepNum += ch;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果ch已经是最后一位，直接入栈</span></span><br><span class="line"><span class="keyword">if</span>(index == expression.length()-<span class="number">1</span>) &#123;</span><br><span class="line">numStack.push(Integer.parseInt(keepNum));</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//判断下一个是不是数</span></span><br><span class="line"><span class="keyword">if</span>(operStack.isOper(expression.substring(index+<span class="number">1</span>, index+<span class="number">2</span>).charAt(<span class="number">0</span>))) &#123;</span><br><span class="line"><span class="comment">//如果后一位是运算符，则入栈</span></span><br><span class="line">numStack.push(Integer.parseInt(keepNum));</span><br><span class="line"><span class="comment">//把keepnum清空</span></span><br><span class="line">keepNum = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让index+1并判断是否扫描到expression最后</span></span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">if</span>(index &gt;= expression.length()) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当表达式扫描完毕，就顺序从数栈和符号栈pop出相应的数和符号，并运算</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(operStack.isEmpty()) &#123;<span class="comment">//如果符号栈为空，计算结束，数栈中只有一个数字</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">num1 = numStack.pop();</span><br><span class="line">num2 = numStack.pop();</span><br><span class="line">oper = operStack.pop();</span><br><span class="line">res = numStack.cal(num1, num2, oper);</span><br><span class="line"><span class="comment">//把运算结果入数栈</span></span><br><span class="line">numStack.push(res);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> endNum = numStack.pop();</span><br><span class="line">System.out.printf(<span class="string">"表达式 %s = %d"</span>,expression,endNum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这个代码还有有bug的，有些表达式还是会错误，有负数就不准了。 ！！￣□￣｜｜</p><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="递归的概念"><a href="#递归的概念" class="headerlink" title="递归的概念"></a>递归的概念</h2><p>简单的说：递归就是方法自己调用自己，每次调用时传入不同的变量。递归有助于编程者解决复杂问题，同时可以让代码变得简洁。</p><h2 id="递归举例"><a href="#递归举例" class="headerlink" title="递归举例"></a>递归举例</h2><p><strong>打印和阶乘问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">2</span>) &#123;</span><br><span class="line">test(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> factorial(n-<span class="number">1</span>) * n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归能解决什么样的问题"><a href="#递归能解决什么样的问题" class="headerlink" title="递归能解决什么样的问题"></a>递归能解决什么样的问题</h2><ol><li>各种数学问题：8皇后问题、汉若塔、阶乘、迷宫等等</li><li>各种算法也使用了递归：快排，归并排序，二分查找，分治算法等等</li><li>将用栈解决的问题 —&gt;递归代码比较简洁</li></ol><h2 id="递归需要遵守什么样的规则"><a href="#递归需要遵守什么样的规则" class="headerlink" title="递归需要遵守什么样的规则"></a>递归需要遵守什么样的规则</h2><ol><li>执行一个方法时，就创建一个新的受保护的独立空间(栈空间)</li><li>方法的局部变量是独立的，不会互相影响</li><li>如果方法使用的是引用类型(比如数组)，就会共享该引用类型的数据</li><li>递归<strong>必须向退出递归的条件逼近</strong>，哦负责就是无限递归，出现StackOverflowError</li><li>当一个方法执行完毕或者遇到return就会返回，<strong>遵守谁调用，就将结果返回给谁</strong>，同时当方法执行完毕或者返回时，该方法也就执行完毕。</li></ol><h2 id="迷宫回溯"><a href="#迷宫回溯" class="headerlink" title="迷宫回溯"></a>迷宫回溯</h2><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E8%BF%B7%E5%AE%AB.png" alt=""></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiGong</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//先创建一个二维数组模拟迷宫</span></span><br><span class="line"><span class="comment">//地图</span></span><br><span class="line"><span class="keyword">int</span>[][] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line"><span class="comment">//使用1表示墙</span></span><br><span class="line"><span class="comment">//上下全部置1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">7</span>;i++) &#123;</span><br><span class="line">map[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">map[<span class="number">7</span>][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右全部置1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">8</span>;i++) &#123;</span><br><span class="line">map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">map[i][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置挡板</span></span><br><span class="line">map[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">map[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">"地图的情况"</span>);</span><br><span class="line"><span class="comment">//输出地图</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">8</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;<span class="number">7</span>;j++) &#123;</span><br><span class="line">System.out.print(map[i][j]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用递归回溯，给小球找路</span></span><br><span class="line">setWay(map,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//输出新的地图，小球走过后的</span></span><br><span class="line"><span class="comment">//输出地图</span></span><br><span class="line">System.out.println(<span class="string">"走过的地图--------------------"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">8</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;<span class="number">7</span>;j++) &#123;</span><br><span class="line">System.out.print(map[i][j]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用递归回溯来给小球找路</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.map表示地图</span></span><br><span class="line"><span class="comment"> * 2.i,j表示从哪里开始出发(1,1)</span></span><br><span class="line"><span class="comment"> * 3.如果小球能到（6,5）则说明通路找到</span></span><br><span class="line"><span class="comment"> * 4.约定 map[i][j] = 0时表示该点没有走过，1表示墙，2表示通路可以走  3表示该位置已经走过，但是走不通</span></span><br><span class="line"><span class="comment"> * 5.在走迷宫时需要确定一个策略：下-&gt;右-&gt;上-&gt;左，如果该点走不通，再回溯</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map  表示地图</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i  表示那个位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>找到通路返回true否则false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">setWay</span><span class="params">(<span class="keyword">int</span>[][] map,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>) &#123;<span class="comment">//说明通路已经找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(map[i][j] ==<span class="number">0</span>) &#123;<span class="comment">//如果当前这个点还没有走过</span></span><br><span class="line"><span class="comment">//按照策略走</span></span><br><span class="line">map[i][j] = <span class="number">2</span>;<span class="comment">//假定该点是可以走通的</span></span><br><span class="line"><span class="keyword">if</span>(setWay(map, i+<span class="number">1</span>, j)) &#123;<span class="comment">//向下走，行增加1</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map, i, j+<span class="number">1</span>))&#123;<span class="comment">//向右走，列加1</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map, i-<span class="number">1</span>, j)) &#123;<span class="comment">//向上走，行-1</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map, i, j-<span class="number">1</span>)) &#123;<span class="comment">//向左走，列-1</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">map[i][j] = <span class="number">3</span>;<span class="comment">//说明该点是走不通的</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//map[i][j] !=0 [1,2,3]</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">地图的情况</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line">走过的地图--------------------</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h2><h3 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h3><p>八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋旗手马克斯<em>贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能相互攻击，即：任意两个皇后都不能处于*</em>同一行、同一列或同一斜线上**，问有多少种摆法(92种).</p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li>第一个皇后先放在第一行第一列</li><li>第二个皇后放在第二行第一列、然后判断是否OK,如果不OK继续放在第二行第二列….依次把所有列都放完，找到一个合适的。</li><li>继续放第三个皇后，还是第三行的第1,2,3….列，直到第八个皇后也能放在一个不冲突的位置，算式找到了一个正确解</li><li>当得到一个正确解时，在栈回退回到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解全部得到</li><li>然后回头继续第一个皇后放到第二列，后面继续执行1-4的步骤</li></ol><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><p>说明：理论上应该创建一个二维数组来表示棋盘，但是实际上可以通过算法，用一个一维数组即可解决问题。</p><p>其中一维数组的下标表示第几行，对应位置的值，表示第几列。</p><p>例如：arr[8] = {0,4,7,5,2,6,1,3}，对应位置就是，第一行第一列、第二行第五列、第三行第八列、第四行第六列、第五行第三列、第六行第七列、第七行第二列、第八行第四列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue8</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//记录一下总共多少解法</span></span><br><span class="line"><span class="comment">//先定义一个max表示共有多少个皇后</span></span><br><span class="line"><span class="keyword">int</span> max = <span class="number">8</span>;</span><br><span class="line"><span class="comment">//定义一个数组，用于保存皇后位置的结果</span></span><br><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[max];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//测试一把</span></span><br><span class="line">Queue8 queue8 = <span class="keyword">new</span> Queue8();</span><br><span class="line">queue8.check(<span class="number">0</span>);</span><br><span class="line">System.out.printf(<span class="string">"一共有 %d 种解法"</span>,count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//放置第n个皇后</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == max) &#123;<span class="comment">//说明已经放好八个</span></span><br><span class="line">print();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//依次放入皇后，并判断是否冲突</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;max;i++) &#123;</span><br><span class="line"><span class="comment">//先把当前皇后 ,放到该行的第一列</span></span><br><span class="line">array[n] = i;</span><br><span class="line"><span class="comment">//判断当放置第n个皇后到i列时，是否冲突</span></span><br><span class="line"><span class="keyword">if</span>(judeg(n)) &#123;<span class="comment">//成立说明不冲突</span></span><br><span class="line"><span class="comment">//接着放第n+1个皇后</span></span><br><span class="line">check(n+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看当我们放置第n个皇后，就去检测该皇后是否和前面已经摆放的皇后冲突</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 表示第n+1个皇后</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judeg</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line"><span class="comment">//array[i] == array[n]判断是否在同一列，</span></span><br><span class="line"><span class="comment">// Math.abs(n-i) == Math.abs(array[n]-array[i])表示判断是否在同一斜线</span></span><br><span class="line"><span class="keyword">if</span>(array[i] == array[n] || Math.abs(n-i) == Math.abs(array[n]-array[i])) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将皇后摆放的位置打印出来</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array.length;i++) &#123;</span><br><span class="line">System.out.print(array[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是用的穷举法，需要判断1.5W次+，效率比较低。</p><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="排序算法介绍"><a href="#排序算法介绍" class="headerlink" title="排序算法介绍"></a>排序算法介绍</h2><p>排序也称排序算法(Sort Algorithm)，排序是将<strong>一组数据</strong>，依<strong>指定的顺序</strong>进行<strong>排列的过程</strong>。</p><h2 id="排序的分类"><a href="#排序的分类" class="headerlink" title="排序的分类"></a>排序的分类</h2><ol><li>内部排序：指将需要处理的所有数据加载到内部存储器(内存)中进行排序。</li><li>外部排序：数据量过大，无法全部加载到内存中，需要借助外存(文件等)进行排序。</li></ol><h2 id="常见排序算法"><a href="#常见排序算法" class="headerlink" title="常见排序算法"></a>常见排序算法</h2><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.png" alt=""></p><h2 id="时间复杂度与空间复杂度"><a href="#时间复杂度与空间复杂度" class="headerlink" title="时间复杂度与空间复杂度"></a>时间复杂度与空间复杂度</h2><p><strong>时间复杂度</strong></p><ol><li>一般情况下，算法中基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)来表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数，记做：T(n) = O(f(n))，称O(f(n))为算法的渐进时间复杂度，简称时间复杂度。</li><li>T(n)不同，但时间复杂度可能相同。如：T(n) = n^2+7n+6 与 T(n) = 3n^2+2n+2 它们的T(n)不同，但时间复杂度相同，都为O(n^2)</li><li>计算方法<ul><li>用常数1代替所有加法常数 T(n)=3n^2+7n+6 —-&gt;  T(n)=3n^2+7n+1</li><li>修改后的函数，只保留最高阶项  T(n)=3n^2+7n+1  —-&gt;     T(n)=3n^2</li><li>去除最高阶项的系数         T(n)=3n^2 —-&gt;   T(n)=n^2  —&gt;  O(n^2)</li></ul></li></ol><p><strong>空间复杂度</strong></p><ol><li><p>类似于时间复杂度的讨论，一个算法的空间复杂度定义为该算法所耗费的存储空间，它也是问题规模n的函数</p></li><li><p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如快速排序和归并排序、基数排序就属于这种情况。</p></li><li><p>在做算法分析时，主要讨论的是时间复杂度。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品(redis,memcache)和算法本质就是用<strong>空间换时间</strong>。</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2></li></ol><p>冒泡排序（Bubble Sorting） 的基本思想是：通过对待排序序列从前向后（从下标较小的元素开始）一次比较相邻元素的值，若发现逆序则交换，使值较大的元素从前向后移（从小到大排序的话），就像水底下的气泡一样逐渐往上冒。</p><p>优化：因为排序过程中，各元素不断接近自己的位置，如果一趟比较下来没有进行过交换，说明此时序列已经有序。因此要在排序过程中设置一个标志flag判断在一趟排序中，有没有发生交换，从而减少不必要的比较。</p><p><strong>代码实现</strong></p><p>首先我们先一趟一趟的排序，看其中的规律</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr =  &#123;<span class="number">3</span>,<span class="number">9</span>,-<span class="number">1</span>,<span class="number">10</span>,-<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了容易理解，我们把冒泡排序的演变过程，给大家展示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一趟排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>; j++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] =arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"第一趟排序后的数组"</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>-<span class="number">1</span>; j++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] =arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"第二趟排序后的数组"</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>-<span class="number">2</span>; j++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] =arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"第三趟排序后的数组"</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>-<span class="number">3</span>; j++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] =arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"第四趟排序后的数组"</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一趟排序后的数组</span><br><span class="line">[<span class="number">3</span>, <span class="number">-1</span>, <span class="number">9</span>, <span class="number">-2</span>, <span class="number">10</span>]</span><br><span class="line">第二趟排序后的数组</span><br><span class="line">[<span class="number">-1</span>, <span class="number">3</span>, <span class="number">-2</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">第三趟排序后的数组</span><br><span class="line">[<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">第四趟排序后的数组</span><br><span class="line">[<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>这是上面代码执行的结果，我们可以看出从小到大排序，最大的值会不断后退，直到自己的位置。因为只有五个数，所以只需要排四趟，而这四趟排序的代码，我们可以看出，其实是差不多的，仅仅有一个地方不一样。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="number">0</span>; <span class="built_in">j</span> &lt; arr.<span class="built_in">length</span><span class="number">-1</span>; <span class="built_in">j</span>++)  </span><br><span class="line"><span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="number">0</span>; <span class="built_in">j</span> &lt; arr.<span class="built_in">length</span><span class="number">-1</span><span class="number">-1</span>; <span class="built_in">j</span>++)</span><br><span class="line"><span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="number">0</span>; <span class="built_in">j</span> &lt; arr.<span class="built_in">length</span><span class="number">-1</span><span class="number">-2</span>; <span class="built_in">j</span>++)</span><br><span class="line"><span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="number">0</span>; <span class="built_in">j</span> &lt; arr.<span class="built_in">length</span><span class="number">-1</span><span class="number">-3</span>; <span class="built_in">j</span>++)</span><br></pre></td></tr></table></figure><p>这是四次for循环，里面只有判断条件不同，因此我们就可以在外面包一层循环来完成此时for循环，即四趟排序</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">            temp = arr[j];</span><br><span class="line">            arr[j] =arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样 i 的取值是  0&lt;= i &lt; 5-1  即：0,1,2,3<br>所以内部循环判断条件变为<code>j &lt; arr.length-1-i</code>这样就完成了。</p><p><strong>冒泡优化</strong></p><p>优化方法在上面已经说明白了，假如在上面的四趟排序中，第三趟中没有发生元素交换，说明每一个元素都在自己该在的位置，即：序列已经有顺序，但是，我们上面的代码并不知道这一点，它还是会继续执行第四趟排序，虽然什么都不会做，但是白白浪费了时间。</p><p>优化代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装成一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] =arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) &#123;<span class="comment">//一次交换都没有发生，说明序列已经有序</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">flag = <span class="keyword">false</span>;<span class="comment">//重置flag进行下一趟的判断</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序（select sorting） 也是一种简单的排序方法，它的基本思想是：第一次从arr[0]<del>arr[n-1]中选取最小值与arr[0]交换，第二次从arr[1]</del>arr[n-1]中选取最小值，与arr[1]进行交换，第三次从arr[2]<del>arr[n-1]中选取最小值，与arr[2]进行交换……..，第i次从arr[i-1]</del>arr[n-1]选取最小值，与arr[i-1]交换，….第n-1次冲arr[n-2]~arr[n-1]中选取最小值，与arr[n-2]交换，总共通过n-1次，得到从小到大排列的有序序列。</p><p>简单来讲就是：第一次找出最小值，与第一个元素交换位置，第二次找出次小值，与第二个元素交换位置….</p><p><strong>思路</strong></p><ol><li>创建一个变量存放最小值，刚开始假设第一个元素就是最小值</li><li>在创建一个变量存放它的位置</li><li>内层循环判断，当前元素是不是比最小值还小，如果是，那它就是最小值，记录它的值与位置，然后继续判断。</li><li>最后结束，就找到了最小值与它的位置，然后与第一个元素交换位置</li><li>所以第一次排序的结果为：第一个元素为最小值。</li><li>所以外层循环控制排序次数，第i次排序从第i个元素开始，最后结果与第i个元素交换位置</li><li>注意：如果我们一开始假设的最小值，恰好就是最小值，那么最后的交换位置操作就不需要做</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> minIndex =i;<span class="comment">//假定第一个是最小的</span></span><br><span class="line"><span class="keyword">int</span> min = arr[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j&lt;arr.length;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(min&gt;arr[j]) &#123;<span class="comment">//说明假定的最小值，并不是最小的</span></span><br><span class="line">min = arr[j];</span><br><span class="line">minIndex = j;</span><br><span class="line"><span class="comment">//相当于重置最小值及位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行交换，最小值与arr[0]交换</span></span><br><span class="line"><span class="keyword">if</span>(minIndex!=i) &#123;</span><br><span class="line">arr[minIndex] = arr[i];</span><br><span class="line">arr[i] = min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"第"</span>+(i+<span class="number">1</span>)+<span class="string">"轮后"</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">排序前</span><br><span class="line">[<span class="number">101</span>, <span class="number">34</span>, <span class="number">119</span>, <span class="number">1</span>]</span><br><span class="line">第<span class="number">1</span>轮后</span><br><span class="line">[<span class="number">1</span>, <span class="number">34</span>, <span class="number">119</span>, <span class="number">101</span>]</span><br><span class="line">第<span class="number">2</span>轮后</span><br><span class="line">[<span class="number">1</span>, <span class="number">34</span>, <span class="number">119</span>, <span class="number">101</span>]</span><br><span class="line">第<span class="number">3</span>轮后</span><br><span class="line">[<span class="number">1</span>, <span class="number">34</span>, <span class="number">101</span>, <span class="number">119</span>]</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><ul><li>插入排序属于内部排序法，是对于欲排序的元素以插入的方式找寻该元素适当的位置，已达到排序的目的。</li><li>插入排序的思想是：<strong>把n个待排序的元素看成一个有序表和一个无序表</strong>，开始时，有序表中只包含一个元素，无序表n-1个元素，排序过程中每次从无序表中取出第一个元素，从它往前，依次与有序表元素进行比较，将他插入到有序表中的适当位置，是指成为新的有序表。</li></ul><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.png" alt=""></p><p><strong>代码实现</strong></p><p>思路：</p><ol><li>因为第一个元素默认在有序表中，所从第二个元素开始，往前判断，找到它的位置</li><li>先把它用一个变量存起来，并且用一个变量记录索引从哪开始往前判断</li><li>假设这里是从小到大排序，如果当前这个数，比它前面的数小，那么它应该向前移动</li><li>这里使用前面的元素向后覆盖，已达到向前移动的效果。（因为我已将找位置的元素保存起来了）</li><li>索引在移动一个元素后要–，因为要比较前一个到前n个，索引还要&gt;=0,防止越界</li><li>通过上面的循环判断并移动覆盖，最后记录索引的变量的值，就是要插入位置的前一个位置。因为要插入的数要比它前面的数小，而循环结束时，要插入的数比它前面的数大了，所以结束，但这时索引变量指向要插入位置的前面。</li><li>进行赋值操作<code>arr[insertIndex + 1] = insertVal</code></li><li>以上是一次排序，因此需要外层循环，从第二个元素开始，到最后，都要去找他们自己的位置</li><li>所以外层<code>for(int i = 1;i&lt;arr.length;i++)</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> insertVal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> insertIndex=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">insertVal = arr[i];</span><br><span class="line">insertIndex = i-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(insertIndex&gt;=<span class="number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class="line">arr[insertIndex + <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">insertIndex--;</span><br><span class="line">&#125;</span><br><span class="line">arr[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line">System.out.println(<span class="string">"第"</span>+i+<span class="string">"轮后"</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h3 id="简单插入排序可能存在的问题"><a href="#简单插入排序可能存在的问题" class="headerlink" title="简单插入排序可能存在的问题"></a>简单插入排序可能存在的问题</h3><p>数组arr=[2,3,4,5,6,1]这时需要插入的数 1 最小，那么它前面的2,3,4,5,6都需要往后移一位。</p><p>结论：当<strong>插入的数较小</strong>时（这里指从小到大排序），<strong>后移次数明显增多</strong>，效率会降低</p><h3 id="希尔排序介绍"><a href="#希尔排序介绍" class="headerlink" title="希尔排序介绍"></a>希尔排序介绍</h3><p>希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种<strong>插入排序</strong>，它是简单插入排序经过改进之后的一个<strong>更高效的版本</strong>，也称为<strong>缩小增量排序</strong>。</p><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序，随着增量追歼减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p><h3 id="希尔排序示意图"><a href="#希尔排序示意图" class="headerlink" title="希尔排序示意图"></a>希尔排序示意图</h3><p>注意这个图是偶数个元素，让人容易认为两两一组，这里说一下奇数个元素，其实分组是根据步长来分的，只要你走过这个步长，还有元素那么你们就是一组，这可以根据下面第二轮步长为2可以看出，往后数1,2只要有2你们就是一组，从3开始1,2报数，报2的就为一组。</p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E7%A4%BA%E6%84%8F%E5%9B%BE.png" style="zoom: 80%;" /><h3 id="希尔排序——交换法实现"><a href="#希尔排序——交换法实现" class="headerlink" title="希尔排序——交换法实现"></a>希尔排序——交换法实现</h3><p>首先方便理解，我们先一步一步去分析它的排序步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">shellSortStep(arr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先一步一步分析</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSortStep</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//希尔排序第一轮</span></span><br><span class="line">    <span class="comment">//因为第一轮排序，是将10个数据分成了五组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">5</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line"><span class="comment">//遍历各组中，所有的元素，共有五组，每组有两个元素，步长是5</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j= i-<span class="number">5</span> ;j&gt;=<span class="number">0</span>;j-=<span class="number">5</span>) &#123;</span><br><span class="line"><span class="comment">//如果当前这个元素，大于 加上步长后的那个元素 ，说明交换（从小到大排序）</span></span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">5</span>]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">5</span>];</span><br><span class="line">arr[j+<span class="number">5</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"希尔排序一轮后="</span>+ Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序第2轮</span></span><br><span class="line">    <span class="comment">//因为第2轮排序，五组/2=2组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line"><span class="comment">//遍历各组中，所有的元素，共有五组，每组有两个元素，步长是5</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j= i-<span class="number">2</span> ;j&gt;=<span class="number">0</span>;j-=<span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//如果当前这个元素，大于 加上步长后的那个元素 ，说明交换（从小到大排序）</span></span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">2</span>]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">2</span>];</span><br><span class="line">arr[j+<span class="number">2</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"希尔排序二轮后="</span>+ Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序第3轮</span></span><br><span class="line">    <span class="comment">//因为第3轮排序，2/2=1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line"><span class="comment">//遍历各组中，所有的元素，共有五组，每组有两个元素，步长是5</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j= i-<span class="number">1</span> ;j&gt;=<span class="number">0</span>;j-=<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//如果当前这个元素，大于 加上步长后的那个元素 ，说明交换（从小到大排序）</span></span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"希尔排序三轮后="</span>+ Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">希尔排序一轮后=[<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>]</span><br><span class="line">希尔排序二轮后=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>]</span><br><span class="line">希尔排序三轮后=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p><strong>交换法整合</strong></p><p>思路：这里其实就是根据步长去分组，然后在各个组内进行交换排序，由于元素交换也是要耗费时间的，所以交换法实现希尔排序效率较低</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> gap = arr.length/<span class="number">2</span>;gap&gt;<span class="number">0</span>;gap/=<span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = gap;i&lt;arr.length;i++) &#123;</span><br><span class="line"><span class="comment">//遍历各组中，所有的元素，共有gap组，每组有n个元素，步长是gap</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j= i-gap ;j&gt;=<span class="number">0</span>;j-=gap) &#123;</span><br><span class="line"><span class="comment">//如果当前这个元素，大于 加上步长后的那个元素 ，说明交换（从小到大排序）</span></span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j+gap]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j+gap];</span><br><span class="line">arr[j+gap] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="希尔排序——移位法实现"><a href="#希尔排序——移位法实现" class="headerlink" title="希尔排序——移位法实现"></a>希尔排序——移位法实现</h3><p>说明：这里根据步长分组后要进行插入，其实这里是每个组按顺序一步一步来，不是说先把第一组全都插入排序完，然后第二组，第三组，不是这样的。</p><p>插入排序前面讲过了，从第二个开始往前比较，这里就是从每组的第二个开始往各组前面得元素比较。</p><p>先是第一组第二个，然后第二组第二个…第n组第二个；动作都是往前插入</p><p>然后第一组第三个，第二组第三个…第n组第三个；</p><p>….</p><p>第一组第n个，第二组第n个…第n组第n个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort2</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> gap = arr.length/<span class="number">2</span>;gap&gt;<span class="number">0</span>;gap/=<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">//从第gap个元素,逐个对其所在的组进行直接插入</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = gap;i&lt;arr.length;i++) &#123;</span><br><span class="line">            j = i;<span class="comment">//保存当前但插入元素的位置</span></span><br><span class="line">            temp = arr[j];<span class="comment">//保存当前待插入元素的值</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j] &lt;arr[j - gap]) &#123;</span><br><span class="line">                <span class="keyword">while</span>(j - gap &gt;=<span class="number">0</span> &amp;&amp; temp &lt; arr[j - gap])&#123;</span><br><span class="line">                    <span class="comment">//移动</span></span><br><span class="line">                    arr[j] = arr[j - gap];</span><br><span class="line">                    j -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//当退出while循环后，就给temp找到了插入的位置</span></span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序是对<strong>冒泡排序</strong>的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后在按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，一次大袋整个数据变成有序序列。</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.png" alt=""></p><p><strong>代码实现</strong></p><p>思路说明：</p><ol><li><p>首先记录初始的左下标，右下标，并记录中间值，创建temp临时变量用于交换数据</p></li><li><p>因为左右指针都往中间靠拢，所以进入循环的条件就是左指针&lt; 右指针</p></li><li><p>循环开始，首先在左边找到一个大于或等于中值的数，如果左边都小于中值，那么找到的就会是中值本身。</p></li><li><p>然后在右边找到一个小于或等于中值的数，如果右边都大于中值，那么找到的就会是中值本身。</p></li><li><p>找到这两个数以后，我要判断一下，你们找的是不是都是中值，也就是左指针和右指针都在中值上</p><ol><li>如果都在中值上，就说明左边全部小于中值，右边全部大于中值，此时结束循环。</li><li>如果不是，那么我就要进行交换，交换找到的两个元素的位置</li><li>交换完毕后，我还要判断一下，你们左右指针所找到的这两个数，虽然不是中值本身，但有没有可能是和中值相等，如果和中值想等的话，那我下次循环继续往下找的时候，那找到的就都是你们了，死循环在这里了</li><li>所以如果有和中值相等的，如果左指针指向的数等于中值，那就往左移一位，同理右指针如果等于中值，那就往右移一位<ul><li>其实这里移位的时候左右两个指针都等于中值，然后两边都移位就可以，但这样写问题也不大</li></ul></li></ol></li><li><p>以上做完后，是一轮排序，此时还需判断，这时候左右指针是不是相等，如果相等则要把他们错开。</p></li><li><p>向左向右递归进行</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;-<span class="number">9</span>,<span class="number">78</span>,<span class="number">0</span>,<span class="number">23</span>,-<span class="number">567</span>,<span class="number">70</span>&#125;;</span><br><span class="line">quickSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"arr="</span>+Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = left;<span class="comment">//左下标</span></span><br><span class="line"><span class="keyword">int</span> r = right;<span class="comment">//右下标</span></span><br><span class="line"><span class="keyword">int</span> pivot = arr[(left+right) / <span class="number">2</span>];<span class="comment">//中轴值</span></span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;<span class="comment">//临时变量，交换时使用</span></span><br><span class="line"><span class="comment">//while循环的目的，是比pivot小的，放到它的左边，比pivot大的放到右边（从小到大排序）</span></span><br><span class="line"><span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line"><span class="comment">//在pivot左边一直找，找到一个大于或者等于pivot的值，才退出</span></span><br><span class="line"><span class="keyword">while</span>(arr[l] &lt; pivot) &#123;</span><br><span class="line">l+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从右边一直找，找一个小于或等于pivot的值</span></span><br><span class="line"><span class="keyword">while</span>(arr[r] &gt; pivot) &#123;</span><br><span class="line">r--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果l&gt;=r成立，说明pivot左右两边的值，已经按照，左边全部小于等于pivot，右边全部大于等于pivot</span></span><br><span class="line"><span class="keyword">if</span>(l &gt;= r) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp = arr[l];</span><br><span class="line">arr[l] = arr[r];</span><br><span class="line">arr[r] = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果交换完后，发现arr[l] = pivot值,r--，前移,如果不移动，就会一直找这个数了。</span></span><br><span class="line"><span class="keyword">if</span>(arr[l] == pivot) &#123;</span><br><span class="line">r--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果交换完后，发现arr[r] = pivot值,l++，后移</span></span><br><span class="line"><span class="keyword">if</span>(arr[r] == pivot) &#123;</span><br><span class="line">l++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果 l==r 必须l++,r--否则会栈溢出</span></span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">l++;</span><br><span class="line">r--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向左递归</span></span><br><span class="line"><span class="keyword">if</span>(left &lt; r) &#123;</span><br><span class="line">quickSort(arr, left, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向右递归</span></span><br><span class="line"><span class="keyword">if</span>(right&gt;l) &#123;</span><br><span class="line">quickSort(arr, l, right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序是利用归并的思想实现的排序方法，该算法采用经典的<strong>分治策略</strong>。（分治法将温蒂分成一些小问题然后递归求解，而治阶段姿势将分的阶段得到的各答案“修补”在一起，即分而治之）</p><h3 id="归并排序思想示意图1"><a href="#归并排序思想示意图1" class="headerlink" title="归并排序思想示意图1"></a>归并排序思想示意图1</h3><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%88%86%E6%B2%BB.png" alt=""></p><h3 id="归并排序思想示意图2–合并相邻有序子序列"><a href="#归并排序思想示意图2–合并相邻有序子序列" class="headerlink" title="归并排序思想示意图2–合并相邻有序子序列"></a>归并排序思想示意图2–合并相邻有序子序列</h3><p>我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将[4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，来看一下实现步骤</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%90%88%E5%B9%B6%E7%9B%B8%E9%82%BB%E5%AD%90%E5%BA%8F%E5%88%97%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><p>首先我们要先写一个合并代码，因为分治中，分其实没做什么事情，就是把它们分开，重要的是治。</p><h4 id="合并方法"><a href="#合并方法" class="headerlink" title="合并方法"></a>合并方法</h4><p><strong>思路</strong>：</p><ol><li><p>首先要确定，我们所传入的参数。</p><ul><li>待排序数组arr是肯定要传入的。</li><li>左边序列的初始索引 left</li><li>中间索引 mid,这个参数是因为，要确定右边序列的初始索引，mid+1，和左边序列的最后mid</li><li>右边索引 right 右边序列的最后</li><li>还要有临时数组temp，所以归并排序是比较耗空间的。</li></ul></li><li><p>创建临时变量 t 表示temp的当前位置，因为后面要往temp里放元素</p></li><li><p>创建变量i = left用于记录左边初始索引，j=mid+1用于记录右边初始索引</p></li><li><p>然后就要把左右两个序列的值，放到temp中</p><ol><li>应该是左边第一个元素与右边第一个元素比较，如果左边小于等于右边，那么左边进temp(这里规定从小到大排序)。</li><li>这时左边序列第一个元素处理完毕后，左边索引要后移，i++;同时temp也要后移一位t++;</li><li>反之，左边大于右边，就把右边放入temp，j++;t++</li><li>循环结束的条件就是其中一组序列，没数据了，即：i&gt;mid说明左边没了，j&gt;right说明右边没了</li></ol></li><li><p>这时候我们还要把其中还有剩余数据的序列中的数据依次加入temp(因为序列本身有序)</p></li><li><p>最后全部放到temp后，要把temp中的数据copy到原数组arr的对应位置</p><ol><li><p>先令t =0;使其回到temp序列的最头上</p></li><li><p>然后在 left到right范围内，将temp的值赋给arr</p><p><strong>注意</strong>：这里的copy操作一定要好好理解一下，结合上方示意图，并不是每次都copy整个数组，最后才是copy的整个数组。</p></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合并方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left 左边有序序列的初始索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 右边索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mid 中间索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> temp 做中转的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> mid, <span class="keyword">int</span> right,<span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = left;<span class="comment">// 初始化 i ，有序序列的初始索引</span></span><br><span class="line"><span class="keyword">int</span> j = mid+<span class="number">1</span>;<span class="comment">//因为除以二是在右边索引的前一个位置，所以+1   右边有序序列的初始索引</span></span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;<span class="comment">//t是指向temp数组的当前索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//《一》</span></span><br><span class="line"><span class="comment">//先把左右两边(已经有序)的数据，按照规则填充到temp数组</span></span><br><span class="line"><span class="comment">//直到左右两边的有序序列，有一方处理完毕为止。</span></span><br><span class="line"><span class="keyword">while</span>(i &lt;=mid &amp;&amp; j&lt;=right) &#123;<span class="comment">//继续</span></span><br><span class="line"><span class="keyword">if</span>(arr[i]&lt;=arr[j]) &#123; <span class="comment">//左边小于右边</span></span><br><span class="line"><span class="comment">//把左边放入temp，temp当前位置后移一位，左边序列也后移一位</span></span><br><span class="line">temp[t] = arr[i];</span><br><span class="line">i++;</span><br><span class="line">t++;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">temp[t] = arr[j];</span><br><span class="line">j++;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;二&gt;</span></span><br><span class="line"><span class="comment">//把有剩余数据的一边的数据一次全部填充到temp</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid) &#123;<span class="comment">//说明左边的有序序列还有剩余，就全部填充到temp</span></span><br><span class="line">temp[t] = arr[i];</span><br><span class="line">t++;</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(j&lt;=right) &#123;<span class="comment">//说明有边的有序序列还有剩余，就全部填充到temp</span></span><br><span class="line">temp[t] = arr[j];</span><br><span class="line">t++;</span><br><span class="line">j++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;三&gt;</span></span><br><span class="line"><span class="comment">//将temp数组中的元素拷贝到arr</span></span><br><span class="line"><span class="comment">//并不是每次都拷贝所有的</span></span><br><span class="line">t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tempLeft = left;<span class="comment">//</span></span><br><span class="line"><span class="keyword">while</span>(tempLeft &lt;= right) &#123; <span class="comment">//第一次合并，tempLeft= 0 ，right= 1</span></span><br><span class="line">arr[tempLeft] = temp[t];</span><br><span class="line">t += <span class="number">1</span>;</span><br><span class="line">tempLeft+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分-合"><a href="#分-合" class="headerlink" title="分+合"></a>分+合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分+合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left &lt; right) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;<span class="comment">//中间索引</span></span><br><span class="line"><span class="comment">//向左递归进行分解</span></span><br><span class="line">mergeSort(arr, left, mid, temp);</span><br><span class="line"><span class="comment">//向右递归</span></span><br><span class="line">mergeSort(arr, mid+<span class="number">1</span>, right, temp);</span><br><span class="line"><span class="comment">//到合并</span></span><br><span class="line">merge(arr,left,mid,right,temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实通过上方示意图1也能看出，我先进行左递归，也就是分解左边，等分到最后，分不动了。然后我又去分解右边，等右边也分不动了，就开始合并。</p><p><strong>也就是最后分完的，最先合并，因为递归要压栈。</strong></p><p>这里的过程还是比较难理解的，最好debug看一下，可以加深理解。</p><p>最后测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];<span class="comment">//临时数组</span></span><br><span class="line">mergeSort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>,temp);</span><br><span class="line">System.out.println(<span class="string">"归并排序后="</span>+Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><ol><li>基数排序（radixSort）属于“分配式排序”，又称“桶子法”。顾名思义，他是通过键值的各个位的值，将要排序的元素分配至某些“桶”中，达到排序的作用</li><li>基数排序是属于稳定的排序，基数排序法是效率高的稳定性排序法</li><li>基数排序是桶排序的扩展</li><li>基数排序是1887年赫尔曼.何乐礼发明的。它是这样实现的：将整数按位数切割成不同的数字，然后按每个位数分别比较。</li></ol><h3 id="基数排序的基本思想"><a href="#基数排序的基本思想" class="headerlink" title="基数排序的基本思想"></a>基数排序的基本思想</h3><p>将所有带比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行依次排序。这样从最低位排序一直到最高位排序完成后，数列就变成立一个有序序列。</p><h3 id="基数排序示意图"><a href="#基数排序示意图" class="headerlink" title="基数排序示意图"></a>基数排序示意图</h3><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F1-2.png" alt=""></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F3.png" alt=""></p><h3 id="基数排序代码实现"><a href="#基数排序代码实现" class="headerlink" title="基数排序代码实现"></a>基数排序代码实现</h3><p>测试数组：<code>int arr[] = {53,3,542,748,14,214};</code></p><p>首先按步骤一步一步来演示</p><p><strong>步骤说明</strong></p><ol><li>首先我们要创建桶，0-9一共十个桶，这样用十个一维数组来表示。桶的大小，为了防止溢出，只能是数组的长度了，咱也没办法，万一数据的某一位都是一个数呢！</li><li>创建一个数组，用于记录每个桶内有效数据个数</li><li>然后我们就可以开始遍历整个数组，取出对应位数的元素，然后放到对应的桶中，对应有效数据+1</li><li>遍历完成后就可以按照桶的顺序，从桶里面把数据拿出来放到原数组中<ol><li>这时，先定义index=0用于记录原数组的第几个元素</li><li>不断取出数据放到index所指向的位置</li><li>每放一个，index就+1</li><li>其中当一个桶中的有效数据都拿出来后，我们要把记录有效数据的值变为0，因为下一轮还需要它来统计</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">radixSortStep</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一轮（针对个位）</span></span><br><span class="line"><span class="comment">//定义一个二维数组，表示十个桶，每个桶就是一个一维数组</span></span><br><span class="line"><span class="comment">/*二维数组包含十个一维数组，为了防止在数的时候数据溢出，我们每个一维数组（桶）大小定为arr.length</span></span><br><span class="line"><span class="comment"> * 明显基数排序是使用空间换时间的经典算法</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">int</span>[][] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line"><span class="comment">//为了记录每个桶中实际存放了多少个数据，我们定义一个一维数组来记录各个桶每次放入的数据个数</span></span><br><span class="line"><span class="keyword">int</span>[] bucketElementCounts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;arr.length;j++) &#123;</span><br><span class="line"><span class="comment">//取出每个元素的个位</span></span><br><span class="line"><span class="keyword">int</span> digitOfElement = arr[j] % <span class="number">10</span>;</span><br><span class="line"><span class="comment">//放到对应的桶中</span></span><br><span class="line">bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];</span><br><span class="line">bucketElementCounts[digitOfElement]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照桶的顺序，取出来</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//遍历每一个桶</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k= <span class="number">0</span>;k&lt;bucket.length;k++) &#123;</span><br><span class="line"><span class="comment">//如果桶中有数据，我们才放入原数组</span></span><br><span class="line"><span class="keyword">if</span>(bucketElementCounts[k] != <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="comment">//循环该桶，即第k个桶，即第k个一维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>;l&lt;bucketElementCounts[k];l++) &#123;</span><br><span class="line"><span class="comment">//取出元素，放入到arr</span></span><br><span class="line">arr[index] = bucket[k][l];</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用完后置零bucketElementCounts[k]=0，有效个数下一轮要重新统计</span></span><br><span class="line">bucketElementCounts[k]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"第一轮，对位的排序处理 arr="</span>+Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二轮*****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;arr.length;j++) &#123;</span><br><span class="line"><span class="comment">//取出每个元素的个位</span></span><br><span class="line"><span class="keyword">int</span> digitOfElement = arr[j] /<span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line"><span class="comment">//放到对应的桶中</span></span><br><span class="line">bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];</span><br><span class="line">bucketElementCounts[digitOfElement]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照桶的顺序，取出来</span></span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历每一个桶</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k= <span class="number">0</span>;k&lt;bucket.length;k++) &#123;</span><br><span class="line"><span class="comment">//如果桶中有数据，我们才放入原数组</span></span><br><span class="line"><span class="keyword">if</span>(bucketElementCounts[k] != <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="comment">//循环该桶，即第k个桶，即第k个一维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>;l&lt;bucketElementCounts[k];l++) &#123;</span><br><span class="line"><span class="comment">//取出元素，放入到arr</span></span><br><span class="line">arr[index] = bucket[k][l];</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bucketElementCounts[k]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"第二轮，对十位的排序处理 arr="</span>+Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三轮*****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;arr.length;j++) &#123;</span><br><span class="line"><span class="comment">//取出每个元素的个位</span></span><br><span class="line"><span class="keyword">int</span> digitOfElement = arr[j] /<span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line"><span class="comment">//放到对应的桶中</span></span><br><span class="line">bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];</span><br><span class="line">bucketElementCounts[digitOfElement]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照桶的顺序，取出来</span></span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历每一个桶</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k= <span class="number">0</span>;k&lt;bucket.length;k++) &#123;</span><br><span class="line"><span class="comment">//如果桶中有数据，我们才放入原数组</span></span><br><span class="line"><span class="keyword">if</span>(bucketElementCounts[k] != <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="comment">//循环该桶，即第k个桶，即第k个一维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>;l&lt;bucketElementCounts[k];l++) &#123;</span><br><span class="line"><span class="comment">//取出元素，放入到arr</span></span><br><span class="line">arr[index] = bucket[k][l];</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bucketElementCounts[k]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"第三轮，对百位的排序处理 arr="</span>+Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>发现规律从而整合</strong></p><p>思路：这里我们从上面发现，排序次数与最大值的位数有关，所以我们先求出最大值的位数，用它来确定外层循环的次数。然后在取余时加一个变量n，每次循环n都乘以10，这样元素/n%10就能做到，第一轮取个位，第二轮取十位，以此类推。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="comment">//先得到数组中最大数的位数</span></span><br><span class="line"><span class="keyword">int</span> max = arr[<span class="number">0</span>];<span class="comment">//假设第一个数就是最大数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&gt;max) &#123;</span><br><span class="line">max=arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//得到最大数是几位数</span></span><br><span class="line"><span class="keyword">int</span> maxLength=(max+<span class="string">""</span>).length();</span><br><span class="line"><span class="comment">//十个桶</span></span><br><span class="line"><span class="keyword">int</span>[][] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line"><span class="comment">//为了记录每个桶中实际存放了多少个数据，我们定义一个一维数组来记录各个桶每次放入的数据个数</span></span><br><span class="line"><span class="keyword">int</span>[] bucketElementCounts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//使用循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,n=<span class="number">1</span>;i&lt;maxLength;i++,n*=<span class="number">10</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;arr.length;j++) &#123;</span><br><span class="line"><span class="comment">//取出每个元素的个位</span></span><br><span class="line"><span class="keyword">int</span> digitOfElement = arr[j] /n % <span class="number">10</span>;</span><br><span class="line"><span class="comment">//放到对应的桶中</span></span><br><span class="line">bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];</span><br><span class="line">bucketElementCounts[digitOfElement]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照桶的顺序，取出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历每一个桶</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k= <span class="number">0</span>;k&lt;bucket.length;k++) &#123;</span><br><span class="line"><span class="comment">//如果桶中有数据，我们才放入原数组</span></span><br><span class="line"><span class="keyword">if</span>(bucketElementCounts[k] != <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="comment">//循环该桶，即第k个桶，即第k个一维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>;l&lt;bucketElementCounts[k];l++) &#123;</span><br><span class="line"><span class="comment">//取出元素，放入到arr</span></span><br><span class="line">arr[index] = bucket[k][l];</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用完后置零bucketElementCounts[k]=0，有效个数下一轮要重新统计</span></span><br><span class="line">bucketElementCounts[k]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">"第"</span>+(i+<span class="number">1</span>)+<span class="string">"轮，对位的排序处理 arr="</span>+Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基数排序说明"><a href="#基数排序说明" class="headerlink" title="基数排序说明"></a>基数排序说明</h3><ol><li>基数排序是对传统排序的扩展，速度很快。</li><li>技术排序是经典的空间换时间的方式，占用内存很大，当对海量数据排序时，容易造成OutOfMenoryError</li><li>基数排序是稳定的【稳定的意思是，原来的数比后面的数小，那么操作之后，它们谁在前谁在后还是不变】</li><li>有负数的数组，我们不用基数排序来排序，如果要支持负数，我的思路时，找出最小值负数，所有的数都减去这个数，这样序列就都变为正了，最后怕排序完，所有的数再加上这个负数。</li></ol><h2 id="常用排序算法总结和对比"><a href="#常用排序算法总结和对比" class="headerlink" title="常用排序算法总结和对比"></a>常用排序算法总结和对比</h2><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%9B%BE%E6%AF%94%E8%BE%83.png" alt=""></p><p><strong>相关术语解释</strong></p><ol><li>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b前面</li><li>内排序：所有排序操作都在内存中完成</li><li>外排序：数据量巨大，把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行</li><li>时间复杂度：算法执行所耗费的时间</li><li>空间复杂度：运行完一个程序所需内存的大小</li><li>n:数据规模</li><li>k:“桶”的个数</li><li>In-place:不占用额外内存</li><li>Out-place:占用额外内存</li></ol><h1 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h1><h2 id="查找算法介绍"><a href="#查找算法介绍" class="headerlink" title="查找算法介绍"></a>查找算法介绍</h2><p>在Java中，我们常用的查找算法有四种：</p><ol><li>顺序查找</li><li>二分查找/折半查找</li><li>差值查找</li><li>斐波那契查找</li></ol><h2 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h2><p>废话不多说，直接上代码，这里找到就返回位置，找不到返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">seqSearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]==value) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><ol><li>首先二分查找的前提是：序列有序，从小到大或从大到小</li><li>以从小到大为例：二分查找先从中间开始找，如果中间值大于要找的值，说明要找的值位于左边，反之，位于右边</li><li>然后不断重复查找过程，直到找到或找不到</li></ol><p><strong>代码1</strong></p><p>这里找到就返回，也就是说就算有重复的，那么也只能返回一个值的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left 左边索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 右边索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> findVal 要查找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果找到，返回下标。找不到返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binartSearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> findVal)</span> </span>&#123;</span><br><span class="line"><span class="comment">//从小到大排序的序列中找</span></span><br><span class="line"><span class="comment">//当left&gt;right时，说明递归整个数组，但是没有找到</span></span><br><span class="line"><span class="keyword">if</span>(left&gt;right) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) /<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> midValue=arr[mid];</span><br><span class="line"><span class="keyword">if</span>(findVal &gt; midValue) &#123;<span class="comment">//向右递归</span></span><br><span class="line"><span class="keyword">return</span> binartSearch(arr, mid+<span class="number">1</span>, right, findVal);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(findVal &lt; midValue)&#123;<span class="comment">//向左递归</span></span><br><span class="line"><span class="keyword">return</span> binartSearch(arr, left, mid-<span class="number">1</span>, findVal);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码2</strong></p><p>这里要把所有满足条件的位置都找出来，放到集合中，返回集合。没有就返回空集合</p><p>思路：</p><p>在上面代码找到的基础上，向两边判断，是不是跟我这个值一样，如果一样加入集合。</p><p>因为二分法，从中间开始找，所以位于中间的数，肯定先被找到。又因为序列有序，所以符合条件的值是连续的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">binartSearch2</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> findVal)</span> </span>&#123;</span><br><span class="line"><span class="comment">//从小到大排序的序列中找</span></span><br><span class="line"><span class="comment">//当left&gt;right时，说明递归整个数组，但是没有找到</span></span><br><span class="line"><span class="keyword">if</span>(left&gt;right) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) /<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> midValue=arr[mid];</span><br><span class="line"><span class="keyword">if</span>(findVal &gt; midValue) &#123;<span class="comment">//向右递归</span></span><br><span class="line"><span class="keyword">return</span> binartSearch2(arr, mid+<span class="number">1</span>, right, findVal);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(findVal &lt; midValue)&#123;<span class="comment">//向左递归</span></span><br><span class="line"><span class="keyword">return</span> binartSearch2(arr, left, mid-<span class="number">1</span>, findVal);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">ArrayList&lt;Integer&gt; resIndexlist = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">int</span> temp = mid-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp&lt;<span class="number">0</span> || arr[temp]!=findVal) &#123;<span class="comment">//找到最前面，或者找到不是findVal就可以退出了</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">resIndexlist.add(temp);</span><br><span class="line">temp-=<span class="number">1</span>;<span class="comment">//temp左移，继续寻找</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//别忘了把中间的放进去</span></span><br><span class="line">resIndexlist.add(mid);</span><br><span class="line"><span class="comment">//向右边扫描</span></span><br><span class="line">temp = mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp&gt;arr.length || arr[temp]!=findVal ) &#123;<span class="comment">//向右找到最后，或找到一个不是的，就退出</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//否则放到集合中</span></span><br><span class="line">resIndexlist.add(temp);</span><br><span class="line">temp+=<span class="number">1</span>;<span class="comment">//temp右移继续寻找</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resIndexlist;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h2><p>插值查找类似于二分查找，其中它们不同的是mid的求法。</p><p>看一个案例：arr[1-100] 这是一个有1-100元素的数组，如果我用二分查找，查1时，这时候查找顺序为【50,25,12,6,3,1】 因为每次都取的是中间位置的数进行比较mid = (left+right)/2=left+(right-left)* 1/2</p><p>而插值查找<strong>mid = left + (right-left) * (findValue-arr[left]) / (arr[right]-arr[left])</strong></p><p>它是自适应的查找，此时我们可以看看找1的过程，首先mid=0+(99-0)*(1-1)/(100-1)=0+0=0,arr[0]=1完成</p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 传入的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left 左索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 右索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> findValue 查找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 找到返回对应下标，没有找到返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">insertValueSearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> findValue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left &gt; right || findValue &lt; arr[<span class="number">0</span>] || findValue &gt;arr[arr.length-<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求出mid</span></span><br><span class="line"><span class="keyword">int</span> mid = left + (right - left) * (findValue-arr[left]) / (arr[right]-arr[left]);</span><br><span class="line"><span class="keyword">int</span> midVal = arr[mid];</span><br><span class="line"><span class="comment">//如果查找的值大于定位的值，说明向右递归（序列从小到大）</span></span><br><span class="line"><span class="keyword">if</span>(findValue &gt; arr[mid]) &#123;</span><br><span class="line"><span class="keyword">return</span> insertValueSearch(arr, mid+<span class="number">1</span>, right, findValue);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(findValue &lt; arr[mid]) &#123;</span><br><span class="line"><span class="keyword">return</span> insertValueSearch(arr, left, mid-<span class="number">1</span>, findValue);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ol><li>对于数据量较大，关键字分步比较均匀的查找表来说，采用插值查找，速度较快</li><li>关键词分布不均匀的情况下，该方法不一定比折半查找要好</li></ol><h2 id="斐波那契查询"><a href="#斐波那契查询" class="headerlink" title="斐波那契查询"></a>斐波那契查询</h2><p>没整明白，下把代码放这里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilonacciSearch</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> maxSize = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr= &#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">89</span>,<span class="number">1000</span>,<span class="number">1234</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> index = filSearch(arr, <span class="number">89</span> );</span><br><span class="line">System.out.println(index);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为后面我们mid=low+F(k-1)-1，需要使用到斐波那契数列，因此我们需要先获取到一个斐波那契数列</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] fib() &#123;</span><br><span class="line"><span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;maxSize;i++) &#123;</span><br><span class="line">f[i] = f[i-<span class="number">1</span>] + f[i-<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写斐波那契查找算法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 找的数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回对应下标，没有返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">filSearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> hight = arr.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;<span class="comment">//表示斐波那契分割数值的下标</span></span><br><span class="line"><span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> f[] = fib();<span class="comment">//获取斐波那契数列</span></span><br><span class="line"><span class="comment">//获取到斐波那契分割数值的下标</span></span><br><span class="line"><span class="keyword">while</span>(hight &gt; f[k]-<span class="number">1</span>) &#123;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为f[k]可能大于数组的长度，因此需要使用Arrays类，构造一个新的数组，并指向arr</span></span><br><span class="line"><span class="keyword">int</span>[] temp = Arrays.copyOf(arr, f[k]);<span class="comment">//不足的部分使用零填充</span></span><br><span class="line"><span class="comment">//实际上需求使用a数组最后的数填充temp</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = hight +<span class="number">1</span>;i&lt;temp.length;i++) &#123;</span><br><span class="line">temp[i] = arr[hight];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(low &lt;= hight) &#123;</span><br><span class="line">mid = low + f[k-<span class="number">1</span>]-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(key&lt;temp[mid]) &#123;<span class="comment">//说明向数组的前面查找</span></span><br><span class="line">hight = mid -<span class="number">1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.全部元素 = 前面+后面元素</span></span><br><span class="line"><span class="comment"> * 2.f[k] = f[k-1]+f[k-2]</span></span><br><span class="line"><span class="comment"> * 因为前面有f[k-1]个元素，所以可以继续拆分 f[k-1] = f[k-2]+f[k-3]</span></span><br><span class="line"><span class="comment"> * 即在f[k-1]前面继续查找</span></span><br><span class="line"><span class="comment"> * 即下次mid = f[k-1-1]-1</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">k--;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(key&gt;temp[mid]) &#123;<span class="comment">//向后面查找</span></span><br><span class="line">low = mid+<span class="number">1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 为什么是k-2</span></span><br><span class="line"><span class="comment"> * 1.全部元素 = 前面+后面</span></span><br><span class="line"><span class="comment"> * f[k] = f[k-1]+f[k-2]</span></span><br><span class="line"><span class="comment"> * 因为后面f[k-2] 继续拆分 f[k-2] = f[k-3]+f[k-4]</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">k-=<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//找到</span></span><br><span class="line"><span class="keyword">if</span>(mid &lt;=hight) &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> hight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//没找到</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="哈希表（散列）-Google上机题"><a href="#哈希表（散列）-Google上机题" class="headerlink" title="哈希表（散列）-Google上机题"></a>哈希表（散列）-Google上机题</h2><p>有一个公司，当有新员工来报道时，要求将该员工的信息加入（id,性别,姓名….）当输入该员工的id时，要求查找到该员工的所有信息。<br>要求：不使用数据库，尽量节省内存，速度越快越好 =&gt;哈希表（散列）</p><h2 id="哈希表基本介绍"><a href="#哈希表基本介绍" class="headerlink" title="哈希表基本介绍"></a>哈希表基本介绍</h2><p>散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过吧关键码值映射到表中一个位置来访问记录，以加快查找速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%93%88%E5%B8%8C%E8%A1%A81.png" alt=""></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%93%88%E5%B8%8C%E8%A1%A82.png" alt=""></p><h2 id="实现哈希表-数组-链表"><a href="#实现哈希表-数组-链表" class="headerlink" title="实现哈希表 数组+链表"></a>实现哈希表 数组+链表</h2><p>这里我们使用数组+链表实现哈希表。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><strong>创建雇员节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示一个雇员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> Emp next;<span class="comment">//默认为null</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建链表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建EmpLinkedList表示链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmpLinkedList</span></span>&#123;</span><br><span class="line"><span class="comment">//头指针，执行第一个Emp，因此我们这个链表的head是直接指向第一个Emp</span></span><br><span class="line"><span class="keyword">private</span> Emp head;</span><br><span class="line"><span class="comment">//这下面还有增加到末尾，考虑顺序增加，查找，遍历，删除等方法，下面我们来一个一个加进去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现链表的增删改查方法"><a href="#实现链表的增删改查方法" class="headerlink" title="实现链表的增删改查方法"></a>实现链表的增删改查方法</h3><p>其实这里在前面单链表已经讲过。</p><h4 id="增加不考虑顺序"><a href="#增加不考虑顺序" class="headerlink" title="增加不考虑顺序"></a>增加不考虑顺序</h4><p>思路：不考虑顺序直接加到链表最后，遍历链表，找到最后，然后添加进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果添加第一个雇员</span></span><br><span class="line"><span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">head = emp;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果不是第一个，则使用辅助指针直到最后</span></span><br><span class="line">Emp curEmp = head;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(curEmp.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">curEmp = curEmp.next;</span><br><span class="line">&#125;</span><br><span class="line">curEmp.next = emp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候做这种操作已经非常easy了。</p><h4 id="增加考虑顺序"><a href="#增加考虑顺序" class="headerlink" title="增加考虑顺序"></a>增加考虑顺序</h4><p><strong>思路</strong>：找到要插入节点的前一个位置，然后进行插入</p><p><strong>步骤</strong>：</p><ol><li>首先要注意一点，以前单链表的操作，我们是有头结点的，头结点不存储数据，而这里我们的头结点存数据，就是第一个emp。</li><li>上来先判断，链表是不是空 <code>head==null</code>?，如果为空那就加到head就完了 <code>head=emp</code></li><li>如果head有值，即链表不为空，如果按我们以前的操作其实也很简单，我们来创建一个节点，充当不放数据的头结点的作用，而原来的头结点变为第一个数据节点。<code>Emp cur = new Emp();cur.next = head;</code></li><li>以上操作完成后，接下来的操作就跟上方单链表的一样了，如果看不懂，可以去前面看单链表的添加节点，那里比较详细，这里就不赘述了。</li></ol><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按id从小到大添加</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrderById</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">head = emp;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//判断所加id是否</span></span><br><span class="line"><span class="comment">//不是第一个</span></span><br><span class="line">Emp cur = <span class="keyword">new</span> Emp();</span><br><span class="line">cur.next = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(cur.next == <span class="keyword">null</span>) &#123;<span class="comment">//到最后啦</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cur.next.id  &gt; emp.id) &#123;<span class="comment">//当前节点下一个位置的id大于所加入的id，说明找到，就加到cur后面</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur.next.id == emp.id) &#123;<span class="comment">//说明已经存在</span></span><br><span class="line">System.out.println(<span class="string">"插入id已经存在！！！"</span>);</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur.next;<span class="comment">//后移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">System.out.printf(<span class="string">"插入id=%d，已经存在！\n"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//插入操作</span></span><br><span class="line">emp.next = cur.next;</span><br><span class="line">cur.next = emp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历操作"><a href="#遍历操作" class="headerlink" title="遍历操作"></a>遍历操作</h4><p>注意：这里的遍历方法多了个int参数，其实可以不要，主要是为了让后面哈希表调用的时候，打印出来的内容清楚一点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"第"</span>+(no+<span class="number">1</span>)+<span class="string">"条链表为空！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">"第"</span>+(no+<span class="number">1</span>)+<span class="string">"条链表的信息为："</span>);</span><br><span class="line">Emp cur = head;<span class="comment">//这里头结点就表示第一个员工了</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.printf(<span class="string">" =&gt; id=%d name=%s\t"</span> ,cur.id,cur.name);</span><br><span class="line"><span class="keyword">if</span>(cur.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查找雇员</span></span><br><span class="line"><span class="comment">/*如果找到返回emp没找到返回空</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Emp <span class="title">findEmpById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//辅助指针</span></span><br><span class="line">Emp cur = head;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(cur.id == id) &#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//这时cur就指向要查找的雇员</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出</span></span><br><span class="line"><span class="keyword">if</span>(cur.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//说明遍历没有找到</span></span><br><span class="line">cur = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除操作-1"><a href="#删除操作-1" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delEmpById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Emp cur = head;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(cur.next.id == id) &#123;<span class="comment">//找到要删除的节点的前一个位置</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cur.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"所删除员工不存在"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">cur.next = cur.next.next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的代码都很简单，所以没有过多说明，不懂，可以去看上方单链表部分。</p><h3 id="哈希表-1"><a href="#哈希表-1" class="headerlink" title="哈希表"></a>哈希表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//哈希表，管理多条链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTab</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> EmpLinkedList[] empLinkedListArray;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashTab</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">this</span>.size = size;<span class="comment">//表示有过少条链表</span></span><br><span class="line">empLinkedListArray = <span class="keyword">new</span> EmpLinkedList[size];</span><br><span class="line"><span class="comment">//留一个坑，这时不要忘了分别初始化每一条链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++) &#123;</span><br><span class="line">empLinkedListArray[i] = <span class="keyword">new</span> EmpLinkedList();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样其他的方法在下面一一列举。</p><h4 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h4><p>散列函数是哈希表的核心，实现散列的方法很多，这里我们用个简单的取模法来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写一个散列函数，使用一个简单的取模法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashFun</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id % size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增加操作"><a href="#增加操作" class="headerlink" title="增加操作"></a>增加操作</h4><p>这里的内容就比较简单了，总结为两点。</p><ol><li>通过id调用散列函数，得到散列值。散列值就代表哪一条链表。</li><li>链表调用对应方法即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line"><span class="comment">//首先根据员工的id得到该员工应该添加到那条链表</span></span><br><span class="line"><span class="keyword">int</span> empLinkedListNO = hashFun(emp.id);</span><br><span class="line">empLinkedListArray[empLinkedListNO].add(emp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrderById</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> empLinkedListNO = hashFun(emp.id);</span><br><span class="line">empLinkedListArray[empLinkedListNO].addOrderById(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历操作-1"><a href="#遍历操作-1" class="headerlink" title="遍历操作"></a>遍历操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历所有的链表，遍历哈希表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;size;i++) &#123;</span><br><span class="line">empLinkedListArray[i].list(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询操作-1"><a href="#查询操作-1" class="headerlink" title="查询操作"></a>查询操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查找</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findEmpById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> empLinkedListNO = hashFun(id);</span><br><span class="line">Emp emp = empLinkedListArray[empLinkedListNO].findEmpById(id);</span><br><span class="line"><span class="keyword">if</span>(emp!=<span class="keyword">null</span>)&#123;<span class="comment">//说明找到</span></span><br><span class="line">System.out.printf(<span class="string">"在第%d条链表中找到 雇员id=%d\n"</span>,(empLinkedListNO+<span class="number">1</span>),id);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"在哈希表中，没有找到该雇员"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除操作-2"><a href="#删除操作-2" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delEmpById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> empLinkedListNO = hashFun(id);</span><br><span class="line">empLinkedListArray[empLinkedListNO].delEmpById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码整合-测试"><a href="#代码整合-测试" class="headerlink" title="代码整合+测试"></a>代码整合+测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hashtab;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashTabDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//创键哈希表</span></span><br><span class="line">HashTab hashTab = <span class="keyword">new</span> HashTab(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个简单的菜单</span></span><br><span class="line">String key = <span class="string">""</span>;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"add:添加雇员"</span>);</span><br><span class="line">System.out.println(<span class="string">"add2:顺序添加雇员"</span>);</span><br><span class="line">System.out.println(<span class="string">"list:显示雇员"</span>);</span><br><span class="line">System.out.println(<span class="string">"find:查找雇员"</span>);</span><br><span class="line">System.out.println(<span class="string">"del:删除雇员"</span>);</span><br><span class="line">System.out.println(<span class="string">"exit:退出系统"</span>);</span><br><span class="line"></span><br><span class="line">key = sc.next();</span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">System.out.println(<span class="string">"输入id"</span>);</span><br><span class="line"><span class="keyword">int</span> id = sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">"输入名字"</span>);</span><br><span class="line">String name = sc.next();</span><br><span class="line">Emp emp = <span class="keyword">new</span> Emp(id,name);</span><br><span class="line">hashTab.add(emp);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"add2"</span>:</span><br><span class="line">System.out.println(<span class="string">"输入id"</span>);</span><br><span class="line">id = sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">"输入名字"</span>);</span><br><span class="line">    name = sc.next();</span><br><span class="line">emp = <span class="keyword">new</span> Emp(id,name);</span><br><span class="line">hashTab.addOrderById(emp);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"list"</span>:</span><br><span class="line">hashTab.list();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"del"</span>:</span><br><span class="line">System.out.println(<span class="string">"输入id"</span>);</span><br><span class="line">id = sc.nextInt();</span><br><span class="line">hashTab.delEmpById(id);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"find"</span>:</span><br><span class="line">System.out.println(<span class="string">"请输入要查找的id"</span>);</span><br><span class="line">id = sc.nextInt();</span><br><span class="line">hashTab.findEmpById(id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line">sc.close();</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//哈希表，管理多条链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTab</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> EmpLinkedList[] empLinkedListArray;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashTab</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">this</span>.size = size;<span class="comment">//表示有过少条链表</span></span><br><span class="line">empLinkedListArray = <span class="keyword">new</span> EmpLinkedList[size];</span><br><span class="line"><span class="comment">//留一个坑，这时不要忘了分别初始化每一条链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++) &#123;</span><br><span class="line">empLinkedListArray[i] = <span class="keyword">new</span> EmpLinkedList();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line"><span class="comment">//首先根据员工的id得到该员工应该添加到那条链表</span></span><br><span class="line"><span class="keyword">int</span> empLinkedListNO = hashFun(emp.id);</span><br><span class="line">empLinkedListArray[empLinkedListNO].add(emp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历所有的链表，遍历哈希表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;size;i++) &#123;</span><br><span class="line">empLinkedListArray[i].list(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据id查找</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findEmpById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> empLinkedListNO = hashFun(id);</span><br><span class="line">Emp emp = empLinkedListArray[empLinkedListNO].findEmpById(id);</span><br><span class="line"><span class="keyword">if</span>(emp!=<span class="keyword">null</span>)&#123;<span class="comment">//说明找到</span></span><br><span class="line">System.out.printf(<span class="string">"在第%d条链表中找到 雇员id=%d\n"</span>,(empLinkedListNO+<span class="number">1</span>),id);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"在哈希表中，没有找到该雇员"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delEmpById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> empLinkedListNO = hashFun(id);</span><br><span class="line">empLinkedListArray[empLinkedListNO].delEmpById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrderById</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> empLinkedListNO = hashFun(emp.id);</span><br><span class="line">empLinkedListArray[empLinkedListNO].addOrderById(emp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个散列函数，使用一个简单的取模法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashFun</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id % size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//表示一个雇员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> Emp next;<span class="comment">//默认为null</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建EmpLinkedList表示链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmpLinkedList</span></span>&#123;</span><br><span class="line"><span class="comment">//头指针，执行第一个Emp，因此我们这个链表的head是直接指向第一个Emp</span></span><br><span class="line"><span class="keyword">private</span> Emp head;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加雇员到链表</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 添加雇员时，id自增，从小到大</span></span><br><span class="line"><span class="comment"> * 直接加到最后</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果添加第一个雇员</span></span><br><span class="line"><span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">head = emp;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果不是第一个，则使用辅助指针直到最后</span></span><br><span class="line">Emp curEmp = head;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(curEmp.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">curEmp = curEmp.next;</span><br><span class="line">&#125;</span><br><span class="line">curEmp.next = emp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按id从小到大添加</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrderById</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">head = emp;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//判断所加id是否</span></span><br><span class="line"><span class="comment">//不是第一个</span></span><br><span class="line">Emp cur = <span class="keyword">new</span> Emp();</span><br><span class="line">cur.next = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(cur.next == <span class="keyword">null</span>) &#123;<span class="comment">//到最后啦</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cur.next.id  &gt; emp.id) &#123;<span class="comment">//当前节点下一个位置的id大于所加入的id，说明找到，就加到cur后面</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur.next.id == emp.id) &#123;<span class="comment">//说明已经存在</span></span><br><span class="line">System.out.println(<span class="string">"插入id已经存在！！！"</span>);</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur.next;<span class="comment">//后移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">System.out.printf(<span class="string">"插入id=%d，已经存在！\n"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//插入操作</span></span><br><span class="line">emp.next = cur.next;</span><br><span class="line">cur.next = emp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"第"</span>+(no+<span class="number">1</span>)+<span class="string">"条链表为空！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">"第"</span>+(no+<span class="number">1</span>)+<span class="string">"条链表的信息为："</span>);</span><br><span class="line">Emp cur = head;<span class="comment">//这里头结点就表示第一个员工了</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.printf(<span class="string">" =&gt; id=%d name=%s\t"</span> ,cur.id,cur.name);</span><br><span class="line"><span class="keyword">if</span>(cur.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据id查找雇员</span></span><br><span class="line"><span class="comment">/*如果找到返回emp没找到返回空</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Emp <span class="title">findEmpById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//辅助指针</span></span><br><span class="line">Emp cur = head;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(cur.id == id) &#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//这时cur就指向要查找的雇员</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出</span></span><br><span class="line"><span class="keyword">if</span>(cur.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//说明遍历没有找到</span></span><br><span class="line">cur = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delEmpById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Emp cur = head;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(cur.next.id == id) &#123;<span class="comment">//找到要删除的节点的前一个位置</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cur.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"所删除员工不存在"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">cur.next = cur.next.next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="树结构的基础部分"><a href="#树结构的基础部分" class="headerlink" title="树结构的基础部分"></a>树结构的基础部分</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="为什么需要树这种数据结构"><a href="#为什么需要树这种数据结构" class="headerlink" title="为什么需要树这种数据结构"></a>为什么需要树这种数据结构</h3><p><strong>1.数组存储方式的分析</strong></p><p>优点：通过<strong>下标方式访问元素</strong>，速度快。对于有序数组，还可以使用二分查找提高检索速度。</p><p>缺点：如果药检所具体的某个值，后者插入值（按一定顺序）会整体移动，效率低。</p><p><strong>2.链式存储方式的分析</strong></p><p>优点：在一定程度上对数组存储方式有优化（比如：插入一个数值节点，只需要将插入节点，连接到链表中即可），删除也是找到然后直接删除。</p><p>缺点：在进行检索时，效率任然较低，比如（检索某个值，需要从头节点开始遍历）。</p><p><strong>3.数存储方式的分析</strong></p><p>能提高数据存储、读取的效率，比如利用二叉排序树，既可以保证数组的检索速度，同时也可以保证数据的插入，删除，修改的速度。</p><h3 id="树的示意图"><a href="#树的示意图" class="headerlink" title="树的示意图"></a>树的示意图</h3><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E6%A0%91%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><p>常用术语（结合图理解）：</p><ol><li>节点：就是每一个圈</li><li>根节点：第一个节点，如图圈A</li><li>父节点：例如A是B,C的父节点</li><li>子节点</li><li>叶子节点：下面没有节点了，就是叶子节点</li><li>节点的权：就是值</li><li>路径：从root节点找到该节点的路线</li><li>层</li><li>子树</li><li>树的高度（最大层数）</li><li>森林：多个子树构成森林</li></ol><h3 id="二叉树的概念"><a href="#二叉树的概念" class="headerlink" title="二叉树的概念"></a>二叉树的概念</h3><ol><li><p>树有很多种，每个节点<strong>最多只能有两个子节点</strong>的一种形式称为二叉树。</p></li><li><p>二叉树的子节点分为左节点和右节点</p></li><li><p>示意图<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p></li><li><p>如果该二叉树的所有叶子节点都在<strong>最后一层</strong>，并且<strong>节点总数=2^n-1</strong>，n为层数，则我们称为man二叉树。<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt=""></p></li><li><p>如果该二叉树的所有<strong>叶子节点</strong>都在<strong>最后一层</strong>或者<strong>倒数第二层</strong>，而且最糊一层的叶子节点在左边连续，倒数第二层的叶子节点在右边连续，我们称为完全二叉树。<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt=""></p></li></ol><h3 id="二叉树遍历的说明"><a href="#二叉树遍历的说明" class="headerlink" title="二叉树遍历的说明"></a>二叉树遍历的说明</h3><p>使用前序，中序和后序遍历对下面的二叉树进行遍历。</p><ol><li>前序遍历：先输出父节点，再遍历左子树和右子树。</li><li>中序遍历：先遍历左子树，再输出父节点，再遍历遍历右子树。</li><li>后序遍历：先遍历左子树，在输出父节点，在遍历右子树。</li><li>小结：从父节点的顺序就确定是哪种遍历。□左□右□  就看父节点在哪了。</li></ol><h3 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h3><p>思路：</p><ol><li>前序遍历：<ul><li>先输出当前节点。</li><li>如果左节点不为空，就递归前序遍历。</li><li>如果右节点不为空，就递归前序遍历。</li></ul></li><li>中序遍历：<ul><li>如果左节点不为空，就递归中序遍历。</li><li>输出当前节点。</li><li>如果右节点不为空，就递归中序遍历。</li></ul></li><li>后序遍历<ul><li>如果左节点不为空，就递归后序遍历。</li><li>如果右节点不为空，就递归后序遍历。</li><li>输出当前节点。</li></ul></li></ol><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><p><strong>先创建节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先创建节点HeroNode</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> HeroNode left;</span><br><span class="line"><span class="keyword">private</span> HeroNode right;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> no,String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> HeroNode <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(HeroNode left)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.left = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> HeroNode <span class="title">getRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(HeroNode right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"HeroNode [no="</span> + no + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们设计把对应方法放到节点类里，然后树类调用节点类的方法。</p><p><strong>前序遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写前序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>);<span class="comment">//先输出父节点</span></span><br><span class="line"><span class="comment">//递归向左子树</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.left.preOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归向右子树</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right.preOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>中序遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//先递归向左子树</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.left.infixOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出父节点</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//再向右递归</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right.infixOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>后序遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.left.postOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right.postOrder();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义二叉树</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义BinaryTree二叉树</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> HeroNode root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoot</span><span class="params">(HeroNode root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.root = root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">preOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.root!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.root.preOrder();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"二叉树为空无法遍历"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.root!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.root.infixOrder();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"二叉树为空无法遍历"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.root!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.root.postOrder();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"二叉树为空无法遍历"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注意：按理说节点的作用只是存放数据，对应的遍历或其他操作方法应该直接在二叉树类里面。这里也可以直接把遍历方法写到二叉树类里，只不过，调用的时候把对应节点当参数传进去就好了。</em></p><h3 id="二叉树查找指定节点"><a href="#二叉树查找指定节点" class="headerlink" title="二叉树查找指定节点"></a>二叉树查找指定节点</h3><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9F%A5%E6%89%BE%E6%8C%87%E5%AE%9A%E8%8A%82%E7%82%B9%E5%9B%BE.png" alt=""></p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><p>比较简单，就是遍历的基础上加上判断，代码一块放出来了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前序遍历查找</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HeroNode <span class="title">preOrderSearch</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="comment">//比较当前节点</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.no==no) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">HeroNode resNode = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//向左</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line">resNode = <span class="keyword">this</span>.left.preOrderSearch(no);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(resNode!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> resNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向右</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line">resNode = <span class="keyword">this</span>.right.preOrderSearch(no);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后直接返回结果，找到就找到了，没找到就是空</span></span><br><span class="line"><span class="keyword">return</span> resNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HeroNode <span class="title">infixOrderSearch</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">HeroNode resNode = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line">resNode = <span class="keyword">this</span>.left.infixOrderSearch(no);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(resNode!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> resNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.no == no) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line">resNode = <span class="keyword">this</span>.right.infixOrderSearch(no);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后续遍历查找</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HeroNode <span class="title">postOrderSearch</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">HeroNode resNode = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line">resNode = <span class="keyword">this</span>.left.postOrderSearch(no);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(resNode!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> resNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line">resNode = <span class="keyword">this</span>.right.postOrderSearch(no);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(resNode!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> resNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.no==no) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树删除节点"><a href="#二叉树删除节点" class="headerlink" title="二叉树删除节点"></a>二叉树删除节点</h3><p>要求：</p><ol><li>删除的节点如果是叶子节点，则删除的就是该节点</li><li>删除的节点如果是非叶子节点，则删除该子树</li></ol><p><strong>代码实现</strong></p><p>Node节点中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归删除节点</span></span><br><span class="line"><span class="comment">/* 1.如果删除的节点是叶子节点，则删除该节点</span></span><br><span class="line"><span class="comment"> * 2.如果删除的节点是非叶子节点，则删除该子树</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delNode</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left!=<span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.left.no == no) &#123;</span><br><span class="line"><span class="keyword">this</span>.left = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right!=<span class="keyword">null</span> &amp;&amp;<span class="keyword">this</span>.right.no == no) &#123;</span><br><span class="line"><span class="keyword">this</span>.right = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向左子树递归删除</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.left.delNode(no);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向右子树递归删除</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right.delNode(no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>树里的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delNode</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(root.getNo()==no) &#123;</span><br><span class="line">root = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">root.delNode(no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"空树不能删除"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这里因为二叉树没有任何规则，所以这里删除会遍历一遍二叉树，删除所有满足条件的。</p><h2 id="顺序存储二叉树"><a href="#顺序存储二叉树" class="headerlink" title="顺序存储二叉树"></a>顺序存储二叉树</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>从数据存储来看，数组存储方式和树存储方式可以互相转换，即数组可以转换成树，树也可以转换成数组。<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt=""></p><p><strong>要求</strong></p><ol><li>上图的二叉树的节点，要求以数组的方式来存放 arr:[1,2,3,4,5,6]</li><li>要求在遍历数组arr时，仍然可以以前序遍历，中序遍历和后序遍历的方式完成节点的遍历。</li></ol><h3 id="顺序存储二叉树的特点"><a href="#顺序存储二叉树的特点" class="headerlink" title="顺序存储二叉树的特点"></a>顺序存储二叉树的特点</h3><ol><li>顺序二叉树通常只考虑完全全二叉树</li><li>第n个元素的左子节点为2*n+1</li><li>第n个元素的右子节点为2*n+2</li><li>第n个元素的父节点为（n-1）/2</li><li>n:表示二叉树中的第几个元素（按0开始编号）</li></ol><h3 id="实现前序遍历"><a href="#实现前序遍历" class="headerlink" title="实现前序遍历"></a>实现前序遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayBinaryTreeDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">ArrayBinaryTree tree = <span class="keyword">new</span> ArrayBinaryTree(arr);</span><br><span class="line">tree.preOrder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编写树</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayBinaryTree</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr;<span class="comment">//存储数据的数组，即二叉树节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayBinaryTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayBinaryTree</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.arr = arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.preOrder(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写方法，完成顺序存储二叉树的前序遍历</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 数组下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果数组为空，或者arr.length=0</span></span><br><span class="line"><span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"数组为空，不能按照二叉树的前序遍历"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出当前元素</span></span><br><span class="line">System.out.println(arr[index]);</span><br><span class="line"><span class="comment">//向左递归遍历</span></span><br><span class="line"><span class="keyword">if</span>((<span class="number">2</span>*index+<span class="number">1</span>) &lt; arr.length) &#123;<span class="comment">//判断是否越界</span></span><br><span class="line">preOrder(<span class="number">2</span>*index+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向右递归</span></span><br><span class="line"><span class="keyword">if</span>((<span class="number">2</span>*index+<span class="number">2</span>) &lt; arr.length) &#123;</span><br><span class="line">preOrder(<span class="number">2</span>*index+<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线索化二叉树"><a href="#线索化二叉树" class="headerlink" title="线索化二叉树"></a>线索化二叉树</h2><h3 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h3><p>将数列{1,3,6,8,10,14}构建成一颗二叉树 n+1=7.</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%9101.png" alt=""></p><p>问题分析：</p><ol><li>当我们对上面的二叉树进行中序遍历时，数列为{8,3,10,1,6,14}</li><li>但是6,8,10,14这几个节点的左右指针并没有完全的利用上</li><li>如果我们希望充分利用各个节点的左右指针，让各个节点可以指向自己的前后节点怎么办？</li><li>解决方案：线索二叉树。</li></ol><h3 id="线索二叉树基本介绍"><a href="#线索二叉树基本介绍" class="headerlink" title="线索二叉树基本介绍"></a>线索二叉树基本介绍</h3><ol><li>n个节点的二叉链表中含有n+1【公式 2n-(n-11) = n+1】个空指针域。利用二叉链表中的空指针域，存放指向该节点在某种遍历次序下的前驱和后继节点的指针（这种附加的指针称为“线索”）。<ul><li>解释一下公式：因为n个点可以用n-1条线连起来，每条线就相当于一个指针，这样就用了n-1个指针。而一个点有两个指针，总共2n个，所以，没使用的就是2n-(n-1)=n+1</li></ul></li><li>这种加上了线索的二叉链表称为线索链表，相应的二叉树称为线索二叉树(Threaded Binary Tree)。根据线索性质的不同，线索二叉树可分为前序线索二叉树，中序线索二叉树和后序线索二叉树。</li><li>一个节点的前一个节点，称为<strong>前驱</strong>节点</li><li>一个节点的后一个节点，称为<strong>后继</strong>节点</li></ol><h3 id="线索二叉树应用案例"><a href="#线索二叉树应用案例" class="headerlink" title="线索二叉树应用案例"></a>线索二叉树应用案例</h3><p>将上方提出问题中的数，进行中序线索二叉树。中序遍历的数列为{8,3,10,1,14,6}</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E4%B8%AD%E5%BA%8F%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt=""></p><p><strong>说明</strong>：当线索化二叉树后，Node节点的属性left和right，有如下情况：</p><ol><li><strong>left</strong>指向的是<strong>左子树</strong>，也可能是指向的<strong>前驱节点</strong>，比如①节点left指向的左子树，而⑩节点的left指向的就是前驱节点。</li><li><strong>right</strong>指向的是<strong>右子树</strong>，也可能指向<strong>后继节点</strong>，比如①节点right指向的是右子树，而⑩节点的right指向的就是后继节点。</li></ol><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><p>首先先创建一个节点，这个节点与前面的不同，多了两个标志位。</p><ol><li><code>private int leftType;</code>值=1表示指向的是前驱节点，0表示指向左子树</li><li><code>private int rightType;</code>值=1表示指向的是后继节点，0表示指向右子树</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先创建节点HeroNode</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> HeroNode left;</span><br><span class="line"><span class="keyword">private</span> HeroNode right;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 规定：leftType=0表示指向左子树，如果=1，表示指向前驱节点</span></span><br><span class="line"><span class="comment"> * rightType = 0表示指向右子树 rightType=1表示指向后继节点</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> leftType;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rightType;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> no,String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLeftType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> leftType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftType</span><span class="params">(<span class="keyword">int</span> leftType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.leftType = leftType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRightType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rightType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRightType</span><span class="params">(<span class="keyword">int</span> rightType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.rightType = rightType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> HeroNode <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(HeroNode left)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.left = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> HeroNode <span class="title">getRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(HeroNode right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"HeroNode [no="</span> + no + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义线索化二叉树</strong></p><p>这里比之前多了一个指针pre，在线索化时指向前一个节点。其中我们还会在里面加入线索化方法和遍历方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义线索化二叉树</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadedBinaryTree</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> HeroNode root;</span><br><span class="line"><span class="comment">//为了实现线索化，需要创建要指向当前节点的前驱结点的指针</span></span><br><span class="line"><span class="comment">//在递归进行线索化时pre总是保留前一个节点</span></span><br><span class="line"><span class="keyword">private</span> HeroNode pre=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoot</span><span class="params">(HeroNode root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.root = root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>中序线索化</strong></p><p>思路：</p><ol><li>首先要把线索化的节点传入，一般是传入根节点，</li><li>首先判断node是不是空，如果是空，就直接返回，因为没有东西。</li><li>中序线索化，顺序为 左 中 右。<ol><li>先处理左子树，所以递归调用threadedNodes(node.left)传入左子节点。这里就跟中序遍历类似，会一直递归，找到最左边的节点。找到该节点，然后再去threadedNodes(node.left)，这时node==null，就返回了。</li><li>返回之后就要进行下一步，处理当前节点。<ol><li>首先就要判断当前node的左子树是不是null,如果不是说明，它不是叶子节点，它的left指向左子树。</li><li>如果是null，就让它指向pre,因为我们说了pre在线索化时，指向上一个节点，相当于该节点的前驱结点。此时pre为默认值null。因为中序遍历的左边第一个节点，它没有前驱节点，它就是第一个。然后别忘了把标志位leftType=1.</li><li>第三步要处理后继节点。这里要注意一下，pre保存了前一个节点，所以我们可以在当前node中处理前驱节点。但是，我们并没有创建一个指针，指向当前节点的后一个节点，因此我们无法在当前节点来处理它的后继节点。但是由于下一个节点就是当前node的后继节点，而pre保存上一个节点，所以，当node走到下一个节点时，此时的node就是pre的后继节点。</li><li>总结：当前节点的后继节点，要在当前节点的下一个节点处，通过pre处理。</li><li>处理时：判断pre是否为null,因为第一个节点时pre为默认值null。然后判断pre.right是否为null,因为为空才可以处理！都成立，则pre的右指针指向node，标示位rightType=1.</li><li>当处理完一个节点后，pre要移动pre=node，这样pre才能总是指向node的前一个节点。</li></ol></li><li>然后按照中序规则，传入右指针，递归遍历<code>threadedNodes(node.right)</code></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写对二叉树进行中序线索化</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 当前需要线索化的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadedNodes</span><span class="params">(HeroNode node)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果node=null</span></span><br><span class="line"><span class="keyword">if</span>(node == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序线索化</span></span><br><span class="line"><span class="comment">//&lt;一&gt;先线索化左子树</span></span><br><span class="line">threadedNodes(node.getLeft());</span><br><span class="line"><span class="comment">//&lt;二&gt;线索化当前节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//处理当前节点的前驱节点</span></span><br><span class="line"><span class="keyword">if</span>(node.getLeft() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//让当前节点的左指针指向前驱节点</span></span><br><span class="line">node.setLeft(pre);</span><br><span class="line"><span class="comment">//修改当前节点的左指针类型</span></span><br><span class="line">node.setLeftType(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理后继节点</span></span><br><span class="line"><span class="keyword">if</span>(pre!=<span class="keyword">null</span> &amp;&amp; pre.getRight()==<span class="keyword">null</span>) &#123;</span><br><span class="line">pre.setRight(node);</span><br><span class="line">pre.setRightType(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//!!!每处理一个节点后，让当前节点是下一个节点的前驱节点</span></span><br><span class="line">pre = node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;三&gt;线索化右子树</span></span><br><span class="line">threadedNodes(node.getRight());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会比较绕，建议自己画图一步一步的理顺一下，体会执行过程。</p><p><strong>遍历中序线索化二叉树</strong></p><p>因为线索化之后前面的遍历方法不能用了，所以要重新写一个。</p><p>这里顺着代码走一遍还是很好理解的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历中序线索化二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//临时存储当前遍历的节点</span></span><br><span class="line">HeroNode node = root;</span><br><span class="line"><span class="keyword">while</span>(node!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//循环找到leftType == 1的节点</span></span><br><span class="line"><span class="comment">//后面随着遍历，node会变化，因为当left=1时，说明该节点是按照线索化处理后的有效节点</span></span><br><span class="line"><span class="keyword">while</span>(node.getLeftType()==<span class="number">0</span>) &#123;</span><br><span class="line">node = node.getLeft();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印当前节点</span></span><br><span class="line">System.out.println(node);</span><br><span class="line"><span class="comment">//如果当前节点的右指针，指向的的后继节点，就一直输出</span></span><br><span class="line"><span class="keyword">while</span>(node.getRightType() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//获取到当前节点的后继节点</span></span><br><span class="line">node =node.getRight();</span><br><span class="line">System.out.println(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换遍历的节点</span></span><br><span class="line">node = node.getRight();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码整合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tree.threadedBinaryTree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadedBinaryTreeDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">HeroNode h1 = <span class="keyword">new</span> HeroNode(<span class="number">1</span>, <span class="string">"tom"</span>);</span><br><span class="line">HeroNode h2 = <span class="keyword">new</span> HeroNode(<span class="number">3</span>, <span class="string">"jack"</span>);</span><br><span class="line">HeroNode h3 = <span class="keyword">new</span> HeroNode(<span class="number">6</span>, <span class="string">"smith"</span>);</span><br><span class="line">HeroNode h4 = <span class="keyword">new</span> HeroNode(<span class="number">8</span>, <span class="string">"mery"</span>);</span><br><span class="line">HeroNode h5 = <span class="keyword">new</span> HeroNode(<span class="number">10</span>, <span class="string">"king"</span>);</span><br><span class="line">HeroNode h6 = <span class="keyword">new</span> HeroNode(<span class="number">14</span>, <span class="string">"dim"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树，后面递归创建，先暂时手动创建</span></span><br><span class="line">h1.setLeft(h2);</span><br><span class="line">h1.setRight(h3);</span><br><span class="line">h2.setLeft(h4);</span><br><span class="line">h2.setRight(h5);</span><br><span class="line">h3.setLeft(h6);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试线索化</span></span><br><span class="line">ThreadedBinaryTree tree = <span class="keyword">new</span> ThreadedBinaryTree();</span><br><span class="line">tree.setRoot(h1);</span><br><span class="line">tree.threadedNodes();</span><br><span class="line"></span><br><span class="line">HeroNode leftNode = h5.getLeft();</span><br><span class="line">System.out.println(<span class="string">"10号节点的前驱节点是："</span>+leftNode);</span><br><span class="line">HeroNode rightNode = h5.getRight();</span><br><span class="line">System.out.println(<span class="string">"10号节点的后继节点是："</span>+rightNode);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"使用线索化的方式遍历线索化二叉树"</span>);</span><br><span class="line">tree.threadedList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义线索化二叉树</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadedBinaryTree</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> HeroNode root;</span><br><span class="line"><span class="comment">//为了实现线索化，需要创建要指向当前节点的前驱结点的指针</span></span><br><span class="line"><span class="comment">//在递归进行线索化时pre总是保留前一个节点</span></span><br><span class="line"><span class="keyword">private</span> HeroNode pre=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoot</span><span class="params">(HeroNode root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.root = root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历中序线索化二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//临时存储当前遍历的节点</span></span><br><span class="line">HeroNode node = root;</span><br><span class="line"><span class="keyword">while</span>(node!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//循环找到leftType == 1的节点</span></span><br><span class="line"><span class="comment">//后面随着遍历，node会变化，因为当left=1时，说明该节点是按照线索化处理后的有效节点</span></span><br><span class="line"><span class="keyword">while</span>(node.getLeftType()==<span class="number">0</span>) &#123;</span><br><span class="line">node = node.getLeft();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印当前节点</span></span><br><span class="line">System.out.println(node);</span><br><span class="line"><span class="comment">//如果当前节点的右指针，指向的的后继节点，就一直输出</span></span><br><span class="line"><span class="keyword">while</span>(node.getRightType() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//获取到当前节点的后继节点</span></span><br><span class="line">node =node.getRight();</span><br><span class="line">System.out.println(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换遍历的节点</span></span><br><span class="line">node = node.getRight();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadedNodes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.threadedNodes(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写对二叉树进行中序线索化</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 当前需要线索化的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadedNodes</span><span class="params">(HeroNode node)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果node=null</span></span><br><span class="line"><span class="keyword">if</span>(node == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序线索化</span></span><br><span class="line"><span class="comment">//&lt;一&gt;先线索化左子树</span></span><br><span class="line">threadedNodes(node.getLeft());</span><br><span class="line"><span class="comment">//&lt;二&gt;线索化当前节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//处理当前节点的前驱节点</span></span><br><span class="line"><span class="keyword">if</span>(node.getLeft() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//让当前节点的左指针指向前驱节点</span></span><br><span class="line">node.setLeft(pre);</span><br><span class="line"><span class="comment">//修改当前节点的左指针类型</span></span><br><span class="line">node.setLeftType(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理后继节点</span></span><br><span class="line"><span class="keyword">if</span>(pre!=<span class="keyword">null</span> &amp;&amp; pre.getRight()==<span class="keyword">null</span>) &#123;</span><br><span class="line">pre.setRight(node);</span><br><span class="line">pre.setRightType(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//!!!每处理一个节点后，让当前节点是下一个节点的前驱节点</span></span><br><span class="line">pre = node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;三&gt;线索化右子树</span></span><br><span class="line">threadedNodes(node.getRight());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先创建节点HeroNode</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> HeroNode left;</span><br><span class="line"><span class="keyword">private</span> HeroNode right;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 规定：leftType=0表示指向左子树，如果=1，表示指向前驱节点</span></span><br><span class="line"><span class="comment"> * rightType = 0表示指向右子树 rightType=1表示指向后继节点</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> leftType;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rightType;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> no,String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLeftType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> leftType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftType</span><span class="params">(<span class="keyword">int</span> leftType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.leftType = leftType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRightType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rightType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRightType</span><span class="params">(<span class="keyword">int</span> rightType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.rightType = rightType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> HeroNode <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(HeroNode left)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.left = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> HeroNode <span class="title">getRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(HeroNode right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"HeroNode [no="</span> + no + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li><p>堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏、最好、平均时间复杂度均为O(nlogn)，它也是不稳定排序。</p></li><li><p>堆是具有以下性质的完全二叉树：每个节点的值都大于或等于左右孩子节点的值，称之为大顶堆。注意：没有要求左右孩子值的大小关系。</p></li><li><p>每个节点的值都小于或等于左右孩子节点的值，称之为小顶堆。</p></li><li><p>大顶堆举例<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%A4%A7%E9%A1%B6%E5%A0%86%E4%B8%BE%E4%BE%8B.png" alt=""></p></li><li><p>小顶堆举例<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%B0%8F%E9%A1%B6%E5%A0%86%E4%B8%BE%E4%BE%8B.png" alt=""></p></li><li><p>一般升序采用大顶堆，降序采用小顶堆。</p></li></ol><h3 id="堆排序基本思想"><a href="#堆排序基本思想" class="headerlink" title="堆排序基本思想"></a>堆排序基本思想</h3><ol><li>将待排序序列构成一个大顶堆</li><li>此时，整个序列的最大值就是堆顶的根节点。</li><li>将其与末尾元素进行交换，此时末尾就为最大值。</li><li>然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。</li></ol><h3 id="堆排序步骤图解说明"><a href="#堆排序步骤图解说明" class="headerlink" title="堆排序步骤图解说明"></a>堆排序步骤图解说明</h3><p>要求：给你一个数组{4,6,8,5,9}，要求使用堆排序法，将数组升序排序。</p><h4 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h4><p><strong>步骤一</strong>：构造初始堆。将无序序列构造成一个大顶堆。</p><ol><li><p>假设给定无序序列结构如下<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%A0%86%E6%8E%92%E5%BA%8F%E6%AD%A5%E9%AA%A401.png" style="zoom:50%;" /></p></li><li><p>此时我们从<strong>最后一个非叶子节点</strong>开始（叶子节点自然不用调整，第一个非叶子节点 arr.length/2-1=5/2-1=1，也就是下面的6节点），<strong>从左至右，从下至上</strong>进行调整。<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%A0%86%E6%8E%92%E5%BA%8F%E6%AD%A5%E9%AA%A402.png" style="zoom: 50%;" /></p></li><li><p>找到第二个非叶子节点4，由于[4,9,8]中9元素最大，4和9交换。<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%A0%86%E6%8E%92%E5%BA%8F%E6%AD%A5%E9%AA%A403.png" style="zoom:50%;" /></p></li><li><p>这时，交换导致了子跟[4,5,6]结构混乱，继续调整，[4,5,6]中6最大，交换4和6。<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%A0%86%E6%8E%92%E5%BA%8F%E6%AD%A5%E9%AA%A404.png" style="zoom:50%;" /></p></li></ol><p>此时，我们就将一个无序序列构建成了一个大顶堆。</p><h4 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h4><p><strong>将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将对顶元素与末尾元素交换，得到第二大元素，如此反复进行交换、重建、交换。</strong></p><ol><li><p>将堆顶元素9与末尾元素4进行交换<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%A0%86%E6%8E%92%E5%BA%8F%E6%AD%A5%E9%AA%A405.png" style="zoom:50%;" /></p></li><li><p>继续调整结构，使其满足堆定义。<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%A0%86%E6%8E%92%E5%BA%8F%E6%AD%A5%E9%AA%A406.png" style="zoom:50%;" /></p></li><li><p>再将堆顶元素8与末尾元素4进行交换，得到第二大元素8。<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%A0%86%E6%8E%92%E5%BA%8F%E6%AD%A5%E9%AA%A407.png" style="zoom:50%;" /></p></li><li><p>后续过程，继续进行调整、交换，如此反复进行，最终使得整个序列有序。<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%A0%86%E6%8E%92%E5%BA%8F%E6%AD%A5%E9%AA%A408.png" style="zoom: 33%;" /></p></li></ol><h3 id="堆排序代码实现"><a href="#堆排序代码实现" class="headerlink" title="堆排序代码实现"></a>堆排序代码实现</h3><p><strong>首先编写一个方法，功能为将一个数组（二叉树），调整成一个大顶堆。</strong></p><p>思路：</p><ol><li>三个参数，数组，节点下标，以及数组长度</li><li>创建临时变量，保存当前下标对应的值。</li><li>由公式可知：当前下标为i的左子树的下标为<code>2*i+1</code>，右子树为<code>2*i+2</code></li><li>首先循环从左节点开始，<code>k=i*2+1</code>，结束条件是k&lt;length，因为我们是先找的左节点，然后比较，所以k每次都要找左节点，所以k每次<code>k=*2+1</code><ol><li>进入循环，因为要比较左右节点的值，所以下看一下有没有右节点，也就是k+1&lt;length吗</li><li>如果k+1&lt;length成立，也就是有右节点，然后进行比较，如果左节小于右节点，则k++，这样k就会指向右节点。如果左节点不小于右节点，那么k指向的还是左节点没有变化。</li><li>比较完以后，k就会指向左右节点中最大的那个，然后就比较这个节点与父节点谁大，如果当前节点大于父节点，那么将当前节点赋值给父节点。令i=k，这时候最大节点的位置。（用于后面放置原来的父节点。）</li><li>如果当前节点不大于父节点，也就是不需要交换，那我就可以直接退出循环break。可以直接break的原因是我们<strong>从左至右，从下到上</strong>进行处理。下面肯定是处理后的了。</li></ol></li><li>循环结束后将temp中存储的原父节点，放到i所指向的位置，实现交换。</li></ol><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将一个数组（二叉树）调整成一个大顶堆</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能：完成将以i对应的非叶子节点的数，调整成大顶堆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待调整的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i 表示非叶子节点的在数组中的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 表示对多少个元素进行调整，length是在逐渐减少</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp = arr[i];<span class="comment">//临时变量</span></span><br><span class="line"><span class="comment">//开始调整</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * k = i*2+1 是i节点的左子节点</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = i*<span class="number">2</span>+<span class="number">1</span>;k&lt;length;k = k*<span class="number">2</span>+<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(k+<span class="number">1</span>&lt;length &amp;&amp; arr[k] &lt; arr[k+<span class="number">1</span>]) &#123;<span class="comment">//说明左子节点小于右子节点的值</span></span><br><span class="line">k++;<span class="comment">//k指向右子节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(arr[k] &gt; temp) &#123;<span class="comment">//子节点大于父节点</span></span><br><span class="line">arr[i]= arr[k];<span class="comment">//把较大的值，赋给当前节点</span></span><br><span class="line">i=k;<span class="comment">//然后i指向k继续循环比较</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for循环结束后，我们已经将以i为父节点的树的最大值，放在了最顶（局部）</span></span><br><span class="line">arr[i] = temp;<span class="comment">//将temp放到调整后的位置 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后编写排序</strong></p><p>思路：</p><ol><li>现将无序序列构建成一个堆，升序大顶堆，降序小顶堆</li><li>将堆顶元素与末尾元素进行交换，将最大元素沉到数组末端</li><li>重新调整结构使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。</li><li>从代码中可以看出i=arr.length/2-1其实是最后一层最左边节点，也就是我们要<strong>从左至右，从下至上</strong>操作。</li><li>第一步将无序序列转换为堆后，交换堆顶元素和末尾元素，这时就要从根节点开始调整，每次都是从这里开始。因为长度不断减少，最后换过去的元素，就不会在下次调整的数组中。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"堆排序"</span>);</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;<span class="comment">//交换辅助变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length/<span class="number">2</span>-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">adjustHeap(arr, i, arr.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*将堆顶元素与末尾元素交换，将最大元素沉到数组末端</span></span><br><span class="line"><span class="comment"> * 重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，知道整个序列有序</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =arr.length-<span class="number">1</span>;j&gt;<span class="number">0</span>;j--) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[<span class="number">0</span>];</span><br><span class="line">arr[<span class="number">0</span>] = temp;</span><br><span class="line">adjustHeap(arr, <span class="number">0</span>, j);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"数组="</span>+Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我认为堆排序的思路就是，由于根节点必然大于其他节点（大顶堆），小顶堆反之。所以要一步一步选出根节点元素，与末尾元素交换，因此它是选择排序。就是因为根节点的值，在大顶堆必然最大，小顶堆必然最小。</p><h1 id="赫夫曼树"><a href="#赫夫曼树" class="headerlink" title="赫夫曼树"></a>赫夫曼树</h1><h2 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol><li>给定n个权值作为n个叶子节点，构造一颗二叉树，若该树的带权路径长度（wpl）达到最小，称这样的二叉树为最优二叉树，也称为赫夫曼树（Huffman Tree）。</li><li>赫夫曼树是带权路径长度最短的树，权值较大的节点离根较近。</li></ol><h2 id="几个重要的概念"><a href="#几个重要的概念" class="headerlink" title="几个重要的概念"></a>几个重要的概念</h2><ol><li><strong>路径和路径长度</strong>：在一棵树中，从一个节点往下可以达到的孩子或孙子节点之间的通路，称为路径。<strong>通路中分支的数目称为路径长度</strong>。若规定根节点的层数为1，则从根节点到L层节点的路径长度为L-1。</li><li><strong>节点的权及带权路径长度</strong>：若将树中系欸但赋给一个有着某种含义的数值，则这个数值称为该节点的权。<strong>节点的带权路径长度为：</strong>从根节点到该节点之间的路径长度与该节点的权的乘积。</li><li>树的带权路径长度：树的带权路径长度规定为<strong>所有叶子节点的带权路径长度之和</strong>，记为WPL，权值越大的节点离根节点越近的二叉树才是最优二叉树。</li><li>举例<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E4%B8%BE%E4%BE%8B.png" alt=""></li></ol><h2 id="赫夫曼树创建"><a href="#赫夫曼树创建" class="headerlink" title="赫夫曼树创建"></a>赫夫曼树创建</h2><h4 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h4><ol><li>从小到大进行排序，将每一个数据，每个数据都是一个节点，每个节点可以看成一颗最简单的二叉树。</li><li>取出根节点权值最小的两颗二叉树</li><li>组成一颗新的二叉树，该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和。</li><li>再将这颗新的二叉树，以根节点的权值大小，再次排序，不断重复1-4步骤，直到数列中，所有的数据都被处理，就得到了一颗赫夫曼树。</li></ol><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p>{13,7,8,3,29,6,1}为例</p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%88%9B%E5%BB%BA%E5%9B%BE%E8%A7%A3.png" style="zoom: 67%;" /><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> huffmantree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuffmanTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">13</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">29</span>,<span class="number">6</span>,<span class="number">1</span>&#125;;</span><br><span class="line">Node root = createHuffmanTree(arr);</span><br><span class="line">preOrder(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个先去遍历的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root!=<span class="keyword">null</span>) &#123;</span><br><span class="line">root.preOrder();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"空树不能遍历"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建赫夫曼树</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 需要创建成赫夫曼树的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 创建好后的根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">createHuffmanTree</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="comment">//第一步为了操作方便</span></span><br><span class="line"><span class="comment">/*1.遍历arr数组</span></span><br><span class="line"><span class="comment"> * 2.将arr的每个元素构建成一个Node</span></span><br><span class="line"><span class="comment"> * 3.将Node放入到ArrayList中</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">List&lt;Node&gt; nodes = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> value:arr) &#123;</span><br><span class="line">nodes.add(<span class="keyword">new</span> Node(value));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(nodes.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//排序，从小到大</span></span><br><span class="line">Collections.sort(nodes);</span><br><span class="line">System.out.println(<span class="string">"nodes="</span>+nodes);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取出根节点权值最小的两颗二叉树</span></span><br><span class="line"><span class="comment">//1.取出最小的节点</span></span><br><span class="line">Node leftNode = nodes.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//2.取出第2小的</span></span><br><span class="line">Node rightNode = nodes.get(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//3.构建一颗新的二叉树</span></span><br><span class="line">Node parent = <span class="keyword">new</span> Node(leftNode.value+rightNode.value);</span><br><span class="line">parent.left = leftNode;</span><br><span class="line">parent.right = rightNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.删除处理过得二叉树</span></span><br><span class="line">nodes.remove(leftNode);</span><br><span class="line">nodes.remove(rightNode);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.将parent加入到nodes</span></span><br><span class="line">nodes.add(parent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回赫夫曼树的root节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nodes.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建节点</span></span><br><span class="line"><span class="comment">//为了让Node对象支持排序 Collections集合排序</span></span><br><span class="line"><span class="comment">//让Node实现Comparable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">int</span> value;<span class="comment">//节点权值</span></span><br><span class="line">Node left;</span><br><span class="line">Node right;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Node [value="</span> + value + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node o)</span> </span>&#123;</span><br><span class="line"><span class="comment">//表示从小到大</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.value-o.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.left.preOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right.preOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="赫夫曼编码"><a href="#赫夫曼编码" class="headerlink" title="赫夫曼编码"></a>赫夫曼编码</h1><h2 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol><li>赫夫曼编码也翻译为哈夫曼编码（Huffman Coding），又称霍夫曼编码，是一种编码方式，属于一种程序算法。</li><li>赫夫曼编码是赫夫曼树在电讯通信中的景点应用之一。</li><li>赫夫曼编码广泛用于数据文件压缩。其压缩率通常在20%~90%之间。</li><li>赫夫曼码是可变长编码（VLC)的一种。Huffman与1952年提出的一种编码方法，称之为最佳编码。</li></ol><h2 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h2><ol><li><p><strong>定长编码</strong><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%8101.png" alt=""></p></li><li><p><strong>变长编码</strong><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%8102.png" alt=""></p></li><li><p><strong>赫夫曼编码</strong><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%8103.png" style="zoom: 150%;" /></p></li></ol><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%8104.png" style="zoom: 67%;" /><h2 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h2><h3 id="编写获取存放节点的集合方法"><a href="#编写获取存放节点的集合方法" class="headerlink" title="编写获取存放节点的集合方法"></a>编写获取存放节点的集合方法</h3><p>这里是把传入的字符串，统计其字符出现的次数，节点.data存放字符本身，节点.weight存放次数，也是权值。</p><p>然后把所有的节点放入到一个集合中，为下面创建赫夫曼树做准备。</p><p><strong>首先是节点类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建node</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt;</span>&#123;</span><br><span class="line">Byte data;<span class="comment">//存放数据本身，比如 'a' 97</span></span><br><span class="line"><span class="keyword">int</span> weight;<span class="comment">//权值，表示字符出现的次数</span></span><br><span class="line">Node left;</span><br><span class="line">Node right;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Byte data, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line"><span class="keyword">this</span>.weight = weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node arg0)</span> </span>&#123;</span><br><span class="line"><span class="comment">//从小到大</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.weight-arg0.weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Node [data="</span> + data + <span class="string">", weight="</span> + weight + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.left.preOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right.preOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>把节点放到集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bytes 接收字节数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回list</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Node&gt; <span class="title">getNodes</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Node&gt; nodes = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储每个byte出现的次数 -》map</span></span><br><span class="line">Map&lt;Byte, Integer&gt; counts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">byte</span> b: bytes) &#123;</span><br><span class="line">Integer count = counts.get(b);</span><br><span class="line"><span class="keyword">if</span>(count == <span class="keyword">null</span>) &#123;<span class="comment">//说明现在还没有数据</span></span><br><span class="line">counts.put(b, <span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">counts.put(b, count+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把每个键值对转成一个Node对象，并加入nodes集合</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Byte, Integer&gt; entry:counts.entrySet()) &#123;</span><br><span class="line">nodes.add(<span class="keyword">new</span> Node(entry.getKey(),entry.getValue()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建赫夫曼树"><a href="#创建赫夫曼树" class="headerlink" title="创建赫夫曼树"></a>创建赫夫曼树</h3><p>通过上面的节点集合创建赫夫曼树。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建赫夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">createHuffmanTree</span><span class="params">(List&lt;Node&gt; nodes)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(nodes.size()&gt;<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//排序 从小到大</span></span><br><span class="line">Collections.sort(nodes);</span><br><span class="line"><span class="comment">//取出第一颗最小的二叉树</span></span><br><span class="line">Node leftNode = nodes.get(<span class="number">0</span>);</span><br><span class="line">Node rightNode = nodes.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一颗新的二叉树,根节点没有data，只有权值</span></span><br><span class="line">Node parent = <span class="keyword">new</span> Node(<span class="keyword">null</span>,leftNode.weight+rightNode.weight);</span><br><span class="line">parent.left = leftNode;</span><br><span class="line">parent.right = rightNode;</span><br><span class="line"><span class="comment">//将处理过的二叉树移除</span></span><br><span class="line">nodes.remove(leftNode);</span><br><span class="line">nodes.remove(rightNode);</span><br><span class="line"><span class="comment">//将新的二叉树加入</span></span><br><span class="line">nodes.add(parent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nodes.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成赫夫曼树对应的赫夫曼编码"><a href="#生成赫夫曼树对应的赫夫曼编码" class="headerlink" title="生成赫夫曼树对应的赫夫曼编码"></a>生成赫夫曼树对应的赫夫曼编码</h3><p>注意这里生成的赫夫曼编码虽然是0和1组成，但它还是一个字符串，没有转换成byte</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成赫夫曼树对应的赫夫曼编码</span></span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.将赫夫曼编码表存放在Map&lt;Byte,String&gt;</span></span><br><span class="line"><span class="comment"> * 2.在生成赫夫曼编码表时，需要去拼接路径，定义StringBuilder 存储某个叶子节点的路径</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">static</span> Map&lt;Byte,String&gt; huffmanCodes = <span class="keyword">new</span> HashMap&lt;Byte,String&gt;();</span><br><span class="line"><span class="keyword">static</span> StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能：将传入的node节点的所有叶子节点的赫夫曼编码存放到huffmanCodes集合中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 传入节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code 路径：左子节点是0，右子节点1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stringBuilder 用于拼接路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getCodes</span><span class="params">(Node node,String code,StringBuilder stringBuilder)</span> </span>&#123;</span><br><span class="line">StringBuilder stringBuilder2 = <span class="keyword">new</span> StringBuilder(stringBuilder);</span><br><span class="line"><span class="comment">//将code加入到stringBuilder2</span></span><br><span class="line">stringBuilder2.append(code);</span><br><span class="line"><span class="keyword">if</span>(node!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//判断当前node是叶子节点还是非叶子节点</span></span><br><span class="line"><span class="keyword">if</span>(node.data == <span class="keyword">null</span>) &#123;<span class="comment">//说明是非叶子节点</span></span><br><span class="line"><span class="comment">//递归处理</span></span><br><span class="line"><span class="comment">//向左</span></span><br><span class="line">getCodes(node.left, <span class="string">"0"</span>, stringBuilder2);</span><br><span class="line"><span class="comment">//向右递归</span></span><br><span class="line">getCodes(node.right, <span class="string">"1"</span>, stringBuilder2);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//说明是叶子节点</span></span><br><span class="line">huffmanCodes.put(node.data, stringBuilder2.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了调用方便重载一下</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Byte,String&gt; <span class="title">getCodes</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">getCodes(root.left, <span class="string">"0"</span>, stringBuilder);</span><br><span class="line">getCodes(root.right, <span class="string">"1"</span>, stringBuilder);</span><br><span class="line"><span class="keyword">return</span> huffmanCodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="得到一个赫夫曼编码表处理后的byte-数组"><a href="#得到一个赫夫曼编码表处理后的byte-数组" class="headerlink" title="得到一个赫夫曼编码表处理后的byte[]数组"></a>得到一个赫夫曼编码表处理后的byte[]数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写一个方法，将一个字符串对应的byte[]数组，通过生成的赫夫曼编码表返回一个赫夫曼编码表处理后的byte[]数组</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bytes 原始的字符串对应的byte[]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> huffmanCode 生成的赫夫曼编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回赫夫曼编码处理后的byte[]</span></span><br><span class="line"><span class="comment"> * 例如："i like like like java do you like a java"对应"1010100010111111....."这是字符串</span></span><br><span class="line"><span class="comment"> * 把它变成byte[] 10101000(补码) =&gt;byte  【推导：10101000 =》 10101000-1=》10100111（反码）=》1101100】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] zip(<span class="keyword">byte</span>[] bytes,Map&lt;Byte,String&gt; huffmanCode) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.先利用huffmanCode 将bytes转成赫夫曼编码后的字符串</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">//遍历bytes数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">byte</span> b:bytes) &#123;</span><br><span class="line">stringBuilder.append(huffmanCode.get(b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串转成byte[]</span></span><br><span class="line"><span class="comment">//统计返回的byte[] huffmannCodeBytes长度</span></span><br><span class="line"><span class="comment">//int len = (stringBuilder.length()+7)/8;</span></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">if</span>(stringBuilder.length()%<span class="number">8</span>==<span class="number">0</span>) &#123;</span><br><span class="line">len = stringBuilder.length()/<span class="number">8</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">len = stringBuilder.length()/<span class="number">8</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创键存储压缩后的byte数组</span></span><br><span class="line"><span class="keyword">byte</span>[] huffmannCodeBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[len];</span><br><span class="line"><span class="keyword">int</span> index=<span class="number">0</span>;<span class="comment">//记录是第几个byte</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;stringBuilder.length();i=i+<span class="number">8</span>) &#123;<span class="comment">//因为是每八位对应一个byte</span></span><br><span class="line">String strByte;</span><br><span class="line"><span class="keyword">if</span>(i+<span class="number">8</span>&gt;stringBuilder.length()) &#123;</span><br><span class="line">strByte = stringBuilder.substring(i);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">strByte = stringBuilder.substring(i,i+<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将strByte转换成byte放入</span></span><br><span class="line">huffmannCodeBytes[index] = (<span class="keyword">byte</span>)Integer.parseInt(strByte, <span class="number">2</span>);<span class="comment">//2代表进制</span></span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> huffmannCodeBytes;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后将上方步骤进行封装"><a href="#最后将上方步骤进行封装" class="headerlink" title="最后将上方步骤进行封装"></a>最后将上方步骤进行封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用一个方法，把前面的方法封装起来</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bytes 原始的字符串对应的字节数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的是经过赫夫曼编码处理后的字节数组（压缩后的）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] huffmanZip(<span class="keyword">byte</span>[] bytes) &#123;</span><br><span class="line">List&lt;Node&gt; nodes = getNodes(bytes);</span><br><span class="line"><span class="comment">//创建赫夫曼树</span></span><br><span class="line">Node root = createHuffmanTree(nodes);</span><br><span class="line"><span class="comment">//生成对应的赫夫曼编码</span></span><br><span class="line">Map&lt;Byte,String&gt; huffmanCodes = getCodes(root);</span><br><span class="line"><span class="keyword">byte</span>[] huffmanCodeBytes = zip(bytes,huffmanCodes);</span><br><span class="line"><span class="keyword">return</span>     huffmanCodeBytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String content=<span class="string">"i like like like java do you like a java"</span>;</span><br><span class="line"><span class="keyword">byte</span>[] contentBytes = content.getBytes();</span><br><span class="line"><span class="keyword">byte</span>[] huffmanCodesBytes= huffmanZip(contentBytes);</span><br><span class="line">System.out.println(Arrays.toString(huffmanCodesBytes));</span><br><span class="line">&#125;</span><br><span class="line">结果为：</span><br><span class="line">[-<span class="number">88</span>, -<span class="number">65</span>, -<span class="number">56</span>, -<span class="number">65</span>, -<span class="number">56</span>, -<span class="number">65</span>, -<span class="number">55</span>, <span class="number">77</span>, -<span class="number">57</span>, <span class="number">6</span>, -<span class="number">24</span>, -<span class="number">14</span>, -<span class="number">117</span>, -<span class="number">4</span>, -<span class="number">60</span>, -<span class="number">90</span>, <span class="number">28</span>]</span><br></pre></td></tr></table></figure><h2 id="数据解压"><a href="#数据解压" class="headerlink" title="数据解压"></a>数据解压</h2><p>解码过程就是编码的逆向操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将一个byte转成二进制字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b 传入的byte</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> flag 表示是否补高位，true表示需要</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  返回该byte对应的二进制字符串，注意是按补码返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteToBitString</span><span class="params">(<span class="keyword">boolean</span> flag,<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line"><span class="comment">//使用一个变量保存b</span></span><br><span class="line"><span class="keyword">int</span> temp  = b;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line"><span class="comment">//如果是正数，补高位</span></span><br><span class="line">temp |= <span class="number">256</span>;<span class="comment">//按位或256,1 0000 0000 | 0000 0001 =》1 0000 0001  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String str = Integer.toBinaryString(temp);<span class="comment">//返回的是temp对应的二进制补码</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line"><span class="keyword">return</span> str.substring(str.length()-<span class="number">8</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解码</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> huffmanCodes 赫夫曼编码表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> huffmanBytes 赫夫曼编码得到的字节数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 原来的字符串对应的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decode(Map&lt;Byte,String&gt; huffmanCodes,<span class="keyword">byte</span>[] huffmanBytes) &#123;</span><br><span class="line"><span class="comment">//1.先得到huffmanBytes 对应的二进制字符串</span></span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">//将byte[] 转成二进制的字符串</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;huffmanBytes.length;i++) &#123;</span><br><span class="line"><span class="keyword">byte</span> b = huffmanBytes[i];</span><br><span class="line"><span class="keyword">boolean</span> flag = (i ==huffmanBytes.length-<span class="number">1</span>);</span><br><span class="line">stringBuilder.append(byteToBitString(!flag, b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println("赫夫曼字节数组对应的二进制字符串："+stringBuilder.toString());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把字符串按指定的赫夫曼编码进行解码</span></span><br><span class="line"><span class="comment">//把赫夫曼编码表进行调换，因为要反向查询 a-&gt;100 现在是100-》a</span></span><br><span class="line">Map&lt;String,Byte&gt; map = <span class="keyword">new</span> HashMap&lt;String,Byte&gt;();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Byte, String&gt; entry:huffmanCodes.entrySet()) &#123;</span><br><span class="line">map.put(entry.getValue(), entry.getKey());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个集合存放byte</span></span><br><span class="line">List&lt;Byte&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;stringBuilder.length();) &#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;<span class="comment">//小的计数器</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">Byte b = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(flag) &#123;</span><br><span class="line"><span class="comment">//递增取出key</span></span><br><span class="line"></span><br><span class="line">String key = stringBuilder.substring(i,i+count);<span class="comment">//相当于i不动，count动，直到匹配到一个字符</span></span><br><span class="line">b=map.get(key);</span><br><span class="line"><span class="keyword">if</span>(b==<span class="keyword">null</span>) &#123;<span class="comment">//说明没有匹配到</span></span><br><span class="line">count++;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//匹配到</span></span><br><span class="line">flag =<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">list.add(b);</span><br><span class="line">i+=count;<span class="comment">//直接移动到count位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当for循环结束后，我们list中就存放了所有字符</span></span><br><span class="line"><span class="comment">//把list放入byte[]</span></span><br><span class="line"><span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[list.size()];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;b.length;i++) &#123;</span><br><span class="line">b[i] = list.get(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String content=<span class="string">"i like like like java do you like a java"</span>;</span><br><span class="line"><span class="keyword">byte</span>[] contentBytes = content.getBytes();</span><br><span class="line"><span class="keyword">byte</span>[] huffmanCodesBytes= huffmanZip(contentBytes);</span><br><span class="line">System.out.println(Arrays.toString(huffmanCodesBytes));</span><br><span class="line"><span class="keyword">byte</span>[] sourceBytes = decode(huffmanCodes, huffmanCodesBytes);</span><br><span class="line">System.out.println(<span class="string">"原来的字符串="</span>+<span class="keyword">new</span> String(sourceBytes));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践-文件压缩与解压"><a href="#实践-文件压缩与解压" class="headerlink" title="实践-文件压缩与解压"></a>实践-文件压缩与解压</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将一个文件进行压缩</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> srcFile 传入的希望压缩文件的完整路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dstFile 压缩后将文件放到哪个目录下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zipFile</span><span class="params">(String srcFile,String dstFile)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建输出流</span></span><br><span class="line">OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">ObjectOutputStream oos=<span class="keyword">null</span>;</span><br><span class="line">FileInputStream is=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//创建文件的输入流</span></span><br><span class="line">is = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line"><span class="comment">//创建一个和源文件大小一样的byte数组</span></span><br><span class="line"><span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line">is.read(b);</span><br><span class="line"><span class="comment">//对源文件压缩</span></span><br><span class="line"><span class="keyword">byte</span>[] huffmanBytes = huffmanZip(b);</span><br><span class="line"><span class="comment">//创建文件输出流，存放压缩文件</span></span><br><span class="line">os = <span class="keyword">new</span> FileOutputStream(dstFile);</span><br><span class="line"><span class="comment">//创建一个和文件输出流关联的ObjectOutputStream</span></span><br><span class="line">oos = <span class="keyword">new</span> ObjectOutputStream(os);</span><br><span class="line"><span class="comment">//把赫夫曼编码后的字节数组写入压缩文件</span></span><br><span class="line">oos.writeObject(huffmanBytes);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里以对象流的方式写入赫夫曼编码，是为了以后我们恢复源文件时使用</span></span><br><span class="line"><span class="comment">//注意要把赫夫曼编码写入压缩文件</span></span><br><span class="line">oos.writeObject(huffmanCodes);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">oos.close();</span><br><span class="line">os.close();</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件解压</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">unZipFile</span><span class="params">(String zipFile,String dstFile)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义文件输入流</span></span><br><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//定义一个对象输入流</span></span><br><span class="line">ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//定义文件的输出流</span></span><br><span class="line">OutputStream os = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//创建文件输入流</span></span><br><span class="line">is =<span class="keyword">new</span> FileInputStream(zipFile);</span><br><span class="line"><span class="comment">//创建一个和is关联的对象输入流</span></span><br><span class="line">ois = <span class="keyword">new</span> ObjectInputStream(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取huffmanBytes</span></span><br><span class="line"><span class="keyword">byte</span>[] huffmanBytes = (<span class="keyword">byte</span>[])ois.readObject();</span><br><span class="line"><span class="comment">//读取赫夫曼编码表</span></span><br><span class="line">Map&lt;Byte,String&gt; codes =(Map&lt;Byte,String&gt;) ois.readObject();</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = decode(codes, huffmanBytes);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将bytes写入到目标文件</span></span><br><span class="line">os = <span class="keyword">new</span> FileOutputStream(dstFile);</span><br><span class="line"><span class="comment">//写出数据</span></span><br><span class="line">os.write(bytes);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">os.close();</span><br><span class="line">ois.close();</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赫夫曼编码压缩文件注意事项"><a href="#赫夫曼编码压缩文件注意事项" class="headerlink" title="赫夫曼编码压缩文件注意事项"></a>赫夫曼编码压缩文件注意事项</h2><ol><li>如果文件本省就是经过压缩处理的，那么使用赫夫曼编码再压缩效率不会有明显变化，比如视屏，ppt等等文件。</li><li>赫夫曼编码是按字节来处理的，因此可以处理所有文件。</li><li>如果一个文件中的内容，重复数据不多，压缩效果也不会很明显。</li></ol><h1 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h1><h2 id="先看一个需求"><a href="#先看一个需求" class="headerlink" title="先看一个需求"></a>先看一个需求</h2><p>给你一个数列（7,3,10,12,5,1,9），要求能够高效的完成对数据的查询和添加</p><h2 id="解决方案分析"><a href="#解决方案分析" class="headerlink" title="解决方案分析"></a>解决方案分析</h2><ol><li>使用<strong>数组</strong><ul><li>数组未排序，优点：直接在数组尾添加，速度快。缺点查找速度慢。</li><li>数组排序，优点：可以使用二分查找，查找速度快，缺点：为了保证数组有序，再添加新数据时，找到插入位置后，后面的数据需要整体移动，速度慢。</li></ul></li><li>使用<strong>链式存储-链表</strong><ul><li>不管链表是否有序，查找速度都很慢，添加速度比数组快，不需要整体移动数据。</li></ul></li><li>使用<strong>二叉排序树</strong></li></ol><h2 id="二叉排序树介绍"><a href="#二叉排序树介绍" class="headerlink" title="二叉排序树介绍"></a>二叉排序树介绍</h2><p><strong>二叉排序树</strong>：BST(Binary Sort(Search) Tree)，对于二叉排序树的<strong>任何一个非叶子节点</strong>，要求<strong>左子节点的值比当前节点的值小，右子节点的值比当前节点的值大。</strong></p><p><strong>特别说明</strong>：如果有相同的值，可以将该节点放在左子节点或右子节点。</p><p>比如针对前面的数据（7,3,10,12,5,1,9）对应的二叉排序树为：<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%E4%B8%BE%E4%BE%8B.png" alt=""></p><h2 id="二叉树的创建和遍历"><a href="#二叉树的创建和遍历" class="headerlink" title="二叉树的创建和遍历"></a>二叉树的创建和遍历</h2><h3 id="首先创建节点类"><a href="#首先创建节点类" class="headerlink" title="首先创建节点类"></a>首先创建节点类</h3><p>这里面有一个中序遍历方法，下面我们在加入add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line">Node left;</span><br><span class="line">Node right;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Node [value="</span> + value + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.left.infixOrder();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right.infixOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加节点</strong></p><p>思路：</p><ol><li>首先判断加入的节点是不是空，是空就直接返回。</li><li>不是空的话，根据二叉排序树的特点，我们应该使要加入节点的值与当前节点的值进行比较。</li><li>加入节点的值大于当前节点的值，要放在右子树</li><li>加入节点的值小于当前节点的值，要放在左子树</li><li>所以去递归找位置即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加节点</span></span><br><span class="line"><span class="comment">//递归形式添加节点，满足二叉排序树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断传入节点的值和当前子树的根节点关系</span></span><br><span class="line"><span class="keyword">if</span>(node.value &lt; <span class="keyword">this</span>.value) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left == <span class="keyword">null</span>) &#123;<span class="comment">//如果当前节点左子节点为空</span></span><br><span class="line"><span class="keyword">this</span>.left = node;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.left.add(node);<span class="comment">//递归向左子树添加</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right =node;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.right.add(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建二叉排序树"><a href="#创建二叉排序树" class="headerlink" title="创建二叉排序树"></a>创建二叉排序树</h3><p>在这里面去调用上面node类里的add和中序遍历方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建二叉排序树</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySortTree</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>) &#123;</span><br><span class="line">root = node;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">root.add(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root!=<span class="keyword">null</span>) &#123;</span><br><span class="line">root.infixOrder();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"空树无法遍历"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉排序树的删除"><a href="#二叉排序树的删除" class="headerlink" title="二叉排序树的删除"></a>二叉排序树的删除</h2><p>二叉排序树的删除情况比较复杂，有下面三种情况需要考虑</p><ol><li><strong>删除叶子节点</strong></li><li>删除<strong>只有一颗子树的节点</strong></li><li>删除<strong>有两颗子树的节点</strong></li></ol><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p><strong>第一种情况：删除叶子节点</strong></p><ol><li>需要先去找到要删除的节点 targetNode.</li><li>然后找到targetNode的父节点parent</li><li>确定targetNode是parent的左子节点还是右子节点</li><li>根据前面的情况来对应删除<ul><li>左子节点 parent.left = null;</li><li>右子节点 parent.right = null;</li></ul></li></ol><p><strong>第二种情况：删除只有一颗子树的节点</strong></p><ol><li>需要先去找到要删除的节点 targerNode</li><li>找到targetNode的父节点parent</li><li>确定parent的子节点是左子节点还是右子节点</li><li>确定targetNode是parent的左子节点还是右子节点</li><li>如果targetNode有左子节点<ol><li>如果targetNode是parent的左子节点<ul><li>parent.left = targetNode.left</li></ul></li><li>如果targetNode是parent的右子节点<ul><li>parent.right = targetNode.left</li></ul></li></ol></li><li>如果targetNode有右子节点<ol><li>如果targetNode是parent的左子节点<ul><li>parent.left = target.right</li></ul></li><li>如果targetNode是parent的右子节点<ul><li>parent.right = targetNode.right</li></ul></li></ol></li></ol><p><strong>第三种情况：删除有两颗子树的节点</strong></p><ol><li>需要先去找到要删除的节点 targetNode</li><li>找到targetNode的父节点parent</li><li>从targetNode的右子树找到最小的节点（或者从左子树找到最大的节点）</li><li>用一个临时变量，将最小节点的值保存</li><li>删除该最小节点</li><li>targetNode.value = 临时变量</li></ol><h3 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>首先在Node节点类中加入两个方法</strong></p><p>1.查找要删除的节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找要删除的节点</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 希望删除的节点的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果找到，返回该节点，否则返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">search</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(value == <span class="keyword">this</span>.value) &#123;<span class="comment">//说明找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(value&lt;<span class="keyword">this</span>.value) &#123;<span class="comment">//如果查找的值，小于当前节点，向左子树递归查找</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.left.search(value);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//大于</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.right.search(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.查找要删除节点的父节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找要删除节点的父节点</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 要找的节点的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回要删除节点的父节点，没有返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">searchParent</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">this</span>.left!=<span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.left.value==value) || (<span class="keyword">this</span>.right!=<span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.right.value==value)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果查找的值小于当前节点的值，并且当前节点的左子节点不为空</span></span><br><span class="line"><span class="keyword">if</span>(value&lt;<span class="keyword">this</span>.value &amp;&amp; <span class="keyword">this</span>.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.left.searchParent(value);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(value &gt;= <span class="keyword">this</span>.value &amp;&amp; <span class="keyword">this</span>.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.right.searchParent(value);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后在二叉排序树中加入它们的调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找要删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">search</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> root.search(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找要删除节点的父节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">searchParent</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> root.searchParent(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种情况有删除最小值节点，所以在加入一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写一个方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 当做二叉排序树的根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 以node为根节点的二叉排序树的最小节点的值，删除它</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delRightTreeMin</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">Node target = node;</span><br><span class="line"><span class="comment">//循环查找左节点,就会找到最小值</span></span><br><span class="line"><span class="keyword">while</span>(target.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line">target = target.left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这时target就指向了最小节点</span></span><br><span class="line"><span class="comment">//删除最小节点</span></span><br><span class="line">delNode(target.value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> target.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写删除节点方法</strong></p><p>这里的代码与上面的思路分析是一致的。</p><p>要注意的一点是：删除只有一颗子树的节点，如果这个节点是根节点，那它是没有父节点的，这里要判断一下，对应下面34与47行，如果它是根节点的话，只需要把它的左子节点或右子节点变为根就OK了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delNode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//1.需要先去找到要删除的节点</span></span><br><span class="line">Node targetNode = search(value);</span><br><span class="line"><span class="comment">//如果没有找到删除的节点</span></span><br><span class="line"><span class="keyword">if</span>(targetNode==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果我们发现当前这颗二叉排序树只有一个节点</span></span><br><span class="line"><span class="keyword">if</span>(root.left==<span class="keyword">null</span> &amp;&amp; root.right==<span class="keyword">null</span>) &#123;</span><br><span class="line">root = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去查找targetNode的父节点</span></span><br><span class="line">Node parent = searchParent(value);</span><br><span class="line"><span class="comment">//如果要删除的节点是叶子节点</span></span><br><span class="line"><span class="keyword">if</span>(targetNode.left==<span class="keyword">null</span> &amp;&amp; targetNode.right==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//判断targetNode是父节点的左子节点还是右子节2点</span></span><br><span class="line"><span class="keyword">if</span>(parent.left!=<span class="keyword">null</span> &amp;&amp; parent.left.value==value) &#123;</span><br><span class="line">parent.left=<span class="keyword">null</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(parent.right!=<span class="keyword">null</span> &amp;&amp; parent.right.value==value) &#123;</span><br><span class="line">parent.right=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(targetNode.left!=<span class="keyword">null</span> &amp;&amp; targetNode.right!=<span class="keyword">null</span>) &#123;<span class="comment">//删除有两颗子树的节点</span></span><br><span class="line"><span class="keyword">int</span> minVal = delRightTreeMin(targetNode.right);</span><br><span class="line">targetNode.value = minVal;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//删除有一颗子树的节点</span></span><br><span class="line"><span class="comment">//如果要删除的节点有左子节点</span></span><br><span class="line"><span class="keyword">if</span>(targetNode.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(parent!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//如果targetNode是parent的左子节点</span></span><br><span class="line"><span class="keyword">if</span>(parent.left.value == value) &#123;</span><br><span class="line">parent.left = targetNode.left;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//说明是parent的右子节点</span></span><br><span class="line">parent.right = targetNode.left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">root = targetNode.left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//要删除的节点有右子节点</span></span><br><span class="line"><span class="keyword">if</span>(parent!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//如果trgetNode是parent的左子节点</span></span><br><span class="line"><span class="keyword">if</span>(parent.left.value==value) &#123;</span><br><span class="line">parent.left = targetNode.right;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//trgetNode是parent的右子节点</span></span><br><span class="line">parent.right = targetNode.right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">root = targetNode.right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉平衡树（AVL树）"><a href="#二叉平衡树（AVL树）" class="headerlink" title="二叉平衡树（AVL树）"></a>二叉平衡树（AVL树）</h1><h2 id="二叉排序树可能的问题"><a href="#二叉排序树可能的问题" class="headerlink" title="二叉排序树可能的问题"></a>二叉排序树可能的问题</h2><p>给你一个数列{1,2,3,4,5,6}要求创建一颗二叉排序树（BST）并分析问题所在。</p><p><strong>左边BST存在的问题分析</strong>：</p><ol><li>左子树全部为空，从形式上看，更像一个单链表。</li><li>插入速度没有影响。</li><li>查询速度明显降低（因为需要一次比较），不能发挥BST的有时，因为每次还需要比较左子树，其查询速度比单链表还慢。</li><li>解决方案-平衡二叉树（AVL）</li></ol><h2 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol><li>平衡二叉树也叫平衡<strong>二叉搜索树</strong>又被称为AVL树，可以保证查询效率较高。</li><li>具有以下特点：它是<strong>一颗空树</strong>或<strong>它的左右两个子树的高度差的绝对值不超过1</strong>，并且<strong>左右两个子树都是一颗平衡二叉树</strong>。平衡二叉树的常用实现方法有红黑树，AVL,等等</li></ol><h2 id="应用案例–单旋转（右旋转）"><a href="#应用案例–单旋转（右旋转）" class="headerlink" title="应用案例–单旋转（右旋转）"></a>应用案例–单旋转（右旋转）</h2><p>要求：给你一个数列，创建出对应的平衡二叉树，数列{10,12,8,9,7,6}<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/AVL01.png" style="zoom:50%;" /></p><p>由此看出，当插入6这个节点时，左子树高度为3，右子树高度为1,3-1=2&gt;1，此时已经不是AVL数了。</p><p>这时候我们要右旋转，来保持平衡。</p><p><strong>步骤</strong></p><ol><li>创建一颗新的节点newNode,值等于根节点的值</li><li>把新节点的右子树设置成当前节点的右子树 <code>newNode.right=right</code></li><li>把新节点的左子树设置为当前节点的左子树的右子树。<code>newNode.left=this.left.right</code></li><li>把当前节点的值换为左子节点的值 <code>value=left.value</code></li><li>把当前节点的左子树设置成左子树的左子树 <code>left = left.left</code></li><li>把当前节点的右子树设置为新节点 <code>this.right = newNode</code></li></ol><p><strong>图解</strong></p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/AVL%E5%8F%B3%E6%97%8B%E8%BD%AC.png" style="zoom:150%;" /><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//右旋转</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Node newNode = <span class="keyword">new</span> Node(<span class="keyword">this</span>.value);</span><br><span class="line">newNode.right = <span class="keyword">this</span>.right;</span><br><span class="line">newNode.left = <span class="keyword">this</span>.left.right;</span><br><span class="line"><span class="keyword">this</span>.value = <span class="keyword">this</span>.left.value;</span><br><span class="line"><span class="keyword">this</span>.left = <span class="keyword">this</span>.left.left;</span><br><span class="line">right = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用案例–单旋转（左旋转）"><a href="#应用案例–单旋转（左旋转）" class="headerlink" title="应用案例–单旋转（左旋转）"></a>应用案例–单旋转（左旋转）</h2><p>要求：给你个数列，创建出对应的平衡二叉树，数列{4,3,6,5,7,8}<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/AVL02.png" style="zoom: 50%;" /></p><p>由此看出，当我们插入8这个节点时，它的左子树高度为1，右子树高度为3,3-1=2&gt;1</p><p>此时我们应该向左旋转以维持平衡。</p><p><strong>步骤</strong></p><ol><li>创建新节点，值为当前节点的值。</li><li>设置新节点的左子树为当前节点的左子树。<code>newNode.left=this.left</code></li><li>设置新节点的右子树为当前节点右子树的左子树。<code>newNode.right = this.right.left</code></li><li>把当前节点的值换为右子节点的值。<code>this.value = this.right.value</code></li><li>把当前节点的右子树设置为右子树的右子树。<code>this.right = this.right.right</code></li><li>把当前节点的左子树设置为新节点。<code>this.left = newNode</code></li></ol><p><strong>图解</strong></p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/AVL%E5%B7%A6%E6%97%8B%E8%BD%AC.png" style="zoom:150%;" /><p><strong>代码实现</strong></p><p>将下面代码放入Node节点类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左旋转</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//以当前根节点的值，创建新节点</span></span><br><span class="line">Node newNode = <span class="keyword">new</span> Node(<span class="keyword">this</span>.value);</span><br><span class="line"><span class="comment">//把新的节点的左子树，设置成当前节点的左子树</span></span><br><span class="line">newNode.left = <span class="keyword">this</span>.left;</span><br><span class="line"><span class="comment">//把新的节点的右子树，设置成当前节点的右子树的左子树</span></span><br><span class="line">newNode.right = <span class="keyword">this</span>.right.left;</span><br><span class="line"><span class="comment">//把当前节点的值，替换成右子节点的值</span></span><br><span class="line"><span class="keyword">this</span>.value =right.value;</span><br><span class="line"><span class="comment">//把当前节点的右子树，设置成当前的点右子树的右子树</span></span><br><span class="line"><span class="keyword">this</span>.right =<span class="keyword">this</span>.right.right;</span><br><span class="line"><span class="comment">//把当前节点的左子树（左子节点）设置成新的节点</span></span><br><span class="line"><span class="keyword">this</span>.left  = newNode;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用案例双旋转"><a href="#应用案例双旋转" class="headerlink" title="应用案例双旋转"></a>应用案例双旋转</h2><p>前面两个数列，进行单旋转（即一次旋转）就可以将非平衡二叉树转成平衡二叉树，但是在某些情况下，单旋转不能完成平衡二叉树的转换。比如：</p><h3 id="第一种情况：满足右旋转，并且当前节点左子树的右子树高度，大于左子树高度"><a href="#第一种情况：满足右旋转，并且当前节点左子树的右子树高度，大于左子树高度" class="headerlink" title="第一种情况：满足右旋转，并且当前节点左子树的右子树高度，大于左子树高度"></a>第一种情况：满足右旋转，并且当前节点左子树的右子树高度，大于左子树高度</h3><p><code>int[] arr={10,11,7,6,8,9}</code></p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/AVL%E5%8F%8C%E6%97%8B%E8%BD%AC%E5%8F%B3%E6%97%8B%E8%BD%AC%E4%B8%8D%E6%88%90%E7%AB%8B.png" style="zoom:50%;" /><p>由上图我们可以看出，在右旋转之后，并没有使树平衡。</p><p><strong>解决思路</strong></p><ol><li>先对当前节点的左节点进行左旋转。</li><li>然后再对当前节点进行右旋转。</li></ol><p><strong>图解</strong></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/AVL%E5%85%88%E5%B7%A6%E5%90%8E%E5%8F%B3.png" alt=""></p><h3 id="第二种情况：满足左旋转，当前节点右子树的左子树高度，大于右子树高度"><a href="#第二种情况：满足左旋转，当前节点右子树的左子树高度，大于右子树高度" class="headerlink" title="第二种情况：满足左旋转，当前节点右子树的左子树高度，大于右子树高度"></a>第二种情况：满足左旋转，当前节点右子树的左子树高度，大于右子树高度</h3><p>int[] arr={2,1,6,5,7,3}</p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/AVL%E5%8F%8C%E6%97%8B%E8%BD%AC%E5%B7%A6%E6%97%8B%E8%BD%AC%E4%B8%8D%E6%88%90%E7%AB%8B.png" style="zoom: 50%;" /><p>由图可知，左旋转之后，树并没有平衡。</p><p><strong>解决思路</strong></p><ol><li>先对当前节点右节点进行右旋转。</li><li>然后对当前节点进行左旋转。</li></ol><p><strong>图解</strong></p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/AVL%E5%85%88%E5%8F%B3%E5%90%8E%E5%B7%A6.png" alt=""></p><p>以上便是所有情况，我们在加入节点使，进行判断使树一直保持平衡就行了。</p><h2 id="应用案例代码整合"><a href="#应用案例代码整合" class="headerlink" title="应用案例代码整合"></a>应用案例代码整合</h2><p><strong>首先，怎么旋转是根据左子树与右子树的高度来决定的。</strong></p><p>因此我们先别一个方法求<strong>以当前节点为根节点的这棵树的高度</strong>。</p><p>这里使用了递归，树的高度就是左边或右边比较大的那个。这里巧就巧在最后的+1上。可以仔细理解一下！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回以当前节点为根节点的这棵树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span>  <span class="title">height</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Math.max(left==<span class="keyword">null</span>?<span class="number">0</span>:left.height(),right==<span class="keyword">null</span>?<span class="number">0</span>:right.height())+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是求左子树和右子树高度的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回左子树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">leftHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left.height();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回右子树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rightHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(right==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> right.height();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最终整合代码</strong></p><p>这其中关于怎么旋转的调用，放到Node类的add方法最后。也就是每加入一个节点，就判断一下它是不是导致不平衡了，然后进行相应的旋转。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> avl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AVLTreeDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//int[] arr = &#123;4,3,6,5,7,8&#125;;</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">6</span>&#125;;</span><br><span class="line">AVLTree tree = <span class="keyword">new</span> AVLTree();</span><br><span class="line"><span class="comment">//添加节点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">tree.add(<span class="keyword">new</span> Node(arr[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line">tree.infixOrder();</span><br><span class="line"></span><br><span class="line"><span class="comment">//在没有旋转之前</span></span><br><span class="line">System.out.println(<span class="string">"在没有平衡处理后"</span>);</span><br><span class="line">System.out.println(<span class="string">"树的高度："</span>+tree.getRoot().height());</span><br><span class="line">System.out.println(<span class="string">"左子树高度："</span>+tree.getRoot().leftHeight());</span><br><span class="line">System.out.println(<span class="string">"右子树高度"</span>+tree.getRoot().rightHeight());</span><br><span class="line">System.out.println(tree.getRoot());</span><br><span class="line">System.out.println(tree.getRoot().right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//树</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AVLTree</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>) &#123;</span><br><span class="line">root = node;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">root.add(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root!=<span class="keyword">null</span>) &#123;</span><br><span class="line">root.infixOrder();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"空树无法遍历"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找要删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">search</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> root.search(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找要删除节点的父节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">searchParent</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> root.searchParent(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 当做二叉排序树的根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 以node为根节点的二叉排序树的最小节点的值，删除它</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delRightTreeMin</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">Node target = node;</span><br><span class="line"><span class="comment">//循环查找左节点,就会找到最小值</span></span><br><span class="line"><span class="keyword">while</span>(target.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line">target = target.left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这时target就指向了最小节点</span></span><br><span class="line"><span class="comment">//删除最小节点</span></span><br><span class="line">delNode(target.value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> target.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delNode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//1.需要先去找到要删除的节点</span></span><br><span class="line">Node targetNode = search(value);</span><br><span class="line"><span class="comment">//如果没有找到删除的节点</span></span><br><span class="line"><span class="keyword">if</span>(targetNode==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果我们发现当前这颗二叉排序树只有一个节点</span></span><br><span class="line"><span class="keyword">if</span>(root.left==<span class="keyword">null</span> &amp;&amp; root.right==<span class="keyword">null</span>) &#123;</span><br><span class="line">root = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去查找targetNode的父节点</span></span><br><span class="line">Node parent = searchParent(value);</span><br><span class="line"><span class="comment">//如果要删除的节点是叶子节点</span></span><br><span class="line"><span class="keyword">if</span>(targetNode.left==<span class="keyword">null</span> &amp;&amp; targetNode.right==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//判断targetNode是父节点的左子节点还是右子节点</span></span><br><span class="line"><span class="keyword">if</span>(parent.left!=<span class="keyword">null</span> &amp;&amp; parent.left.value==value) &#123;</span><br><span class="line">parent.left=<span class="keyword">null</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(parent.right!=<span class="keyword">null</span> &amp;&amp; parent.right.value==value) &#123;</span><br><span class="line">parent.right=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(targetNode.left!=<span class="keyword">null</span> &amp;&amp; targetNode.right!=<span class="keyword">null</span>) &#123;<span class="comment">//删除有两颗子树的节点</span></span><br><span class="line"><span class="keyword">int</span> minVal = delRightTreeMin(targetNode.right);</span><br><span class="line">targetNode.value = minVal;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//删除有一颗子树的节点</span></span><br><span class="line"><span class="comment">//如果要删除的节点有左子节点</span></span><br><span class="line"><span class="keyword">if</span>(targetNode.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(parent!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//如果targetNode是parent的左子节点</span></span><br><span class="line"><span class="keyword">if</span>(parent.left.value == value) &#123;</span><br><span class="line">parent.left = targetNode.left;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//说明是parent的右子节点</span></span><br><span class="line">parent.right = targetNode.left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">root = targetNode.left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//要删除的节点有右子节点</span></span><br><span class="line"><span class="keyword">if</span>(parent!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//如果trgetNode是parent的左子节点</span></span><br><span class="line"><span class="keyword">if</span>(parent.left.value==value) &#123;</span><br><span class="line">parent.left = targetNode.right;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//trgetNode是parent的右子节点</span></span><br><span class="line">parent.right = targetNode.right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">root = targetNode.right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line">Node left;</span><br><span class="line">Node right;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Node [value="</span> + value + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回左子树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">leftHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left.height();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回右子树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rightHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(right==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> right.height();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回以当前节点为根节点的这棵树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span>  <span class="title">height</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Math.max(left==<span class="keyword">null</span>?<span class="number">0</span>:left.height(),right==<span class="keyword">null</span>?<span class="number">0</span>:right.height())+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左旋转</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//以当前根节点的值，创建新节点</span></span><br><span class="line">Node newNode = <span class="keyword">new</span> Node(<span class="keyword">this</span>.value);</span><br><span class="line"><span class="comment">//把新的节点的左子树，设置成当前节点的左子树</span></span><br><span class="line">newNode.left = <span class="keyword">this</span>.left;</span><br><span class="line"><span class="comment">//把新的节点的右子树，设置成当前节点的右子树的左子树</span></span><br><span class="line">newNode.right = <span class="keyword">this</span>.right.left;</span><br><span class="line"><span class="comment">//把当前节点的值，替换成右子节点的值</span></span><br><span class="line"><span class="keyword">this</span>.value =right.value;</span><br><span class="line"><span class="comment">//把当前节点的右子树，设置成当前的点右子树的右子树</span></span><br><span class="line"><span class="keyword">this</span>.right =<span class="keyword">this</span>.right.right;</span><br><span class="line"><span class="comment">//把当前节点的左子树（左子节点）设置成新的节点</span></span><br><span class="line"><span class="keyword">this</span>.left  = newNode;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//右旋转</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Node newNode = <span class="keyword">new</span> Node(<span class="keyword">this</span>.value);</span><br><span class="line">newNode.right = <span class="keyword">this</span>.right;</span><br><span class="line">newNode.left = <span class="keyword">this</span>.left.right;</span><br><span class="line"><span class="keyword">this</span>.value = <span class="keyword">this</span>.left.value;</span><br><span class="line"><span class="keyword">this</span>.left = <span class="keyword">this</span>.left.left;</span><br><span class="line">right = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加节点</span></span><br><span class="line"><span class="comment">//递归形式添加节点，满足二叉排序树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断传入节点的值和当前子树的根节点关系</span></span><br><span class="line"><span class="keyword">if</span>(node.value &lt; <span class="keyword">this</span>.value) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left == <span class="keyword">null</span>) &#123;<span class="comment">//如果当前节点左子节点为空</span></span><br><span class="line"><span class="keyword">this</span>.left = node;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.left.add(node);<span class="comment">//递归向左子树添加</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right =node;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.right.add(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当添加完一个节点后，如果右子树的高度-左子树的高度&gt;1,左旋转</span></span><br><span class="line"><span class="keyword">if</span>(rightHeight()-leftHeight()&gt;<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//如果它的右子树的左子树的高度大于它的右子树的右子树高度</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right!=<span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.right.leftHeight() &gt; <span class="keyword">this</span>.right.rightHeight()) &#123;</span><br><span class="line"><span class="comment">//先对右子节点进行右旋转</span></span><br><span class="line">right.rightRotate();</span><br><span class="line"><span class="comment">//然后再对当前节点进行左旋转</span></span><br><span class="line">leftRotate();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">leftRotate();<span class="comment">//左旋转</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//这里处理完就结束，不往下判断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当添加完一个节点后，如果（左子树高度-右子树高度）&gt;1,右旋转</span></span><br><span class="line"><span class="keyword">if</span>(leftHeight()-rightHeight()&gt;<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//如果它的左子树的右子树的高度大于它的左子树的左子树高度</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left!=<span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.left.rightHeight() &gt; <span class="keyword">this</span>.left.leftHeight()) &#123;</span><br><span class="line"><span class="comment">//先对当前节点的左节点（左子树）进行左旋转</span></span><br><span class="line">left.leftRotate();</span><br><span class="line"><span class="comment">//在对当前节点进行右旋转</span></span><br><span class="line">rightRotate();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//不满足就直接进行右旋转</span></span><br><span class="line">rightRotate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.left.infixOrder();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right.infixOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找要删除的节点</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 希望删除的节点的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果找到，返回该节点，否则返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">search</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(value == <span class="keyword">this</span>.value) &#123;<span class="comment">//说明找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(value&lt;<span class="keyword">this</span>.value) &#123;<span class="comment">//如果查找的值，小于当前节点，向左子树递归查找</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.left==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.left.search(value);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//大于</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.right==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.right.search(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找要删除节点的父节点</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 要找的节点的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回要删除节点的父节点，没有返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">searchParent</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">this</span>.left!=<span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.left.value==value) || (<span class="keyword">this</span>.right!=<span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.right.value==value)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果查找的值小于当前节点的值，并且当前节点的左子节点不为空</span></span><br><span class="line"><span class="keyword">if</span>(value&lt;<span class="keyword">this</span>.value &amp;&amp; <span class="keyword">this</span>.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.left.searchParent(value);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(value &gt;= <span class="keyword">this</span>.value &amp;&amp; <span class="keyword">this</span>.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.right.searchParent(value);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多路查找树"><a href="#多路查找树" class="headerlink" title="多路查找树"></a>多路查找树</h1><h2 id="二叉树的问题"><a href="#二叉树的问题" class="headerlink" title="二叉树的问题"></a>二叉树的问题</h2><ol><li>二叉树需要加载到内存，如果二叉树节点少，没什么问题，但如果二叉树的节点很多，就存在如下问题：<ol><li>问题1：在构建二叉树时，需要多次进行i/o操作（海量数据存在数据库或文件中），节点海量，构建二叉树时速度有影响。</li><li>问题2：节点海量，也会造成二叉树的高度很大，会降低操作速度。</li></ol></li></ol><h2 id="多叉树"><a href="#多叉树" class="headerlink" title="多叉树"></a>多叉树</h2><ol><li>在二叉树中，每个节点有数据项，最多有两个子节点。如果允许每个节点可以有更多的数据项和更多的子节点，就是多叉树。</li><li>2-3树，2-3-4树就是多叉树，多叉树通过重新组织节点，减少树的高度，能对二叉树惊醒优化。</li><li>举例</li></ol><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%A4%9A%E5%8F%89%E6%A0%91%E4%B8%BE%E4%BE%8B.png" style="zoom:67%;" /><h2 id="B树的基本介绍"><a href="#B树的基本介绍" class="headerlink" title="B树的基本介绍"></a>B树的基本介绍</h2><p>B树通过重新组织节点，降低树的高度，并且减少i/o读写次数来提升效率。<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/B%E6%A0%91%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D.png" alt=""></p><ol><li>如图B树通过重新组织节点，降低了树的高度。</li><li>文件系统及数据库系统的设计者利用了磁盘预读原理，将一个节点的大小设为等于一个页（页得大小通常为4K），这样每个节点只需要一次I/O就可以完全载入。</li><li>将树的度M设置为124，在600亿个元素中最多只需要4次I/O操作就可以读取到想要的元素，B树（B+）广泛应用于文件存储系统以及数据库系统中。</li></ol><h2 id="2-3树"><a href="#2-3树" class="headerlink" title="2-3树"></a>2-3树</h2><p><strong>2-3树是最简单的B树结构，具有如下特点：</strong></p><ol><li>2-3树的所有叶子节点都在同一层（只要是B树都满足这个条件）</li><li>有两个子节点的节点叫二节点，二节点要么没有子节点，要么有两个子节点。</li><li>有三个子节点的节点叫三节点，三节点要么没有子节点，要么有三个子节点。</li><li>2-3树是由二节点和三节点构成的树。</li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>将数列{16,24,12,32,14,26,34,10,8,28,38,20}构建成2-3树，并保证数据插入的大小顺序。</p><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/2-3%E6%A0%91.png" alt=""></p><h1 id="B树，B-树和B-树"><a href="#B树，B-树和B-树" class="headerlink" title="B树，B+树和B*树"></a>B树，B+树和B*树</h1><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/B%E6%A0%91.png" alt=""></p><p>说明：</p><ol><li>B树的阶：节点的最多子节点个数。比如2-3树的阶是3,  2-3-4树的阶是4.</li><li>B-树的搜索，从根节点开始，对节点内的关键字（有序）序列进行二分查找，如果命中则结束，否则紧促查询关键字所属范围的儿子节点；重读，知道所对应的儿子指针为空，或已经是叶子节点。</li><li>关键字集合分布在整棵树中，即叶子节点和非叶子节点都存放数据。</li><li>搜索有可能在非叶子节点结束。</li><li>其搜索性能等价于在关键字全集内做一次二分查找。</li></ol><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><p>B+树是B树的变体，也是多路搜索树。</p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/B%2B%E6%A0%91.png" style="zoom:80%;" /><p>说明：</p><ol><li>B+树的搜索与B树也基本相同，区别是B+树只有达到叶子节点才命中（B树可以在非叶子节点），其性能也等价于在关键字全集做一次二分查找。</li><li>所有关键字都出现在叶子节点的链表中（即数据只能在叶子节点【也叫稠密索引】），且链表中的关键字（数据）恰好是有序的。</li><li>不可能在非叶子节点命中。</li><li>非叶子节点相当于是叶子节点的索引（稀疏索引），叶子节点相当于存储（关键字）数据的数据层。</li><li>更适合文建索引系统</li><li>B树和B+树各有各自的应用场景。</li></ol><h2 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B*树"></a>B*树</h2><p>B*树是B+树的变体，在B+树的非根和非叶子节点再增加指向兄弟的指针。</p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/B%E6%98%9F%E6%A0%91.png" style="zoom:80%;" /><p>说明：</p><ol><li><code>B*</code>树定义了非叶子节点关键字个数至少为<code>（2/3）*M</code>,而B+树的块的最低使用率为的1/2.</li><li>从第1个特点我们可以看出，B*树分配新节点的概率比B+树要低，空间使用率更高。</li></ol><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="基本介绍-5"><a href="#基本介绍-5" class="headerlink" title="基本介绍"></a>基本介绍</h2><h3 id="为什么要有图"><a href="#为什么要有图" class="headerlink" title="为什么要有图"></a>为什么要有图</h3><ol><li>前面我们学了线性表和树</li><li>线性表局限于一个直接前驱和一个直接后驱的关系</li><li>树也只能有一个直接前驱也就是父节点</li><li>放我们需要<strong>表示多对多</strong>的关系时，这里我们就用到了图</li></ol><h3 id="图的举例"><a href="#图的举例" class="headerlink" title="图的举例"></a>图的举例</h3><p>图是一种<strong>数据结构</strong>，其中节点可以具有零个或多个相邻元素。两个节点直接按的连接称为边。节点也可以称为顶点。如图：<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E5%9B%BE.png" alt=""></p><h3 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h3><ol><li><p>顶点（vertex）</p></li><li><p>边（edge）</p></li><li><p>路径</p></li><li><p>无向图<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E6%97%A0%E5%90%91%E5%9B%BE.png" style="zoom:50%;" /></p></li><li><p>有向图</p></li><li><p>带权图<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E6%9C%89%E5%90%91%E5%9B%BE%E5%92%8C%E5%B8%A6%E6%9D%83%E5%9B%BE.png" style="zoom:50%;" /></p></li></ol><h2 id="图的表示方式"><a href="#图的表示方式" class="headerlink" title="图的表示方式"></a>图的表示方式</h2><p>图的表示方式有两种：二维数组表示（邻接矩阵）；链表表示（邻接表）。</p><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p>邻接矩阵是表示图形中顶点之间相邻关系的矩阵，对于n各顶点的图而言，矩阵的row和col表示的是1…n个点。<img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5.png" alt=""></p><p>例如：1和0连接，那么(1,0)=1  (0,1)=1</p><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><ol><li>邻接矩阵需要为每个顶点都分配n个边的空间，其实有很多边都是不存在的，会造成空间的一定损失。</li><li>邻接表的实现之关系存在的边，不关心不存在的边。因此没有空间良妃，邻接表有数组+链表组成</li></ol><p><img src="https://hexolee.oss-cn-beijing.aliyuncs.com/hexo/shujujiegou/%E9%82%BB%E6%8E%A5%E8%A1%A8.png" alt=""></p><h2 id="图的快速入门"><a href="#图的快速入门" class="headerlink" title="图的快速入门"></a>图的快速入门</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;String&gt; vertexList;<span class="comment">//存储顶点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[][] edges;<span class="comment">//存储图的对应的邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numOfEdges;<span class="comment">//表示边个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数组boolean[] 记录某个节点是否被访问</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span>[] isVisited;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">String VertexValue[] = &#123;<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>&#125;;</span><br><span class="line"><span class="comment">//创建图对象</span></span><br><span class="line">Graph graph= <span class="keyword">new</span> Graph(n);</span><br><span class="line"><span class="comment">//循环添加顶点</span></span><br><span class="line"><span class="keyword">for</span>(String value:VertexValue) &#123;</span><br><span class="line">graph.insertVertex(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加边  A-B,A-C,B-C,B-D,B-E</span></span><br><span class="line">graph.insertEdge(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//显示一把</span></span><br><span class="line">graph.showGraph();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化矩阵和vertexList</span></span><br><span class="line">edges = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">vertexList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">numOfEdges = <span class="number">0</span>;</span><br><span class="line">isVisited = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图中常用方法</span></span><br><span class="line"><span class="comment">//返回节点个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumOfVertex</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> vertexList.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回边的树目</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumOfEdges</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> numOfEdges;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回节点i对应的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getValueByIndex</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> vertexList.get(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回v1和v2的权值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWeight</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> edges[v1][v2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示图对应的矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showGraph</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] link:edges) &#123;</span><br><span class="line">System.out.println(Arrays.toString(link));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertVertex</span><span class="params">(String vertex)</span> </span>&#123;</span><br><span class="line">vertexList.add(vertex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加边</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> v1 第一个点的下标，即第几个顶点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> v2 第二个点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> weight 权值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertEdge</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2,<span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">edges[v1][v2] = weight;</span><br><span class="line">edges[v2][v1] = weight;</span><br><span class="line">numOfEdges++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图的深度优先遍历"><a href="#图的深度优先遍历" class="headerlink" title="图的深度优先遍历"></a>图的深度优先遍历</h2><h3 id="图遍历介绍"><a href="#图遍历介绍" class="headerlink" title="图遍历介绍"></a>图遍历介绍</h3><p>所谓图的遍历，即是对节点的访问。一个图有那么多个节点，如果遍历这些节点，需要特定策略，一般有两种：深度优先遍历和广度优先遍历。</p><h3 id="深度优先遍历基本思想"><a href="#深度优先遍历基本思想" class="headerlink" title="深度优先遍历基本思想"></a>深度优先遍历基本思想</h3><p>图的深度优先搜索（DFS(Depth First Search)）</p><ol><li>深度优先遍历，从初始访问节点触发，初始访问节点可能有多个邻接节点，深度优先遍历的策略就是首先访问第一个邻接节点，然后在以这个被访问的邻接节点作为初始节点，访问它的第一个邻接节点。可以这样理解：每次都在访问完当前节点后首先访问当前节点的第一邻接节点。</li><li>我们可以看到，这样的访问策略是优先往纵向挖掘深入，而不是对一个节点的所有邻接节点进行横向访问。</li><li>显然，深度优先搜索是一个递归的过程。</li></ol><h3 id="深度优先遍历算法步骤"><a href="#深度优先遍历算法步骤" class="headerlink" title="深度优先遍历算法步骤"></a>深度优先遍历算法步骤</h3><ol><li>访问初始节点v，并标记节点v为已访问。</li><li>查找节点v的第一个邻接节点w。</li><li>若w存在，再继续执行4,如果不存在，则回到第一步，将从v的下一个节点继续。</li><li>若w未被访问，对w进行深度优先遍历递归（即把w当做另一个v，然后进行步骤123）。</li><li>查找节点v的w邻接节点的下一个邻接节点，转到步骤3.</li></ol><h3 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h3><p>核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearState</span><span class="params">(<span class="keyword">boolean</span>[] isVisited)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;isVisited.length;i++) &#123;</span><br><span class="line">isVisited[i] = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//得到第一个邻接节点的下标</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果存在返回对应下标，否则返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirstNeighbor</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;vertexList.size();j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(edges[index][j]&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据前一个邻接节点的下标来获取下一个邻接节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNextNeighbor</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = v2+<span class="number">1</span>;j&lt;vertexList.size();j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(edges[v1][j] &gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//深度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">boolean</span>[] isVisited,<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="comment">//首先访问该节点</span></span><br><span class="line">System.out.print(getValueByIndex(i)+<span class="string">"-&gt;"</span>);</span><br><span class="line"><span class="comment">//将该节点设置为已经访问过</span></span><br><span class="line">isVisited[i] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w = getFirstNeighbor(i);</span><br><span class="line"><span class="keyword">while</span>(w!=-<span class="number">1</span>) &#123;<span class="comment">//有邻接节点</span></span><br><span class="line"><span class="comment">//判断有没有访问过</span></span><br><span class="line"><span class="keyword">if</span>(!isVisited[w]) &#123;</span><br><span class="line">dfs(isVisited,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果w节点已经被访问过，去找邻接点的下一个</span></span><br><span class="line">w = getNextNeighbor(i, w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对dfs进行重载，遍历所有的节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">clearState(isVisited);</span><br><span class="line"><span class="comment">//遍历所有节点进行dfs</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;getNumOfVertex();i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!isVisited[i]) &#123;</span><br><span class="line">dfs(isVisited,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图的广度优先遍历"><a href="#图的广度优先遍历" class="headerlink" title="图的广度优先遍历"></a>图的广度优先遍历</h2><h3 id="图的广度优先遍历基本思想"><a href="#图的广度优先遍历基本思想" class="headerlink" title="图的广度优先遍历基本思想"></a>图的广度优先遍历基本思想</h3><ol><li>图的广度优先搜索（BFS(Broad First Search)）</li><li>类似于一个分层搜索的过程，广度优先遍历需要使用一个队列已保证访问过的节点的顺序，以便按这个顺序来访问这些节点的邻接节点。</li></ol><h3 id="广度优先遍历算法步骤"><a href="#广度优先遍历算法步骤" class="headerlink" title="广度优先遍历算法步骤"></a>广度优先遍历算法步骤</h3><ol><li>访问初始节点v并标记节点v为已访问。</li><li>节点v入队列。</li><li>当队列非空时，继续执行，否则算法结束。</li><li>出队列，取得队头节点u,</li><li>查找节点u的第一个邻接节点w</li><li>若节点u的邻接节点w不存在，则转到步骤3；否则循环执行以下三个步骤：<ol><li>若节点w尚未被访问，则访问节点w并标记为已访问。</li><li>节点w入队列</li><li>查找节点u的w邻接节点后的下一个邻接节点w，转到步骤6。</li></ol></li></ol><h3 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对一个节点进行广度优先</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">boolean</span>[] isVisited,<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> u;<span class="comment">//表示队列的头结点对应的下标</span></span><br><span class="line"><span class="keyword">int</span> w;<span class="comment">//邻接点下标</span></span><br><span class="line"><span class="comment">//队列，节点访问顺序</span></span><br><span class="line">LinkedList queue = <span class="keyword">new</span> LinkedList();</span><br><span class="line"><span class="comment">//访问节点</span></span><br><span class="line">System.out.print(getValueByIndex(i)+<span class="string">"-&gt;"</span>);</span><br><span class="line"><span class="comment">//标记为已访问</span></span><br><span class="line">isVisited[i] = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//将节点加入队列</span></span><br><span class="line">queue.addLast(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line"><span class="comment">//取出队列头结点下标</span></span><br><span class="line">u = (Integer)queue.removeFirst();</span><br><span class="line"><span class="comment">//得到第一个邻接点的下标</span></span><br><span class="line">w = getFirstNeighbor(u);</span><br><span class="line"><span class="keyword">while</span>(w!=-<span class="number">1</span>) &#123;<span class="comment">//找到</span></span><br><span class="line"><span class="comment">//是否访问过</span></span><br><span class="line"><span class="keyword">if</span>(!isVisited[w]) &#123;</span><br><span class="line">System.out.print(getValueByIndex(w)+<span class="string">"—&gt;"</span>);</span><br><span class="line"><span class="comment">//标记访问</span></span><br><span class="line">isVisited[w] = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line">queue.addLast(w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以u为前驱点，找w后面的邻接点</span></span><br><span class="line">w=getNextNeighbor(u, w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历所有的节点都进行广度优先搜索</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//我先把是否访问变为false</span></span><br><span class="line">clearState(isVisited);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;getNumOfVertex();i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!isVisited[i]) &#123;</span><br><span class="line">dfs(isVisited,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java数据结构&quot;&gt;&lt;a href=&quot;#java数据结构&quot; class=&quot;headerlink&quot; title=&quot;java数据结构&quot;&gt;&lt;/a&gt;java数据结构&lt;/h1&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这里介绍了基本数据结构，内容易懂，有代码实现，有思路分析，有图解。可以是我们更加容易的去学习数据结构。该笔记参考于&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/java/"/>
    
      <category term="数据结构" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Python之网络爬虫</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/06/04/Python%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/06/04/Python%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/</id>
    <published>2020-06-04T11:48:18.000Z</published>
    <updated>2020-06-07T01:10:00.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h1><h1 id="什么是网络爬虫："><a href="#什么是网络爬虫：" class="headerlink" title="什么是网络爬虫："></a>什么是网络爬虫：</h1><ul><li>通俗理解：爬虫是一个模拟人类请求网站行为的程序。可以自动请求网页、并数据抓取下来，然后使用一定的规则提取有价值的数据。</li><li>专业介绍：<a href="https://baike.baidu.com/item/网络爬虫/5162711?fr=aladdin" target="_blank" rel="noopener">百度百科</a>。</li></ul><a id="more"></a><h1 id="http协议和Chrome抓包工具"><a href="#http协议和Chrome抓包工具" class="headerlink" title="http协议和Chrome抓包工具"></a>http协议和Chrome抓包工具</h1><h2 id="什么是http和https协议："><a href="#什么是http和https协议：" class="headerlink" title="什么是http和https协议："></a>什么是http和https协议：</h2><p>HTTP协议：全称是<code>HyperText Transfer Protocol</code>，中文意思是超文本传输协议，是一种发布和接收HTML页面的方法。服务器端口号是<code>80</code>端口。 HTTPS协议：是HTTP协议的加密版本，在HTTP下加入了SSL层。服务器端口号是<code>443</code>端口。</p><h2 id="浏览器请求"><a href="#浏览器请求" class="headerlink" title="浏览器请求"></a>浏览器请求</h2><ol><li>当用户在浏览器的地址栏中输入一个URL并按回车键之后，浏览器会向HTTP服务器发送HTTP请求。HTTP请求主要分为“Get”和“Post”两种方法。</li><li>当我们在浏览器输入URL <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a> 的时候，浏览器发送一个Request请求去获取 <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a> 的html文件，服务器把Response文件对象发送回给浏览器。</li><li>浏览器分析Response中的 HTML，发现其中引用了很多其他文件，比如Images文件，CSS文件，JS文件。 浏览器会自动再次发送Request去获取图片，CSS文件，或者JS文件。</li><li>当所有的文件都下载成功后，网页会根据HTML语法结构，完整的显示出来了。</li></ol><h3 id="什么是URL"><a href="#什么是URL" class="headerlink" title="什么是URL"></a>什么是URL</h3><p><code>URL</code>是<code>Uniform Resource Locator</code>的简写，统一资源定位符。 一个<code>URL</code>由以下几部分组成：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme:<span class="regexp">//</span>host:port<span class="regexp">/path/</span>?query-string=xxx<span class="comment">#anchor</span></span><br></pre></td></tr></table></figure><ul><li><strong>scheme</strong>：代表的是访问的协议，一般为<code>http</code>或者<code>https</code>以及<code>ftp</code>等。</li><li><strong>host</strong>：主机名，域名，比如<code>www.baidu.com</code>。</li><li><strong>port</strong>：端口号。当你访问一个网站的时候，浏览器默认使用80端口。</li><li><strong>path</strong>：查找路径。比如：<code>www.jianshu.com/trending/now</code>，后面的<code>trending/now</code>就是<code>path</code>。</li><li><strong>query-string</strong>：查询字符串，比如：<code>www.baidu.com/s?wd=python</code>，后面的<code>wd=python</code>就是查询字符串。</li><li><strong>anchor</strong>：锚点，后台一般不用管，前端用来做页面定位的。</li></ul><p>在浏览器中请求一个<code>url</code>，浏览器会对这个url进行一个编码。除英文字母，数字和部分符号外，其他的全部使用百分号+十六进制码值进行编码。</p><h3 id="常用的请求方法"><a href="#常用的请求方法" class="headerlink" title="常用的请求方法"></a>常用的请求方法</h3><p>这里介绍常用的get和post请求。</p><ul><li><code>get</code>请求：一般情况下，只从服务器获取数据下来，并不会对服务器资源产生任何影响的时候会使用<code>get</code>请求。</li><li><code>post</code>请求：向服务器发送数据（登录）、上传文件等，会对服务器资源产生影响的时候会使用<code>post</code>请求。 以上是在网站开发中常用的两种方法。并且一般情况下都会遵循使用的原则。但是有的网站和服务器为了做反爬虫机制，也经常会不按常理出牌，有可能一个应该使用<code>get</code>方法的请求就一定要改成<code>post</code>请求，这个要视情况而定。</li></ul><h3 id="请求头常见参数"><a href="#请求头常见参数" class="headerlink" title="请求头常见参数"></a>请求头常见参数</h3><p>在<code>http</code>协议中，向服务器发送一个请求，数据分为三部分，第一个是把数据放在url中，第二个是把数据放在<code>body</code>中（在<code>post</code>请求中），第三个就是把数据放在<code>head</code>中。这里介绍在网络爬虫中经常会用到的一些请求头参数：</p><ol><li><code>User-Agent</code>：浏览器名称。这个在网络爬虫中经常会被使用到。请求一个网页的时候，服务器通过这个参数就可以知道这个请求是由哪种浏览器发送的。如果我们是通过爬虫发送请求，那么我们的<code>User-Agent</code>就是<code>Python</code>，这对于那些有反爬虫机制的网站来说，可以轻易的判断你这个请求是爬虫。因此我们要经常设置这个值为一些浏览器的值，来伪装我们的爬虫。</li><li><code>Referer</code>：表明当前这个请求是从哪个<code>url</code>过来的。这个一般也可以用来做反爬虫技术。如果不是从指定页面过来的，那么就不做相关的响应。</li><li><code>Cookie</code>：<code>http</code>协议是无状态的。也就是同一个人发送了两次请求，服务器没有能力知道这两个请求是否来自同一个人。因此这时候就用<code>cookie</code>来做标识。一般如果想要做登录后才能访问的网站，那么就需要发送<code>cookie</code>信息了。</li></ol><h3 id="常见响应状态码"><a href="#常见响应状态码" class="headerlink" title="常见响应状态码"></a>常见响应状态码</h3><ol><li><code>200</code>：请求正常，服务器正常的返回数据。</li><li><code>301</code>：永久重定向。比如在访问<code>www.jingdong.com</code>的时候会重定向到<code>www.jd.com</code>。</li><li><code>302</code>：临时重定向。比如在访问一个需要登录的页面的时候，而此时没有登录，那么就会重定向到登录页面。</li><li><code>400</code>：请求的<code>url</code>在服务器上找不到。换句话说就是请求<code>url</code>错误。</li><li><code>403</code>：服务器拒绝访问，权限不够。</li><li><code>500</code>：服务器内部错误。可能是服务器出现<code>bug</code>了。</li></ol><h2 id="Chrome抓包工具："><a href="#Chrome抓包工具：" class="headerlink" title="Chrome抓包工具："></a>Chrome抓包工具：</h2><p><code>Chrome</code>浏览器是一个非常亲近开发者的浏览器。可以方便的查看网络请求以及发送的参数。对着网页<code>右键-&gt;检查</code>。然后就可以打开开发者选项。以下用图片来说明。</p><p><img src="https://leecode1024.oss-cn-qingdao.aliyuncs.com/pachong/1.png" alt=""></p><p><img src="https://leecode1024.oss-cn-qingdao.aliyuncs.com/pachong/2.png" alt=""></p><p><img src="https://leecode1024.oss-cn-qingdao.aliyuncs.com/pachong/3.png" alt=""></p><p><img src="https://leecode1024.oss-cn-qingdao.aliyuncs.com/pachong/4.png" alt=""></p><h1 id="urllib库"><a href="#urllib库" class="headerlink" title="urllib库"></a>urllib库</h1><p><code>urllib</code>库是<code>Python</code>中一个最基本的网络请求库。可以模拟浏览器的行为，向指定的服务器发送一个请求，并可以保存服务器返回的数据。</p><h2 id="urlopen"><a href="#urlopen" class="headerlink" title="urlopen"></a>urlopen</h2><p>在<code>Python3</code>的<code>urllib</code>库中，所有和网络请求相关的方法，都被集到<code>urllib.request</code>模块下面了，以先来看下<code>urlopen</code>函数基本的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">resp = request.urlopen(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></table></figure><p>实际上，使用浏览器访问百度，右键查看源代码。你会发现，跟我们刚才打印出来的数据是一模一样的。也就是说，上面的三行代码就已经帮我们把百度的首页的全部代码爬下来了。一个基本的url请求对应的python代码真的非常简单。<br>以下对<code>urlopen</code>函数的进行详细讲解：</p><ol><li><code>url</code>：请求的url。</li><li><code>data</code>：请求的<code>data</code>，如果设置了这个值，那么将变成<code>post</code>请求。</li><li>返回值：返回值是一个<code>http.client.HTTPResponse</code>对象，这个对象是一个类文件句柄对象。有<code>read(size)</code>、<code>readline</code>、<code>readlines</code>以及<code>getcode</code>等方法。</li></ol><h2 id="urlretrieve函数"><a href="#urlretrieve函数" class="headerlink" title="urlretrieve函数"></a>urlretrieve函数</h2><p>这个函数可以方便的将网页上的一个文件保存到本地。以下代码可以非常方便的将百度的首页下载到本地</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">request.urlretrieve(<span class="string">'http://www.baidu.com/'</span>,<span class="string">'baidu.html'</span>)</span><br></pre></td></tr></table></figure><h2 id="urlencode函数"><a href="#urlencode函数" class="headerlink" title="urlencode函数"></a>urlencode函数</h2><p>可以将经过编码后的url参数进行解码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">qs = <span class="string">"name=%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80&amp;greet=hello+world&amp;age=100"</span></span><br><span class="line">print(parse.parse_qs(qs))</span><br><span class="line"><span class="comment"># &#123;'name': ['爬虫基础'], 'greet': ['hello world'], 'age': ['100']&#125;</span></span><br></pre></td></tr></table></figure><h2 id="urlparse和urlsplit"><a href="#urlparse和urlsplit" class="headerlink" title="urlparse和urlsplit"></a>urlparse和urlsplit</h2><p>有时候拿到一个url，想要对这个url中的各个组成部分进行分割，那么这时候就可以使用<code>urlparse</code>或者是<code>urlsplit</code>来进行分割。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com/s?username=zhiliao'</span></span><br><span class="line"></span><br><span class="line">result = parse.urlsplit(url)</span><br><span class="line"><span class="comment"># result = parse.urlparse(url)</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'scheme:'</span>,result.scheme)</span><br><span class="line">print(<span class="string">'netloc:'</span>,result.netloc)</span><br><span class="line">print(<span class="string">'path:'</span>,result.path)</span><br><span class="line">print(<span class="string">'query:'</span>,result.query)</span><br><span class="line"><span class="comment">################################</span></span><br><span class="line">scheme: http</span><br><span class="line">netloc: www.baidu.com</span><br><span class="line">path: /s</span><br><span class="line">query: username=zhiliao</span><br></pre></td></tr></table></figure><p><code>urlparse</code>和<code>urlsplit</code>基本上是一模一样的。唯一不一样的地方是，<code>urlparse</code>里面多了一个<code>params</code>属性，而<code>urlsplit</code>没有这个<code>params</code>属性。比如有一个<code>url</code>为：<code>url = &#39;http://www.baidu.com/s;hello?wd=python&amp;username=abc#1&#39;</code>，<br>那么<code>urlparse</code>可以获取到<code>hello</code>，而<code>urlsplit</code>不可以获取到。<code>url</code>中的<code>params</code>也用得比较少。</p><h2 id="request-Request类"><a href="#request-Request类" class="headerlink" title="request.Request类"></a>request.Request类</h2><p>如果想要在请求的时候增加一些请求头，那么就必须使用<code>request.Request</code>类来实现。比如要增加一个<code>User-Agent</code>，示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(<span class="string">"http://www.baidu.com/"</span>,headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></table></figure><h2 id="ProxyHandler处理器（代理设置）"><a href="#ProxyHandler处理器（代理设置）" class="headerlink" title="ProxyHandler处理器（代理设置）"></a>ProxyHandler处理器（代理设置）</h2><p>很多网站会检测某一段时间某个IP的访问次数(通过流量统计，系统日志等)，如果访问次数多的不像正常人，它会禁止这个IP的访问。<br>所以我们可以设置一些代理服务器，每隔一段时间换一个代理，就算IP被禁止，依然可以换个IP继续爬取。<br>urllib中通过ProxyHandler来设置使用代理服务器，下面代码说明如何使用自定义opener来使用代理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是没有使用代理的</span></span><br><span class="line"><span class="comment"># resp = request.urlopen('http://httpbin.org/get')</span></span><br><span class="line"><span class="comment"># print(resp.read().decode("utf-8"))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是使用了代理的</span></span><br><span class="line">handler = request.ProxyHandler(&#123;<span class="string">"http"</span>:<span class="string">"218.66.161.88:31769"</span>&#125;)</span><br><span class="line"></span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line">req = request.Request(<span class="string">"http://httpbin.org/ip"</span>)</span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></table></figure><p>常用的代理有：</p><ul><li>西刺免费代理IP：<a href="http://www.xicidaili.com/" target="_blank" rel="noopener">http://www.xicidaili.com/</a></li><li>快代理：<a href="http://www.kuaidaili.com/" target="_blank" rel="noopener">http://www.kuaidaili.com/</a></li><li>代理云：<a href="http://www.dailiyun.com/" target="_blank" rel="noopener">http://www.dailiyun.com/</a></li></ul><h1 id="什么是cookie"><a href="#什么是cookie" class="headerlink" title="什么是cookie"></a>什么是cookie</h1><p>在网站中，http请求是无状态的。也就是说即使第一次和服务器连接后并且登录成功后，第二次请求服务器依然不能知道当前请求是哪个用户。<code>cookie</code>的出现就是为了解决这个问题，第一次登录后服务器返回一些数据（cookie）给浏览器，然后浏览器保存在本地，当该用户发送第二次请求的时候，就会自动的把上次请求存储的<code>cookie</code>数据自动的携带给服务器，服务器通过浏览器携带的数据就能判断当前用户是哪个了。<code>cookie</code>存储的数据量有限，不同的浏览器有不同的存储大小，但一般不超过4KB。因此使用<code>cookie</code>只能存储一些小量的数据。</p><p><strong>cookie的格式</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Set</span>-Cookie: <span class="keyword">NAME</span>=<span class="keyword">VALUE</span>；Expires/<span class="keyword">Max</span>-age=<span class="built_in">DATE</span>；<span class="keyword">Path</span>=<span class="keyword">PATH</span>；<span class="keyword">Domain</span>=DOMAIN_NAME；SECURE</span><br></pre></td></tr></table></figure><p>参数意义：</p><ul><li>NAME：cookie的名字。</li><li>VALUE：cookie的值。</li><li>Expires：cookie的过期时间。</li><li>Path：cookie作用的路径。</li><li>Domain：cookie作用的域名。</li><li>SECURE：是否只在https协议下起作用。</li></ul><h2 id="使用cookielib库和HTTPCookieProcessor模拟登录"><a href="#使用cookielib库和HTTPCookieProcessor模拟登录" class="headerlink" title="使用cookielib库和HTTPCookieProcessor模拟登录"></a>使用cookielib库和HTTPCookieProcessor模拟登录</h2><p>Cookie 是指网站服务器为了辨别用户身份和进行Session跟踪，而储存在用户浏览器上的文本文件，Cookie可以保持登录信息到用户下次与服务器的会话。<br>这里以人人网为例。人人网中，要访问某个人的主页，必须先登录才能访问，登录说白了就是要有cookie信息。那么如果我们想要用代码的方式访问，就必须要有正确的cookie信息才能访问。解决方案有两种，第一种是使用浏览器访问，然后将cookie信息复制下来，放到headers中。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'anonymid=jacdwz2x-8bjldx; depovince=GW; _r01_=1; _ga=GA1.2.1455063316.1511436360; _gid=GA1.2.862627163.1511436360; wp=1; JSESSIONID=abczwY8ecd4xz8RJcyP-v; jebecookies=d4497791-9d41-4269-9e2b-3858d4989785|||||; ick_login=884e75d4-f361-4cff-94bb-81fe6c42b220; _de=EA5778F44555C091303554EBBEB4676C696BF75400CE19CC; p=61a3c7d0d4b2d1e991095353f83fa2141; first_login_flag=1; ln_uact=970138074@qq.com; ln_hurl=http://hdn.xnimg.cn/photos/hdn121/20170428/1700/main_nhiB_aebd0000854a1986.jpg; t=3dd84a3117737e819dd2c32f1cdb91d01; societyguester=3dd84a3117737e819dd2c32f1cdb91d01; id=443362311; xnsid=169efdc0; loginfrom=syshome; ch_id=10016; jebe_key=9c062f5a-4335-4a91-bf7a-970f8b86a64e%7Ca022c303305d1b2ab6b5089643e4b5de%7C1511449232839%7C1; wp_fold=0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.renren.com/880151247/profile'</span></span><br><span class="line"></span><br><span class="line">req = request.Request(url,headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'renren.html'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(resp.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>但是每次在访问需要cookie的页面都要从浏览器中复制cookie比较麻烦。在Python处理Cookie，一般是通过<code>http.cookiejar</code>模块和<code>urllib模块的HTTPCookieProcessor</code>处理器类一起使用。<code>http.cookiejar</code>模块主要作用是提供用于存储cookie的对象。而<code>HTTPCookieProcessor</code>处理器主要作用是处理这些cookie对象，并构建handler对象。</p><h2 id="http-cookiejar模块"><a href="#http-cookiejar模块" class="headerlink" title="http.cookiejar模块"></a>http.cookiejar模块</h2><p>该模块主要的类有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。这四个类的作用分别如下：</p><ol><li><strong>CookieJar</strong>：管理HTTP cookie值、存储HTTP请求生成的cookie、向传出的HTTP请求添加cookie的对象。整个cookie都存储在内存中，对CookieJar实例进行垃圾回收后cookie也将丢失。</li><li><strong>FileCookieJar</strong> (filename,delayload=None,policy=None)：从CookieJar派生而来，用来创建FileCookieJar实例，检索cookie信息并将cookie存储到文件中。filename是存储cookie的文件名。delayload为True时支持延迟访问访问文件，即只有在需要时才读取文件或在文件中存储数据。</li><li><strong>MozillaCookieJar</strong> (filename,delayload=None,policy=None)：从FileCookieJar派生而来，创建与Mozilla浏览器 cookies.txt兼容的FileCookieJar实例。</li><li><strong>LWPCookieJar</strong> (filename,delayload=None,policy=None)：从FileCookieJar派生而来，创建与libwww-perl标准的 Set-Cookie3 文件格式兼容的FileCookieJar实例。</li></ol><h4 id="保存cookie到本地"><a href="#保存cookie到本地" class="headerlink" title="保存cookie到本地"></a>保存cookie到本地</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">保存cookie到本地，可以使用cookiejar的save方法，并且需要指定一个文件名：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookiejar = MozillaCookieJar(<span class="string">"cookie.txt"</span>)</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(<span class="string">'http://httpbin.org/cookies'</span>,headers=headers)</span><br><span class="line"></span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br><span class="line">cookiejar.save(ignore_discard=<span class="literal">True</span>,ignore_expires=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="从本地加载cookie"><a href="#从本地加载cookie" class="headerlink" title="从本地加载cookie"></a>从本地加载cookie</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">从本地加载cookie，需要使用cookiejar的load方法，并且也需要指定方法：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookiejar = MozillaCookieJar(<span class="string">"cookie.txt"</span>)</span><br><span class="line">cookiejar.load(ignore_expires=<span class="literal">True</span>,ignore_discard=<span class="literal">True</span>)</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(<span class="string">'http://httpbin.org/cookies'</span>,headers=headers)</span><br><span class="line"></span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></table></figure><h1 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h1><p>虽然Python的标准库中 urllib模块已经包含了平常我们使用的大多数功能，但是它的 API 使用起来让人感觉不太好，而 Requests宣传是 “HTTP for Humans”，说明使用更简洁方便。</p><p><strong>安装和文档地址</strong>：</p><p>利用<code>pip</code>可以非常方便的安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> requests</span><br></pre></td></tr></table></figure><p>中文文档：<a href="http://docs.python-requests.org/zh_CN/latest/index.html" target="_blank" rel="noopener">http://docs.python-requests.org/zh_CN/latest/index.html</a><br>github地址：<a href="https://github.com/requests/requests">https://github.com/requests/requests</a></p><h2 id="发送GET请求"><a href="#发送GET请求" class="headerlink" title="发送GET请求"></a>发送GET请求</h2><ul><li>最简单的发送<code>get</code>请求就是通过<code>requests.get</code>来调用。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(<span class="string">"http://www.baidu.com/"</span>)</span><br></pre></td></tr></table></figure><ul><li>添加headers和查询参数</li></ul><p>如果想添加 headers，可以传入headers参数来增加请求头中的headers信息。如果要将参数放在url中传递，可以利用 params 参数。相关示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">kw = &#123;<span class="string">'wd'</span>:<span class="string">'中国'</span>&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span></span><br><span class="line">response = requests.get(<span class="string">"http://www.baidu.com/s"</span>, params = kw, headers = headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看响应内容，response.text 返回的是Unicode格式的数据</span></span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看响应内容，response.content返回的字节流数据</span></span><br><span class="line">print(response.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看完整url地址</span></span><br><span class="line">print(response.url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看响应头部字符编码</span></span><br><span class="line">print(response.encoding)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看响应码</span></span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure><h2 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h2><ul><li>最基本的POST请求可以使用<code>post</code>方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.post(<span class="string">"http://www.baidu.com/"</span>,data=data)</span><br></pre></td></tr></table></figure><ul><li>传入data数据</li></ul><p>这时候就不要再使用<code>urlencode</code>进行编码了，直接传入一个字典进去就可以了。比如请求拉勾网的数据的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&amp;needAddtionalResult=false&amp;isSchoolJob=0"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://www.lagou.com/jobs/list_python?labelWords=&amp;fromSearch=true&amp;suginput='</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'first'</span>: <span class="string">'true'</span>,</span><br><span class="line">    <span class="string">'pn'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'kd'</span>: <span class="string">'python'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.post(url,headers=headers,data=data)</span><br><span class="line"><span class="comment"># 如果是json数据，直接可以调用json方法</span></span><br><span class="line">print(resp.json())</span><br></pre></td></tr></table></figure><h2 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h2><p>使用<code>requests</code>添加代理也非常简单，只要在请求的方法中（比如<code>get</code>或者<code>post</code>）传递<code>proxies</code>参数就可以了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://httpbin.org/get"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'171.14.209.180:27829'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url,headers=headers,proxies=proxy)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xx.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(resp.text)</span><br></pre></td></tr></table></figure><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>如果在一个响应中包含了<code>cookie</code>，那么可以利用<code>cookies</code>属性拿到这个返回的<code>cookie</code>值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">data = &#123;<span class="string">"email"</span>:<span class="string">"970138074@qq.com"</span>,<span class="string">'password'</span>:<span class="string">"pythonspider"</span>&#125;</span><br><span class="line">resp = requests.get(<span class="string">'http://www.baidu.com/'</span>)</span><br><span class="line">print(resp.cookies)</span><br><span class="line">print(resp.cookies.get_dict())</span><br></pre></td></tr></table></figure><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>之前使用<code>urllib</code>库，是可以使用<code>opener</code>发送多个请求，多个请求之间是可以共享<code>cookie</code>的。那么如果使用<code>requests</code>，也要达到共享<code>cookie</code>的目的，那么可以使用<code>requests</code>库给我们提供的<code>session</code>对象。注意，这里的<code>session</code>不是web开发中的那个session，这个地方只是一个会话的对象而已。还是以登录人人网为例，使用<code>requests</code>来实现。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">data = &#123;<span class="string">"email"</span>:<span class="string">"970138074@qq.com"</span>,<span class="string">'password'</span>:<span class="string">"pythonspider"</span>&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">session = requests.session()</span><br><span class="line">session.post(url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问大鹏个人中心</span></span><br><span class="line">resp = session.get(<span class="string">'http://www.renren.com/880151247/profile'</span>)</span><br><span class="line"></span><br><span class="line">print(resp.text)</span><br></pre></td></tr></table></figure><h1 id="XPath语法和lxml模块"><a href="#XPath语法和lxml模块" class="headerlink" title="XPath语法和lxml模块"></a>XPath语法和lxml模块</h1><h2 id="什么是XPath？"><a href="#什么是XPath？" class="headerlink" title="什么是XPath？"></a>什么是XPath？</h2><p>xpath（XML Path Language）是一门在XML和HTML文档中查找信息的语言，可用来在XML和HTML文档中对元素和属性进行遍历。</p><h2 id="XPath开发工具"><a href="#XPath开发工具" class="headerlink" title="XPath开发工具"></a>XPath开发工具</h2><ol><li>Chrome插件XPath Helper。</li><li>Firefox插件Try XPath。</li></ol><h2 id="XPath语法"><a href="#XPath语法" class="headerlink" title="XPath语法"></a>XPath语法</h2><h3 id="选取节点"><a href="#选取节点" class="headerlink" title="选取节点"></a>选取节点</h3><p>XPath 使用路径表达式来选取 XML 文档中的节点或者节点集。这些路径表达式和我们在常规的电脑文件系统中看到的表达式非常相似。</p><table><thead><tr><th>表达式</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点</td><td>bookstore</td><td>选取bookstore下所有的子节点</td></tr><tr><td>/</td><td>如果是在最前面，代表从根节点选取。否则选择某节点下的某个节点</td><td>/bookstore</td><td>选取根元素下所有的bookstore节点</td></tr><tr><td>//</td><td>从全局节点中选择节点，随便在哪个位置</td><td>//book</td><td>从全局节点中找到所有的book节点</td></tr><tr><td>@</td><td>选取某个节点的属性</td><td>//book[@price]</td><td>选择所有拥有price属性的book节点</td></tr><tr><td>.</td><td>当前节点</td><td>./a</td><td>选取当前节点下的a标签</td></tr></tbody></table><h3 id="谓语"><a href="#谓语" class="headerlink" title="谓语"></a>谓语</h3><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点，被嵌在方括号中。<br>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p><table><thead><tr><th>路径表达式</th><th>描述</th></tr></thead><tbody><tr><td>/bookstore/book[1]</td><td>选取bookstore下的第一个子元素</td></tr><tr><td>/bookstore/book[last()]</td><td>选取bookstore下的倒数第二个book元素。</td></tr><tr><td>bookstore/book[position()&lt;3]</td><td>选取bookstore下前面两个子元素。</td></tr><tr><td>//book[@price]</td><td>选取拥有price属性的book元素</td></tr><tr><td>//book[@price=10]</td><td>选取所有属性price等于10的book元素</td></tr></tbody></table><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>*表示通配符。</p><table><thead><tr><th align="left">通配符</th><th align="left">描述</th><th align="left">示例</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配任意节点</td><td align="left">/bookstore/*</td><td align="left">选取bookstore下的所有子元素。</td></tr><tr><td align="left">@*</td><td align="left">匹配节点中的任何属性</td><td align="left">//book[@*]</td><td align="left">选取所有带有属性的book元素。</td></tr></tbody></table><h3 id="选取多个路径："><a href="#选取多个路径：" class="headerlink" title="选取多个路径："></a>选取多个路径：</h3><p>通过在路径表达式中使用“|”运算符，可以选取若干个路径。<br>示例如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>bookstore<span class="regexp">/book | /</span><span class="regexp">/book/</span>title</span><br><span class="line"><span class="comment"># 选取所有book元素以及book元素下所有的title元素</span></span><br></pre></td></tr></table></figure><h2 id="lxml库"><a href="#lxml库" class="headerlink" title="lxml库"></a>lxml库</h2><p>lxml 是 一个HTML/XML的解析器，主要的功能是如何解析和提取 HTML/XML 数据。</p><p>lxml和正则一样，也是用 C 实现的，是一款高性能的 Python HTML/XML 解析器，我们可以利用之前学习的XPath语法，来快速的定位特定元素以及节点信息。</p><p>lxml python 官方文档：<a href="http://lxml.de/index.html" target="_blank" rel="noopener">http://lxml.de/index.html</a></p><p>需要安装C语言库，可使用 pip 安装：pip install lxml</p><h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><p>我们可以利用他来解析HTML代码，并且在解析HTML代码的时候，如果HTML代码不规范，他会自动的进行补全。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 lxml 的 etree 库</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree </span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt; # 注意，此处缺少一个 &lt;/li&gt; 闭合标签</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用etree.HTML，将字符串解析为HTML文档</span></span><br><span class="line">html = etree.HTML(text) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 按字符串序列化HTML文档</span></span><br><span class="line">result = etree.tostring(html) </span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输入结果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link1.html"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-inactive"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到。lxml会自动修改HTML代码。例子中不仅补全了li标签，还添加了body，html标签。</p><h3 id="从文件中读取html代码："><a href="#从文件中读取html代码：" class="headerlink" title="从文件中读取html代码："></a>从文件中读取html代码：</h3><p>除了直接使用字符串进行解析，lxml还支持从文件中读取内容。我们新建一个hello.html文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hello.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link1.html"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-inactive"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后利用<code>etree.parse()</code>方法来读取文件。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取外部文件 hello.html</span></span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = etree.tostring(html, pretty_print=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输入结果和之前是相同的。</p><h3 id="在lxml中使用XPath语法："><a href="#在lxml中使用XPath语法：" class="headerlink" title="在lxml中使用XPath语法："></a>在lxml中使用XPath语法：</h3><ol><li><p>获取所有li标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line"><span class="keyword">print</span> type(html)  <span class="comment"># 显示etree.parse() 返回类型</span></span><br><span class="line">   </span><br><span class="line">result = html.xpath(<span class="string">'//li'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)  <span class="comment"># 打印&lt;li&gt;标签的元素集合</span></span><br></pre></td></tr></table></figure></li><li><p>获取所有li元素下的所有class属性的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li/@class'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li><li><p>获取li标签下href为<code>www.baidu.com</code>的a标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li/a[@href="www.baidu.com"]'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li><li><p>获取li标签下所有span标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment">#result = html.xpath('//li/span')</span></span><br><span class="line"><span class="comment">#注意这么写是不对的：</span></span><br><span class="line"><span class="comment">#因为 / 是用来获取子元素的，而 &lt;span&gt; 并不是 &lt;li&gt; 的子元素，所以，要用双斜杠</span></span><br><span class="line">   </span><br><span class="line">result = html.xpath(<span class="string">'//li//span'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li><li><p>获取li标签下的a标签里的所有class：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li/a//@class'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li><li><p>获取最后一个li的a的href属性对应的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">   </span><br><span class="line">result = html.xpath(<span class="string">'//li[last()]/a/@href'</span>)</span><br><span class="line"><span class="comment"># 谓语 [last()] 可以找到最后一个元素</span></span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li><li><p>获取倒数第二个li元素的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li[last()-1]/a'</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># text 方法可以获取元素内容</span></span><br><span class="line">print(result[<span class="number">0</span>].text)</span><br></pre></td></tr></table></figure></li><li><p>获取倒数第二个li元素的内容的第二种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li[last()-1]/a/text()'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li></ol><h2 id="爬取德州学院官网上的校报图片"><a href="#爬取德州学院官网上的校报图片" class="headerlink" title="爬取德州学院官网上的校报图片"></a>爬取德州学院官网上的校报图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36"</span></span><br><span class="line">        &#125;</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line">xpath=<span class="string">'//div[@class="huigu"]//a/img/@src'</span></span><br><span class="line">url=<span class="string">"http://dzu.cuepa.cn/oldrelease.php"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResponse</span><span class="params">(url,headers)</span>:</span></span><br><span class="line">    response = requests.get(</span><br><span class="line">        url=url,</span><br><span class="line">        headers=headers</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forListSave</span><span class="params">(img_list,count,index)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> img_list:</span><br><span class="line">        count_str=str(count)</span><br><span class="line">        imgCount = str(index)+<span class="string">"_"</span>+str(count_str) + <span class="string">"_img.jpg"</span></span><br><span class="line">        img_url = img</span><br><span class="line">        img_response = getResponse(img_url,headers)</span><br><span class="line">        print(<span class="string">"正在下载第"</span>+str(index)+<span class="string">"页，第"</span>+count_str+<span class="string">"张图片--"</span>+imgCount+<span class="string">"--url："</span>+img_url)</span><br><span class="line">        fp = open(imgCount, <span class="string">"wb"</span>)</span><br><span class="line">        fp.write(img_response.content)</span><br><span class="line">        fp.close()</span><br><span class="line">        print(<span class="string">"下载完成"</span>)</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line"><span class="comment">#-------------调用-----------</span></span><br><span class="line">response = getResponse(url,headers)</span><br><span class="line">eroot = etree.HTML(response.text)</span><br><span class="line">img_list = eroot.xpath(xpath)</span><br><span class="line">index = <span class="number">1</span></span><br><span class="line">forListSave(img_list,count,index)</span><br><span class="line">index = index+<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> index &lt;= <span class="number">25</span>:</span><br><span class="line">    newUrl=url+<span class="string">"?page="</span>+str(index)</span><br><span class="line">    response = getResponse(newUrl, headers)</span><br><span class="line">    eroot = etree.HTML(response.text)</span><br><span class="line">    img_list = eroot.xpath(xpath)</span><br><span class="line">    forListSave(img_list,count,index)</span><br><span class="line">    index=index+<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="BeautifulSoup4库"><a href="#BeautifulSoup4库" class="headerlink" title="BeautifulSoup4库"></a>BeautifulSoup4库</h1><p>和 lxml 一样，Beautiful Soup 也是一个HTML/XML的解析器，主要的功能也是如何解析和提取 HTML/XML 数据。<br>lxml 只会局部遍历，而Beautiful Soup 是基于HTML DOM（Document Object Model）的，会载入整个文档，解析整个DOM树，因此时间和内存开销都会大很多，所以性能要低于lxml。<br>BeautifulSoup 用来解析 HTML 比较简单，API非常人性化，支持CSS选择器、Python标准库中的HTML解析器，也支持 lxml 的 XML解析器。<br>Beautiful Soup 3 目前已经停止开发，推荐现在的项目使用Beautiful Soup 4。</p><h2 id="安装和文档："><a href="#安装和文档：" class="headerlink" title="安装和文档："></a>安装和文档：</h2><ol><li>安装：<code>pip install bs4</code>。</li><li>中文文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></li></ol><h2 id="几大解析工具对比："><a href="#几大解析工具对比：" class="headerlink" title="几大解析工具对比："></a>几大解析工具对比：</h2><table><thead><tr><th>解析工具</th><th>解析速度</th><th>使用难度</th></tr></thead><tbody><tr><td>BeautifulSoup</td><td>最慢</td><td>最简单</td></tr><tr><td>lxml</td><td>快</td><td>简单</td></tr><tr><td>正则</td><td>最快</td><td>最难</td></tr></tbody></table><h2 id="简单使用："><a href="#简单使用：" class="headerlink" title="简单使用："></a>简单使用：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建 Beautiful Soup 对象</span></span><br><span class="line"><span class="comment"># 使用lxml来进行解析</span></span><br><span class="line">soup = BeautifulSoup(html,<span class="string">"lxml"</span>)</span><br><span class="line"></span><br><span class="line">print(soup.prettify())</span><br></pre></td></tr></table></figure><h2 id="四个常用的对象："><a href="#四个常用的对象：" class="headerlink" title="四个常用的对象："></a>四个常用的对象：</h2><p>Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种:</p><ol><li>Tag</li><li>NavigatableString</li><li>BeautifulSoup</li><li>Comment</li></ol><h3 id="1-Tag："><a href="#1-Tag：" class="headerlink" title="1. Tag："></a>1. Tag：</h3><p>Tag 通俗点讲就是 HTML 中的一个个标签。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建 Beautiful Soup 对象</span></span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(soup.title)</span><br><span class="line"><span class="comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"></span><br><span class="line">print(soup.head)</span><br><span class="line"><span class="comment"># &lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"></span><br><span class="line">print(soup.a)</span><br><span class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line">print(soup.p)</span><br><span class="line"><span class="comment"># &lt;p class="title" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line">print(type(soup.p))</span><br><span class="line"><span class="comment"># &lt;class 'bs4.element.Tag'&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line">&lt;title&gt;The Dormous<span class="string">e's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;&lt;title&gt;The Dormouse'</span>s story&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;a <span class="keyword">class</span>="sister" href="http://example.com/elsie" id="link1"&gt;&lt;!<span class="comment">-- Elsie --&gt;&lt;/a&gt;</span></span><br><span class="line">&lt;p <span class="keyword">class</span>="title" <span class="type">name</span>="dromouse"&gt;&lt;b&gt;The Dormous<span class="string">e's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;class '</span>bs4.element.Tag<span class="string">'&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以利用 soup 加标签名轻松地获取这些标签的内容，这些对象的类型是bs4.element.Tag。但是注意，它查找的是在所有内容中的<strong>第一个符合要求的标签</strong>。如果要查询所有的标签，后面会进行介绍。<br>对于Tag，它有两个重要的属性，分别是<strong>name和attrs。</strong>示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> soup.name</span><br><span class="line"><span class="comment"># [document] #soup 对象本身比较特殊，它的 name 即为 [document]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> soup.head.name</span><br><span class="line"><span class="comment"># head #对于其他内部标签，输出的值便为标签本身的名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> soup.p.attrs</span><br><span class="line"><span class="comment"># &#123;'class': ['title'], 'name': 'dromouse'&#125;</span></span><br><span class="line"><span class="comment"># 在这里，我们把 p 标签的所有属性打印输出了出来，得到的类型是一个字典。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> soup.p[<span class="string">'class'</span>] <span class="comment"># soup.p.get('class')</span></span><br><span class="line"><span class="comment"># ['title'] #还可以利用get方法，传入属性的名称，二者是等价的</span></span><br><span class="line"></span><br><span class="line">soup.p[<span class="string">'class'</span>] = <span class="string">"newClass"</span></span><br><span class="line"><span class="keyword">print</span> soup.p <span class="comment"># 可以对这些属性和内容等等进行修改</span></span><br><span class="line"><span class="comment"># &lt;p class="newClass" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-NavigableString："><a href="#2-NavigableString：" class="headerlink" title="2. NavigableString："></a>2. NavigableString：</h3><p>如果拿到标签后，还想获取标签中的内容。那么可以通过<code>tag.string</code>获取标签中的文字。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> soup.p.string</span><br><span class="line"><span class="comment"># The Dormouse's story</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> type(soup.p.string)</span><br><span class="line"><span class="comment"># &lt;class 'bs4.element.NavigableString'&gt;thon</span></span><br></pre></td></tr></table></figure><h3 id="3-BeautifulSoup："><a href="#3-BeautifulSoup：" class="headerlink" title="3. BeautifulSoup："></a>3. BeautifulSoup：</h3><p>BeautifulSoup 对象表示的是一个文档的全部内容.大部分时候,可以把它当作 Tag 对象,它支持 遍历文档树 和 搜索文档树 中描述的大部分的方法.<br>因为 BeautifulSoup 对象并不是真正的HTML或XML的tag,所以它没有name和attribute属性.但有时查看它的 .name 属性是很方便的,所以 BeautifulSoup 对象包含了一个值为 “[document]” 的特殊属性 .name</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.name</span><br><span class="line"><span class="comment"># '[document]'</span></span><br></pre></td></tr></table></figure><h3 id="4-Comment："><a href="#4-Comment：" class="headerlink" title="4. Comment："></a>4. Comment：</h3><p>Tag , NavigableString , BeautifulSoup 几乎覆盖了html和xml中的所有内容,但是还有一些特殊对象.容易让人担心的内容是文档的注释部分:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">markup = <span class="string">"&lt;b&gt;&lt;!--Hey, buddy. Want to buy a used parser?--&gt;&lt;/b&gt;"</span></span><br><span class="line">soup = BeautifulSoup(markup)</span><br><span class="line">comment = soup.b.string</span><br><span class="line">type(comment)</span><br><span class="line"><span class="comment"># &lt;class 'bs4.element.Comment'&gt;</span></span><br></pre></td></tr></table></figure><p>Comment 对象是一个特殊类型的 NavigableString 对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">comment</span><br><span class="line"><span class="comment"># 'Hey, buddy. Want to buy a used parser'</span></span><br></pre></td></tr></table></figure><h2 id="遍历文档树："><a href="#遍历文档树：" class="headerlink" title="遍历文档树："></a>遍历文档树：</h2><h3 id="1-contents和children："><a href="#1-contents和children：" class="headerlink" title="1. contents和children："></a>1. contents和children：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">html_doc = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc,<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">head_tag = soup.head</span><br><span class="line"><span class="comment"># 返回所有子节点的列表</span></span><br><span class="line">print(head_tag.contents)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回所有子节点的迭代器</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> head_tag.children:</span><br><span class="line">    print(child)</span><br></pre></td></tr></table></figure><h3 id="2-strings-和-stripped-strings"><a href="#2-strings-和-stripped-strings" class="headerlink" title="2. strings 和 stripped_strings"></a>2. strings 和 stripped_strings</h3><p>如果tag中包含多个字符串 [2] ,可以使用 .strings 来循环获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> soup.strings:</span><br><span class="line">    print(repr(string))</span><br><span class="line">    <span class="comment"># u"The Dormouse's story"</span></span><br><span class="line">    <span class="comment"># u'\n\n'</span></span><br><span class="line">    <span class="comment"># u"The Dormouse's story"</span></span><br><span class="line">    <span class="comment"># u'\n\n'</span></span><br><span class="line">    <span class="comment"># u'Once upon a time there were three little sisters; and their names were\n'</span></span><br><span class="line">    <span class="comment"># u'Elsie'</span></span><br><span class="line">    <span class="comment"># u',\n'</span></span><br><span class="line">    <span class="comment"># u'Lacie'</span></span><br><span class="line">    <span class="comment"># u' and\n'</span></span><br><span class="line">    <span class="comment"># u'Tillie'</span></span><br><span class="line">    <span class="comment"># u';\nand they lived at the bottom of a well.'</span></span><br><span class="line">    <span class="comment"># u'\n\n'</span></span><br><span class="line">    <span class="comment"># u'...'</span></span><br><span class="line">    <span class="comment"># u'\n'</span></span><br></pre></td></tr></table></figure><p>输出的字符串中可能包含了很多空格或空行,使用 .stripped_strings 可以去除多余空白内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> soup.stripped_strings:</span><br><span class="line">    print(repr(string))</span><br><span class="line">    <span class="comment"># u"The Dormouse's story"</span></span><br><span class="line">    <span class="comment"># u"The Dormouse's story"</span></span><br><span class="line">    <span class="comment"># u'Once upon a time there were three little sisters; and their names were'</span></span><br><span class="line">    <span class="comment"># u'Elsie'</span></span><br><span class="line">    <span class="comment"># u','</span></span><br><span class="line">    <span class="comment"># u'Lacie'</span></span><br><span class="line">    <span class="comment"># u'and'</span></span><br><span class="line">    <span class="comment"># u'Tillie'</span></span><br><span class="line">    <span class="comment"># u';\nand they lived at the bottom of a well.'</span></span><br><span class="line">    <span class="comment"># u'...'</span></span><br></pre></td></tr></table></figure><h2 id="搜索文档树："><a href="#搜索文档树：" class="headerlink" title="搜索文档树："></a>搜索文档树：</h2><h3 id="1-find和find-all方法："><a href="#1-find和find-all方法：" class="headerlink" title="1. find和find_all方法："></a>1. find和find_all方法：</h3><p>搜索文档树，一般用得比较多的就是两个方法，一个是<code>find</code>，一个是<code>find_all</code>。<code>find</code>方法是找到第一个满足条件的标签后就立即返回，只返回一个元素。<code>find_all</code>方法是把所有满足条件的标签都选到，然后返回回去。使用这两个方法，最常用的用法是出入<code>name</code>以及<code>attr</code>参数找出符合要求的标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">"a"</span>,attrs=&#123;<span class="string">"id"</span>:<span class="string">"link2"</span>&#125;)</span><br></pre></td></tr></table></figure><p>或者是直接传入属性的的名字作为关键字参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">"a"</span>,id=<span class="string">'link2'</span>)</span><br></pre></td></tr></table></figure><h3 id="2-select方法："><a href="#2-select方法：" class="headerlink" title="2. select方法："></a>2. select方法：</h3><p>使用以上方法可以方便的找出元素。但有时候使用<code>css</code>选择器的方式可以更加的方便。使用<code>css</code>选择器的语法，应该使用<code>select</code>方法。以下列出几种常用的<code>css</code>选择器方法：</p><h4 id="（1）通过标签名查找："><a href="#（1）通过标签名查找：" class="headerlink" title="（1）通过标签名查找："></a>（1）通过标签名查找：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">'a'</span>))</span><br></pre></td></tr></table></figure><h4 id="（2）通过类名查找："><a href="#（2）通过类名查找：" class="headerlink" title="（2）通过类名查找："></a>（2）通过类名查找：</h4><p>通过类名，则应该在类的前面加一个<code>.</code>。比如要查找<code>class=sister</code>的标签。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">'.sister'</span>))</span><br></pre></td></tr></table></figure><h4 id="（3）通过id查找："><a href="#（3）通过id查找：" class="headerlink" title="（3）通过id查找："></a>（3）通过id查找：</h4><p>通过id查找，应该在id的名字前面加一个＃号。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">"#link1"</span>))</span><br></pre></td></tr></table></figure><h4 id="（4）组合查找："><a href="#（4）组合查找：" class="headerlink" title="（4）组合查找："></a>（4）组合查找：</h4><p>组合查找即和写 class 文件时，标签名与类名、id名进行的组合原理是一样的，例如查找 p 标签中，id 等于 link1的内容，二者需要用空格分开：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">"p #link1"</span>))</span><br></pre></td></tr></table></figure><p>直接子标签查找，则使用 &gt; 分隔：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">"head &gt; title"</span>))</span><br></pre></td></tr></table></figure><h4 id="（5）通过属性查找："><a href="#（5）通过属性查找：" class="headerlink" title="（5）通过属性查找："></a>（5）通过属性查找：</h4><p>查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">'a[href="http://example.com/elsie"]'</span>))</span><br></pre></td></tr></table></figure><h4 id="（6）获取内容"><a href="#（6）获取内容" class="headerlink" title="（6）获取内容"></a>（6）获取内容</h4><p>以上的 select 方法返回的结果都是列表形式，可以遍历形式输出，然后用 get_text() 方法来获取它的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="keyword">print</span> type(soup.select(<span class="string">'title'</span>))</span><br><span class="line"><span class="keyword">print</span> soup.select(<span class="string">'title'</span>)[<span class="number">0</span>].get_text()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> title <span class="keyword">in</span> soup.select(<span class="string">'title'</span>):</span><br><span class="line">    <span class="keyword">print</span> title.get_text()</span><br></pre></td></tr></table></figure><h1 id="正则表达式和re模块："><a href="#正则表达式和re模块：" class="headerlink" title="正则表达式和re模块："></a>正则表达式和re模块：</h1><h2 id="什么是正则表达式："><a href="#什么是正则表达式：" class="headerlink" title="什么是正则表达式："></a>什么是正则表达式：</h2><p>通俗理解：按照一定的规则，从某个字符串中匹配出想要的数据。这个规则就是正则表达式。<br>标准答案：<a href="https://baike.baidu.com/item/正则表达式/1700215?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/正则表达式/1700215?fr=aladdin</a></p><h2 id="一个段子："><a href="#一个段子：" class="headerlink" title="一个段子："></a>一个段子：</h2><p>世界是分为两种人，一种是懂正则表达式的，一种是不懂正则表达式的。</p><h2 id="正则表达式常用匹配规则："><a href="#正则表达式常用匹配规则：" class="headerlink" title="正则表达式常用匹配规则："></a>正则表达式常用匹配规则：</h2><h3 id="匹配某个字符串："><a href="#匹配某个字符串：" class="headerlink" title="匹配某个字符串："></a>匹配某个字符串：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'hello'</span></span><br><span class="line">ret = re.match(<span class="string">'he'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; he</span><br></pre></td></tr></table></figure><p>以上便可以在<code>hello</code>中，匹配出<code>he</code>。</p><h3 id="点（-）匹配任意的字符："><a href="#点（-）匹配任意的字符：" class="headerlink" title="点（.）匹配任意的字符："></a>点（.）匹配任意的字符：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"ab"</span></span><br><span class="line">ret = re.match(<span class="string">'.'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; a</span><br></pre></td></tr></table></figure><p>但是点（.）不能匹配不到换行符。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"ab"</span></span><br><span class="line">ret = re.match(<span class="string">'.'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></table></figure><h3 id="d匹配任意的数字："><a href="#d匹配任意的数字：" class="headerlink" title="\d匹配任意的数字："></a>\d匹配任意的数字：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"123"</span></span><br><span class="line">ret = re.match(<span class="string">'\d'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="D匹配任意的非数字："><a href="#D匹配任意的非数字：" class="headerlink" title="\D匹配任意的非数字："></a>\D匹配任意的非数字：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"a"</span></span><br><span class="line">ret = re.match(<span class="string">'\D'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; a</span><br></pre></td></tr></table></figure><p>而如果text是等于一个数字，那么就匹配不成功了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"1"</span></span><br><span class="line">ret = re.match(<span class="string">'\D'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></table></figure><h3 id="s匹配的是空白字符（包括：-n，-t，-r和空格）："><a href="#s匹配的是空白字符（包括：-n，-t，-r和空格）：" class="headerlink" title="\s匹配的是空白字符（包括：\n，\t，\r和空格）："></a>\s匹配的是空白字符（包括：\n，\t，\r和空格）：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"\t"</span></span><br><span class="line">ret = re.match(<span class="string">'\s'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; 空白</span><br></pre></td></tr></table></figure><h3 id="w匹配的是a-z和A-Z以及数字和下划线："><a href="#w匹配的是a-z和A-Z以及数字和下划线：" class="headerlink" title="\w匹配的是a-z和A-Z以及数字和下划线："></a>\w匹配的是<code>a-z</code>和<code>A-Z</code>以及数字和下划线：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"_"</span></span><br><span class="line">ret = re.match(<span class="string">'\w'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; _</span><br></pre></td></tr></table></figure><p>而如果要匹配一个其他的字符，那么就匹配不到。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"+"</span></span><br><span class="line">ret = re.match(<span class="string">'\w'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; AttributeError: <span class="string">'NoneType'</span> object has no attribute</span><br></pre></td></tr></table></figure><h3 id="W匹配的是和-w相反的："><a href="#W匹配的是和-w相反的：" class="headerlink" title="\W匹配的是和\w相反的："></a>\W匹配的是和\w相反的：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"+"</span></span><br><span class="line">ret = re.match(<span class="string">'\W'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; +</span><br></pre></td></tr></table></figure><p>而如果你的text是一个下划线或者英文字符，那么就匹配不到了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"_"</span></span><br><span class="line">ret = re.match(<span class="string">'\W'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; AttributeError: <span class="string">'NoneType'</span> object has no attribute</span><br></pre></td></tr></table></figure><h3 id="组合的方式，只要满足中括号中的某一项都算匹配成功："><a href="#组合的方式，只要满足中括号中的某一项都算匹配成功：" class="headerlink" title="[]组合的方式，只要满足中括号中的某一项都算匹配成功："></a>[]组合的方式，只要满足中括号中的某一项都算匹配成功：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"0731-88888888"</span></span><br><span class="line">ret = re.match(<span class="string">'[\d\-]+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; <span class="number">0731</span><span class="number">-88888888</span></span><br></pre></td></tr></table></figure><p>之前讲到的几种匹配规则，其实可以使用中括号的形式来进行替代：</p><ul><li>\d：[0-9]</li><li>\D：<a href="#fn_0-9">0-9</a></li><li>\w：[0-9a-zA-Z_]</li><li>\W：[^0-9a-zA-Z_]</li></ul><h3 id="匹配多个字符："><a href="#匹配多个字符：" class="headerlink" title="匹配多个字符："></a>匹配多个字符：</h3><ol><li><p><code>*</code>：可以匹配0或者任意多个字符。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"0731"</span></span><br><span class="line">ret = re.match(<span class="string">'\d*'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; <span class="number">0731</span></span><br></pre></td></tr></table></figure><p>以上因为匹配的要求是<code>\d</code>，那么就要求是数字，后面跟了一个星号，就可以匹配到0731这四个字符。</p></li><li><p><code>+</code>：可以匹配1个或者多个字符。最少一个。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"abc"</span></span><br><span class="line">ret = re.match(<span class="string">'\w+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; abc</span><br></pre></td></tr></table></figure><p>因为匹配的是<code>\w</code>，那么就要求是英文字符，后面跟了一个加号，意味着最少要有一个满足<code>\w</code>的字符才能够匹配到。如果text是一个空白字符或者是一个不满足\w的字符，那么就会报错。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">""</span></span><br><span class="line">ret = re.match(<span class="string">'\w+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; AttributeError: <span class="string">'NoneType'</span> object has no attribute</span><br></pre></td></tr></table></figure></li><li><p><code>?</code>：匹配的字符可以出现一次或者不出现（0或者1）。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"123"</span></span><br><span class="line">ret = re.match(<span class="string">'\d?'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p><code>{m}</code>：匹配m个字符。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"123"</span></span><br><span class="line">ret = re.match(<span class="string">'\d&#123;2&#125;'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; <span class="number">12</span></span><br></pre></td></tr></table></figure></li><li><p><code>{m,n}</code>：匹配m-n个字符。在这中间的字符都可以匹配到。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"123"</span></span><br><span class="line">ret = re.match(<span class="string">'\d&#123;1,2&#125;'</span>,text)</span><br><span class="line">prit(ret.group())</span><br><span class="line">&gt;&gt; <span class="number">12</span></span><br></pre></td></tr></table></figure><p>如果text只有一个字符，那么也可以匹配出来。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"1"</span></span><br><span class="line">ret = re.match(<span class="string">'\d&#123;1,2&#125;'</span>,text)</span><br><span class="line">prit(ret.group())</span><br><span class="line">&gt;&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="小案例："><a href="#小案例：" class="headerlink" title="小案例："></a>小案例：</h3><ol><li><p>验证手机号码：手机号码的规则是以<code>1</code>开头，第二位可以是<code>34587</code>，后面那9位就可以随意了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"18570631587"</span></span><br><span class="line">ret = re.match(<span class="string">'1[34587]\d&#123;9&#125;'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; <span class="number">18570631587</span></span><br></pre></td></tr></table></figure><p>而如果是个不满足条件的手机号码。那么就匹配不到了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"1857063158"</span></span><br><span class="line">ret = re.match(<span class="string">'1[34587]\d&#123;9&#125;'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; AttributeError: <span class="string">'NoneType'</span> object has no attribute</span><br></pre></td></tr></table></figure></li><li><p>验证邮箱：邮箱的规则是邮箱名称是用<code>数字、数字、下划线</code>组成的，然后是<code>@</code>符号，后面就是域名了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"hynever@163.com"</span></span><br><span class="line">ret = re.match(<span class="string">'\w+@\w+\.[a-zA-Z\.]+'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure></li><li><p>验证URL：URL的规则是前面是<code>http</code>或者<code>https</code>或者是<code>ftp</code>然后再加上一个冒号，再加上一个斜杠，再后面就是可以出现任意非空白字符了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"http://www.baidu.com/"</span></span><br><span class="line">ret = re.match(<span class="string">'(http|https|ftp)://[^\s]+'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure></li><li><p>验证身份证：身份证的规则是，总共有18位，前面17位都是数字，后面一位可以是数字，也可以是小写的x，也可以是大写的X。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"3113111890812323X"</span></span><br><span class="line">ret = re.match(<span class="string">'\d&#123;17&#125;[\dxX]'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure></li></ol><h3 id="（脱字号）：表示以…开始："><a href="#（脱字号）：表示以…开始：" class="headerlink" title="^（脱字号）：表示以…开始："></a>^（脱字号）：表示以…开始：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"hello"</span></span><br><span class="line">ret = re.match(<span class="string">'^h'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p>如果是在中括号中，那么代表的是取反操作.</p><h3 id="：表示以…结束："><a href="#：表示以…结束：" class="headerlink" title="$：表示以…结束："></a>$：表示以…结束：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配163.com的邮箱</span></span><br><span class="line">text = <span class="string">"xxx@163.com"</span></span><br><span class="line">ret = re.search(<span class="string">'\w+@163\.com$'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; xxx@<span class="number">163.</span>com</span><br></pre></td></tr></table></figure><h3 id="：匹配多个表达式或者字符串："><a href="#：匹配多个表达式或者字符串：" class="headerlink" title="|：匹配多个表达式或者字符串："></a>|：匹配多个表达式或者字符串：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"hello|world"</span></span><br><span class="line">ret = re.search(<span class="string">'hello'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; hello</span><br></pre></td></tr></table></figure><h3 id="贪婪模式和非贪婪模式："><a href="#贪婪模式和非贪婪模式：" class="headerlink" title="贪婪模式和非贪婪模式："></a>贪婪模式和非贪婪模式：</h3><p>贪婪模式：正则表达式会匹配尽量多的字符。默认是贪婪模式。<br>非贪婪模式：正则表达式会尽量少的匹配字符。<br>示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"0123456"</span></span><br><span class="line">ret = re.match(<span class="string">'\d+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"><span class="comment"># 因为默认采用贪婪模式，所以会输出0123456</span></span><br><span class="line">&gt;&gt; <span class="number">0123456</span></span><br></pre></td></tr></table></figure><p>可以改成非贪婪模式，那么就只会匹配到0。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"0123456"</span></span><br><span class="line">ret = re.match(<span class="string">'\d+?'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><h3 id="案例：匹配0-100之间的数字："><a href="#案例：匹配0-100之间的数字：" class="headerlink" title="案例：匹配0-100之间的数字："></a>案例：匹配<code>0-100</code>之间的数字：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'99'</span></span><br><span class="line">ret = re.match(<span class="string">'[1-9]?\d$|100$'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; <span class="number">99</span></span><br></pre></td></tr></table></figure><p>而如果<code>text=101</code>，那么就会抛出一个异常。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'101'</span></span><br><span class="line">ret = re.match(<span class="string">'[1-9]?\d$|100$'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></table></figure><h3 id="转义字符和原生字符串："><a href="#转义字符和原生字符串：" class="headerlink" title="转义字符和原生字符串："></a>转义字符和原生字符串：</h3><p>在正则表达式中，有些字符是有特殊意义的字符。因此如果想要匹配这些字符，那么就必须使用反斜杠进行转义。比如<code>$</code>代表的是以…结尾，如果想要匹配<code>$</code>，那么就必须使用<code>\$</code>。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"apple price is \$99,orange paice is $88"</span></span><br><span class="line">ret = re.search(<span class="string">'\$(\d+)'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; $<span class="number">99</span></span><br></pre></td></tr></table></figure><p>原生字符串：<br>在正则表达式中，<code>\</code>是专门用来做转义的。在Python中<code>\</code>也是用来做转义的。因此如果想要在普通的字符串中匹配出<code>\</code>，那么要给出四个<code>\</code>。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"apple \c"</span></span><br><span class="line">ret = re.search(<span class="string">'\\\\c'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p>因此要使用原生字符串就可以解决这个问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"apple \c"</span></span><br><span class="line">ret = re.search(<span class="string">r'\\c'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><hr><h2 id="re模块中常用函数："><a href="#re模块中常用函数：" class="headerlink" title="re模块中常用函数："></a>re模块中常用函数：</h2><h3 id="match："><a href="#match：" class="headerlink" title="match："></a>match：</h3><p>从开始的位置进行匹配。如果开始的位置没有匹配到。就直接失败了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'hello'</span></span><br><span class="line">ret = re.match(<span class="string">'h'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; h</span><br></pre></td></tr></table></figure><p>如果第一个字母不是<code>h</code>，那么就会失败。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'ahello'</span></span><br><span class="line">ret = re.match(<span class="string">'h'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></table></figure><p>如果想要匹配换行的数据，那么就要传入一个<code>flag=re.DOTALL</code>，就可以匹配换行符了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"abc\nabc"</span></span><br><span class="line">ret = re.match(<span class="string">'abc.*abc'</span>,text,re.DOTALL)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><h3 id="search："><a href="#search：" class="headerlink" title="search："></a>search：</h3><p>在字符串中找满足条件的字符。如果找到，就返回。说白了，就是只会找到第一个满足条件的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'apple price $99 orange price $88'</span></span><br><span class="line">ret = re.search(<span class="string">'\d+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">&gt;&gt; <span class="number">99</span></span><br></pre></td></tr></table></figure><h3 id="分组："><a href="#分组：" class="headerlink" title="分组："></a>分组：</h3><p>在正则表达式中，可以对过滤到的字符串进行分组。分组使用圆括号的方式。</p><ol><li><code>group</code>：和<code>group(0)</code>是等价的，返回的是整个满足条件的字符串。</li><li><code>groups</code>：返回的是里面的子组。索引从1开始。</li><li><code>group(1)</code>：返回的是第一个子组，可以传入多个。<br>示例代码如下：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"apple price is $99,orange price is $10"</span></span><br><span class="line">ret = re.search(<span class="string">r".*(\$\d+).*(\$\d+)"</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">print(ret.group(<span class="number">0</span>))</span><br><span class="line">print(ret.group(<span class="number">1</span>))</span><br><span class="line">print(ret.group(<span class="number">2</span>))</span><br><span class="line">print(ret.groups())</span><br></pre></td></tr></table></figure><h3 id="findall："><a href="#findall：" class="headerlink" title="findall："></a>findall：</h3><p>找出所有满足条件的，返回的是一个列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'apple price $99 orange price $88'</span></span><br><span class="line">ret = re.findall(<span class="string">'\d+'</span>,text)</span><br><span class="line">print(ret)</span><br><span class="line">&gt;&gt; [<span class="string">'99'</span>, <span class="string">'88'</span>]</span><br></pre></td></tr></table></figure><h3 id="sub："><a href="#sub：" class="headerlink" title="sub："></a>sub：</h3><p>用来替换字符串。将匹配到的字符串替换为其他字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'apple price $99 orange price $88'</span></span><br><span class="line">ret = re.sub(<span class="string">'\d+'</span>,<span class="string">'0'</span>,text)</span><br><span class="line">print(ret)</span><br><span class="line">&gt;&gt; apple price $<span class="number">0</span> orange price $<span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>sub</code>函数的案例，获取拉勾网中的数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;基本要求：&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;1、精通HTML5、CSS3、 JavaScript等Web前端开发技术，对html5页面适配充分了解，熟悉不同浏览器间的差异，熟练写出兼容各种浏览器的代码；&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;2、熟悉运用常见JS开发框架，如JQuery、vue、angular，能快速高效实现各种交互效果；&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;3、熟悉编写能够自动适应HTML5界面，能让网页格式自动适应各款各大小的手机；&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;4、利用HTML5相关技术开发移动平台、PC终端的前端页面，实现HTML5模板化；&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;5、熟悉手机端和PC端web实现的差异，有移动平台web前端开发经验，了解移动互联网产品和行业，有在Android,iOS等平台下HTML5+CSS+JavaScript（或移动JS框架）开发经验者优先考虑；6、良好的沟通能力和团队协作精神，对移动互联网行业有浓厚兴趣，有较强的研究能力和学习能力；&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;7、能够承担公司前端培训工作，对公司各业务线的前端（HTML5\CSS3）工作进行支撑和指导。&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;br&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;岗位职责：&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;1、利用html5及相关技术开发移动平台、微信、APP等前端页面，各类交互的实现；&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;2、持续的优化前端体验和页面响应速度，并保证兼容性和执行效率；&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;3、根据产品需求，分析并给出最优的页面前端结构解决方案；&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;4、协助后台及客户端开发人员完成功能开发和调试；&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;5、移动端主流浏览器的适配、移动端界面自适应研发。&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">ret = re.sub(<span class="string">'&lt;/?[a-zA-Z0-9]+&gt;'</span>,<span class="string">""</span>,html)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><h3 id="split："><a href="#split：" class="headerlink" title="split："></a>split：</h3><p>使用正则表达式来分割字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"hello world ni hao"</span></span><br><span class="line">ret = re.split(<span class="string">'\W'</span>,text)</span><br><span class="line">print(ret)</span><br><span class="line">&gt;&gt; [<span class="string">"hello"</span>,<span class="string">"world"</span>,<span class="string">"ni"</span>,<span class="string">"hao"</span>]</span><br></pre></td></tr></table></figure><h3 id="compile："><a href="#compile：" class="headerlink" title="compile："></a>compile：</h3><p>对于一些经常要用到的正则表达式，可以使用<code>compile</code>进行编译，后期再使用的时候可以直接拿过来用，执行效率会更快。而且<code>compile</code>还可以指定<code>flag=re.VERBOSE</code>，在写正则表达式的时候可以做好注释。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"the number is 20.50"</span></span><br><span class="line">r = re.compile(<span class="string">r"""</span></span><br><span class="line"><span class="string">                \d+ # 小数点前面的数字</span></span><br><span class="line"><span class="string">                \.? # 小数点</span></span><br><span class="line"><span class="string">                \d* # 小数点后面的数字</span></span><br><span class="line"><span class="string">                """</span>,re.VERBOSE)</span><br><span class="line">ret = re.search(r,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><h1 id="json文件处理："><a href="#json文件处理：" class="headerlink" title="json文件处理："></a>json文件处理：</h1><h2 id="什么是json："><a href="#什么是json：" class="headerlink" title="什么是json："></a>什么是json：</h2><p>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript (w3c制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。更多解释请见：<a href="https://baike.baidu.com/item/JSON/2462549?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/JSON/2462549?fr=aladdin</a></p><h2 id="JSON支持数据格式："><a href="#JSON支持数据格式：" class="headerlink" title="JSON支持数据格式："></a>JSON支持数据格式：</h2><ol><li>对象（字典）。使用花括号。</li><li>数组（列表）。使用方括号。</li><li>整形、浮点型、布尔类型还有null类型。</li><li>字符串类型（字符串必须要用双引号，不能用单引号）。</li></ol><p>多个数据之间使用逗号分开。<br><strong>注意：json本质上就是一个字符串。</strong></p><h2 id="字典和列表转JSON："><a href="#字典和列表转JSON：" class="headerlink" title="字典和列表转JSON："></a>字典和列表转JSON：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">books = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'钢铁是怎样练成的'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.8</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'红楼梦'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.9</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">json_str = json.dumps(books,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">print(json_str)</span><br></pre></td></tr></table></figure><p>因为<code>json</code>在<code>dump</code>的时候，只能存放<code>ascii</code>的字符，因此会将中文进行转义，这时候我们可以使用<code>ensure_ascii=False</code>关闭这个特性。<br>在<code>Python</code>中。只有基本数据类型才能转换成<code>JSON</code>格式的字符串。也即：<code>int</code>、<code>float</code>、<code>str</code>、<code>list</code>、<code>dict</code>、<code>tuple</code>。</p><h3 id="将json数据直接dump到文件中："><a href="#将json数据直接dump到文件中：" class="headerlink" title="将json数据直接dump到文件中："></a>将json数据直接<code>dump</code>到文件中：</h3><p><code>json</code>模块中除了<code>dumps</code>函数，还有一个<code>dump</code>函数，这个函数可以传入一个文件指针，直接将字符串<code>dump</code>到文件中。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">books = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'钢铁是怎样练成的'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.8</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'红楼梦'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.9</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.json'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json.dump(books,fp)</span><br></pre></td></tr></table></figure><h2 id="将一个json字符串load成Python对象："><a href="#将一个json字符串load成Python对象：" class="headerlink" title="将一个json字符串load成Python对象："></a>将一个json字符串load成Python对象：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">json_str = <span class="string">'[&#123;"title": "钢铁是怎样练成的", "price": 9.8&#125;, &#123;"title": "红楼梦", "price": 9.9&#125;]'</span></span><br><span class="line">books = json.loads(json_str,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(type(books))</span><br><span class="line">print(books)</span><br></pre></td></tr></table></figure><h3 id="直接从文件中读取json："><a href="#直接从文件中读取json：" class="headerlink" title="直接从文件中读取json："></a>直接从文件中读取json：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.json'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json_str = json.load(fp)</span><br><span class="line">    print(json_str)</span><br></pre></td></tr></table></figure><h1 id="csv文件处理"><a href="#csv文件处理" class="headerlink" title="csv文件处理"></a>csv文件处理</h1><h2 id="读取csv文件："><a href="#读取csv文件：" class="headerlink" title="读取csv文件："></a>读取csv文件：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stock.csv'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.reader(fp)</span><br><span class="line">    titles = next(reader)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> reader:</span><br><span class="line">        print(x)</span><br></pre></td></tr></table></figure><p>这样操作，以后获取数据的时候，就要通过下表来获取数据。如果想要在获取数据的时候通过标题来获取。那么可以使用<code>DictReader</code>。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stock.csv'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.DictReader(fp)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> reader:</span><br><span class="line">        print(x[<span class="string">'turnoverVol'</span>])</span><br></pre></td></tr></table></figure><h2 id="写入数据到csv文件："><a href="#写入数据到csv文件：" class="headerlink" title="写入数据到csv文件："></a>写入数据到csv文件：</h2><p>写入数据到csv文件，需要创建一个<code>writer</code>对象，主要用到两个方法。一个是<code>writerow</code>，这个是写入一行。一个是<code>writerows</code>，这个是写入多行。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">headers = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'classroom'</span>]</span><br><span class="line">values = [</span><br><span class="line">    (<span class="string">'zhiliao'</span>,<span class="number">18</span>,<span class="string">'111'</span>),</span><br><span class="line">    (<span class="string">'wena'</span>,<span class="number">20</span>,<span class="string">'222'</span>),</span><br><span class="line">    (<span class="string">'bbc'</span>,<span class="number">21</span>,<span class="string">'111'</span>)</span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.csv'</span>,<span class="string">'w'</span>,newline=<span class="string">''</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    writer = csv.writer(fp)</span><br><span class="line">    writer.writerow(headers)</span><br><span class="line">    writer.writerows(values)</span><br></pre></td></tr></table></figure><p>也可以使用字典的方式把数据写入进去。这时候就需要使用<code>DictWriter</code>了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">headers = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'classroom'</span>]</span><br><span class="line">values = [</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">'wenn'</span>,<span class="string">"age"</span>:<span class="number">20</span>,<span class="string">"classroom"</span>:<span class="string">'222'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">'abc'</span>,<span class="string">"age"</span>:<span class="number">30</span>,<span class="string">"classroom"</span>:<span class="string">'333'</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.csv'</span>,<span class="string">'w'</span>,newline=<span class="string">''</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    writer = csv.DictWriter(fp,headers)</span><br><span class="line">    writer = csv.writeheader()</span><br><span class="line">    writer.writerow(&#123;<span class="string">'name'</span>:<span class="string">'zhiliao'</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"classroom"</span>:<span class="string">'111'</span>&#125;)</span><br><span class="line">    writer.writerows(values)</span><br></pre></td></tr></table></figure><p>对于csv文件的操作python提供了<strong>pandas库</strong>，以更灵活的方式来操作二维表。</p><h1 id="MySQL数据库操作"><a href="#MySQL数据库操作" class="headerlink" title="MySQL数据库操作"></a>MySQL数据库操作</h1><h2 id="安装mysql："><a href="#安装mysql：" class="headerlink" title="安装mysql："></a>安装mysql：</h2><ol><li>在官网：<a href="https://dev.mysql.com/downloads/windows/installer/5.7.html" target="_blank" rel="noopener">https://dev.mysql.com/downloads/windows/installer/5.7.html</a></li><li>如果提示没有<code>.NET Framework</code>框架。那么就在提示框中找到下载链接，下载一个就可以了。</li><li>如果提示没有<code>Microsoft Virtual C++ x64(x86)</code>，那么百度或者谷歌这个软件安装即可。</li><li>如果没有找到。那么私聊我。</li></ol><h2 id="navicat："><a href="#navicat：" class="headerlink" title="navicat："></a>navicat：</h2><p>navicat是一个操作mysql数据库非常方便的软件。使用他操作数据库，就跟使用excel操作数据是一样的。</p><h2 id="安装驱动程序："><a href="#安装驱动程序：" class="headerlink" title="安装驱动程序："></a>安装驱动程序：</h2><p>Python要想操作MySQL。必须要有一个中间件，或者叫做驱动程序。驱动程序有很多。比如有<code>mysqldb</code>、<code>mysqlclient</code>、<code>pymysql</code>等。在这里，我们选择用<code>pymysql</code>。安装方式也是非常简单，通过命令<code>pip install pymysql</code>即可安装。</p><h2 id="数据库连接："><a href="#数据库连接：" class="headerlink" title="数据库连接："></a>数据库连接：</h2><p>数据库连接之前。首先先确认以下工作完成，这里我们以一个<code>pymysql_test</code>数据库.以下将介绍连接<code>mysql</code>的示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(</span><br><span class="line">    host=<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    user=<span class="string">'root'</span>,</span><br><span class="line">    password=<span class="string">'root'</span>,</span><br><span class="line">    database=<span class="string">'pymysql_test'</span>,</span><br><span class="line">    port=<span class="number">3306</span></span><br><span class="line">)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">cursor.execute(<span class="string">"select 1"</span>)</span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">print(data)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h2 id="插入数据："><a href="#插入数据：" class="headerlink" title="插入数据："></a>插入数据：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(</span><br><span class="line">    host=<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    user=<span class="string">'root'</span>,</span><br><span class="line">    password=<span class="string">'root'</span>,</span><br><span class="line">    database=<span class="string">'pymysql_test'</span>,</span><br><span class="line">    port=<span class="number">3306</span></span><br><span class="line">)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">insert into user(</span></span><br><span class="line"><span class="string">    id,username,gender,age,password</span></span><br><span class="line"><span class="string">  ) </span></span><br><span class="line"><span class="string">  values(null,'abc',1,18,'111111');</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.commit()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>如果在数据还不能保证的情况下，可以使用以下方式来插入数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">insert into user(</span></span><br><span class="line"><span class="string">    id,username,gender,age,password</span></span><br><span class="line"><span class="string">  ) </span></span><br><span class="line"><span class="string">  values(null,%s,%s,%s,%s);</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql,(<span class="string">'spider'</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="string">'222222'</span>))</span><br></pre></td></tr></table></figure><h2 id="查找数据："><a href="#查找数据：" class="headerlink" title="查找数据："></a>查找数据：</h2><p>使用<code>pymysql</code>查询数据。可以使用<code>fetch*</code>方法。</p><ol><li><code>fetchone()</code>：这个方法每次之获取一条数据。</li><li><code>fetchall()</code>：这个方法接收全部的返回结果。</li><li><code>fetchmany(size)</code>：可以获取指定条数的数据。<br>示例代码如下：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">select * from user</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    result = cursor.fetchone()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(result)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>或者是直接使用<code>fetchall</code>，一次性可以把所有满足条件的数据都取出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">select * from user</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">results = cursor.fetchall()</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>或者是使用<code>fetchmany</code>，指定获取多少条数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">select * from user</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">results = cursor.fetchmany(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h2 id="删除数据："><a href="#删除数据：" class="headerlink" title="删除数据："></a>删除数据：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">delete from user where id=1</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.commit()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h2 id="更新数据："><a href="#更新数据：" class="headerlink" title="更新数据："></a>更新数据：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'root'</span>,database=<span class="string">'pymysql_demo'</span>,port=<span class="number">3306</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">update user set username='aaa' where id=1</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h1 id="多线程爬虫"><a href="#多线程爬虫" class="headerlink" title="多线程爬虫"></a>多线程爬虫</h1><p>有些时候，比如下载图片，因为下载图片是一个耗时的操作。如果采用之前那种同步的方式下载。那效率肯会特别慢。这时候我们就可以考虑使用多线程的方式来下载图片。</p><h2 id="多线程介绍："><a href="#多线程介绍：" class="headerlink" title="多线程介绍："></a>多线程介绍：</h2><p>多线程是为了同步完成多项任务，通过提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。<br>最简单的比喻多线程就像火车的每一节车厢，而进程则是火车。车厢离开火车是无法跑动的，同理火车也可以有多节车厢。多线程的出现就是为了提高效率。同时它的出现也带来了一些问题。更多介绍请参考：<a href="https://baike.baidu.com/item/多线程/1190404?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/多线程/1190404?fr=aladdin</a></p><h2 id="threading模块介绍："><a href="#threading模块介绍：" class="headerlink" title="threading模块介绍："></a>threading模块介绍：</h2><p><code>threading</code>模块是<code>python</code>中专门提供用来做多线程编程的模块。<code>threading</code>模块中最常用的类是<code>Thread</code>。以下看一个简单的多线程程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coding</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">'%s正在写代码'</span> % x)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">'%s正在画图'</span> % x)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_thread</span><span class="params">()</span>:</span></span><br><span class="line">    coding()</span><br><span class="line">    drawing()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = threading.Thread(target=coding)</span><br><span class="line">    t2 = threading.Thread(target=drawing)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    multi_thread()</span><br></pre></td></tr></table></figure><h3 id="查看线程数："><a href="#查看线程数：" class="headerlink" title="查看线程数："></a>查看线程数：</h3><p>使用<code>threading.enumerate()</code>函数便可以看到当前线程的数量。</p><h3 id="查看当前线程的名字："><a href="#查看当前线程的名字：" class="headerlink" title="查看当前线程的名字："></a>查看当前线程的名字：</h3><p>使用<code>threading.current_thread()</code>可以看到当前线程的信息。</p><h3 id="继承自threading-Thread类："><a href="#继承自threading-Thread类：" class="headerlink" title="继承自threading.Thread类："></a>继承自<code>threading.Thread</code>类：</h3><p>为了让线程代码更好的封装。可以使用<code>threading</code>模块下的<code>Thread</code>类，继承自这个类，然后实现<code>run</code>方法，线程就会自动运行<code>run</code>方法中的代码。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodingThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            print(<span class="string">'%s正在写代码'</span> % threading.current_thread())</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawingThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            print(<span class="string">'%s正在画图'</span> % threading.current_thread())</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = CodingThread()</span><br><span class="line">    t2 = DrawingThread()</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    multi_thread()</span><br></pre></td></tr></table></figure><h3 id="多线程共享全局变量的问题："><a href="#多线程共享全局变量的问题：" class="headerlink" title="多线程共享全局变量的问题："></a>多线程共享全局变量的问题：</h3><p>多线程都是在同一个进程中运行的。因此在进程中的全局变量所有线程都是可共享的。这就造成了一个问题，因为线程执行的顺序是无序的。有可能会造成数据错误。比如以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">tickets = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ticket</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> tickets</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        tickets += <span class="number">1</span></span><br><span class="line">    print(<span class="string">'tickets:%d'</span>%tickets)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=get_ticket)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>以上结果正常来讲应该是6，但是因为多线程运行的不确定性。因此最后的结果可能是随机的。</p><h3 id="锁机制："><a href="#锁机制：" class="headerlink" title="锁机制："></a>锁机制：</h3><p>为了解决以上使用共享全局变量的问题。<code>threading</code>提供了一个<code>Lock</code>类，这个类可以在某个线程访问某个变量的时候加锁，其他线程此时就不能进来，直到当前线程处理完后，把锁释放了，其他线程才能进来处理。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">VALUE = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">gLock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_value</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> VALUE</span><br><span class="line">    gLock.acquire()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        VALUE += <span class="number">1</span></span><br><span class="line">    gLock.release()</span><br><span class="line">    print(<span class="string">'value：%d'</span>%VALUE)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=add_value)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="Lock版本生产者和消费者模式："><a href="#Lock版本生产者和消费者模式：" class="headerlink" title="Lock版本生产者和消费者模式："></a>Lock版本生产者和消费者模式：</h2><p>生产者和消费者模式是多线程开发中经常见到的一种模式。生产者的线程专门用来生产一些数据，然后存放到一个中间的变量中。消费者再从这个中间的变量中取出数据进行消费。但是因为要使用中间变量，中间变量经常是一些全局变量，因此需要使用锁来保证数据完整性。以下是使用<code>threading.Lock</code>锁实现的“生产者与消费者模式”的一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">1000</span></span><br><span class="line">gLock = threading.Lock()</span><br><span class="line"><span class="comment"># 记录生产者生产的次数，达到10次就不再生产</span></span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gLock</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="comment"># 如果已经达到10次了，就不再生产了</span></span><br><span class="line">            <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                gLock.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            gMoney += money</span><br><span class="line">            print(<span class="string">'%s当前存入%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            gLock.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gLock</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">500</span>)</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="keyword">if</span> gMoney &gt; money:</span><br><span class="line">                gMoney -= money</span><br><span class="line">                print(<span class="string">'%s当前取出%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">                time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果钱不够了，有可能是已经超过了次数，这时候就判断一下</span></span><br><span class="line">                <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                    gLock.release()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                print(<span class="string">"%s当前想取%s元钱，剩余%s元钱，不足！"</span> % (threading.current_thread(),money,gMoney))</span><br><span class="line">            gLock.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Consumer(name=<span class="string">'消费者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Producer(name=<span class="string">'生产者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="Condition版的生产者与消费者模式："><a href="#Condition版的生产者与消费者模式：" class="headerlink" title="Condition版的生产者与消费者模式："></a>Condition版的生产者与消费者模式：</h2><p><code>Lock</code>版本的生产者与消费者模式可以正常的运行。但是存在一个不足，在消费者中，总是通过<code>while True</code>死循环并且上锁的方式去判断钱够不够。上锁是一个很耗费CPU资源的行为。因此这种方式不是最好的。还有一种更好的方式便是使用<code>threading.Condition</code>来实现。<code>threading.Condition</code>可以在没有数据的时候处于阻塞等待状态。一旦有合适的数据了，还可以使用<code>notify</code>相关的函数来通知其他处于等待状态的线程。这样就可以不用做一些无用的上锁和解锁的操作。可以提高程序的性能。首先对<code>threading.Condition</code>相关的函数做个介绍，<code>threading.Condition</code>类似<code>threading.Lock</code>，可以在修改全局数据的时候进行上锁，也可以在修改完毕后进行解锁。以下将一些常用的函数做个简单的介绍：</p><ol><li><code>acquire</code>：上锁。</li><li><code>release</code>：解锁。</li><li><code>wait</code>：将当前线程处于等待状态，并且会释放锁。可以被其他线程使用<code>notify</code>和<code>notify_all</code>函数唤醒。被唤醒后会继续等待上锁，上锁后继续执行下面的代码。</li><li><code>notify</code>：通知某个正在等待的线程，默认是第1个等待的线程。</li><li><code>notify_all</code>：通知所有正在等待的线程。<code>notify</code>和<code>notify_all</code>不会释放锁。并且需要在<code>release</code>之前调用。</li></ol><p><code>Condition</code>版的生产者与消费者模式代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">1000</span></span><br><span class="line">gCondition = threading.Condition()</span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line">gTotalTimes = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gCondition</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="keyword">if</span> gTimes &gt;= gTotalTimes:</span><br><span class="line">                gCondition.release()</span><br><span class="line">                print(<span class="string">'当前生产者总共生产了%s次'</span>%gTimes)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            gMoney += money</span><br><span class="line">            print(<span class="string">'%s当前存入%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            gCondition.notify_all()</span><br><span class="line">            gCondition.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gCondition</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">500</span>)</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="comment"># 这里要给个while循环判断，因为等轮到这个线程的时候</span></span><br><span class="line">            <span class="comment"># 条件有可能又不满足了</span></span><br><span class="line">            <span class="keyword">while</span> gMoney &lt; money:</span><br><span class="line">                <span class="keyword">if</span> gTimes &gt;= gTotalTimes:</span><br><span class="line">                    gCondition.release()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                print(<span class="string">'%s准备取%s元钱，剩余%s元钱，不足！'</span>%(threading.current_thread(),money,gMoney))</span><br><span class="line">                gCondition.wait()</span><br><span class="line">            gMoney -= money</span><br><span class="line">            print(<span class="string">'%s当前取出%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            gCondition.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Consumer(name=<span class="string">'消费者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        Producer(name=<span class="string">'生产者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="Queue线程安全队列："><a href="#Queue线程安全队列：" class="headerlink" title="Queue线程安全队列："></a>Queue线程安全队列：</h2><p>在线程中，访问一些全局变量，加锁是一个经常的过程。如果你是想把一些数据存储到某个队列中，那么Python内置了一个线程安全的模块叫做<code>queue</code>模块。Python中的queue模块中提供了同步的、线程安全的队列类，包括FIFO（先进先出）队列Queue，LIFO（后入先出）队列LifoQueue。这些队列都实现了锁原语（可以理解为原子操作，即要么不做，要么都做完），能够在多线程中直接使用。可以使用队列来实现线程间的同步。相关的函数如下：</p><ol><li>初始化Queue(maxsize)：创建一个先进先出的队列。</li><li>qsize()：返回队列的大小。</li><li>empty()：判断队列是否为空。</li><li>full()：判断队列是否满了。</li><li>get()：从队列中取最后一个数据。</li><li>put()：将一个数据放到队列中。</li></ol><h2 id="使用生产者与消费者模式多线程下载表情包："><a href="#使用生产者与消费者模式多线程下载表情包：" class="headerlink" title="使用生产者与消费者模式多线程下载表情包："></a>使用生产者与消费者模式多线程下载表情包：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,img_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(Producer, self).__init__(*args,**kwargs)</span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.img_queue = img_queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            url = self.page_queue.get()</span><br><span class="line">            self.parse_page(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        response = requests.get(url,headers=self.headers)</span><br><span class="line">        text = response.text</span><br><span class="line">        html = etree.HTML(text)</span><br><span class="line">        imgs = html.xpath(<span class="string">"//div[@class='page-content text-center']//a//img"</span>)</span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">            <span class="keyword">if</span> img.get(<span class="string">'class'</span>) == <span class="string">'gif'</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            img_url = img.xpath(<span class="string">".//@data-original"</span>)[<span class="number">0</span>]</span><br><span class="line">            suffix = os.path.splitext(img_url)[<span class="number">1</span>]</span><br><span class="line">            alt = img.xpath(<span class="string">".//@alt"</span>)[<span class="number">0</span>]</span><br><span class="line">            alt = re.sub(<span class="string">r'[，。？?,/\\·]'</span>,<span class="string">''</span>,alt)</span><br><span class="line">            img_name = alt + suffix</span><br><span class="line">            self.img_queue.put((img_url,img_name))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,img_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(Consumer, self).__init__(*args,**kwargs)</span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.img_queue = img_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.img_queue.empty():</span><br><span class="line">                <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            img = self.img_queue.get(block=<span class="literal">True</span>)</span><br><span class="line">            url,filename = img</span><br><span class="line">            request.urlretrieve(url,<span class="string">'images/'</span>+filename)</span><br><span class="line">            print(filename+<span class="string">'  下载完成！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    page_queue = Queue(<span class="number">100</span>)</span><br><span class="line">    img_queue = Queue(<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">        url = <span class="string">"http://www.doutula.com/photo/list/?page=%d"</span> % x</span><br><span class="line">        page_queue.put(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = Producer(page_queue,img_queue)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = Consumer(page_queue,img_queue)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="GIL全局解释器锁："><a href="#GIL全局解释器锁：" class="headerlink" title="GIL全局解释器锁："></a>GIL全局解释器锁：</h2><p>Python自带的解释器是<code>CPython</code>。<code>CPython</code>解释器的多线程实际上是一个假的多线程（在多核CPU中，只能利用一核，不能利用多核）。同一时刻只有一个线程在执行，为了保证同一时刻只有一个线程在执行，在<code>CPython</code>解释器中有一个东西叫做<code>GIL（Global Intepreter Lock）</code>，叫做全局解释器锁。这个解释器锁是有必要的。因为<code>CPython</code>解释器的内存管理不是线程安全的。当然除了<code>CPython</code>解释器，还有其他的解释器，有些解释器是没有<code>GIL</code>锁的，见下面：</p><ol><li><code>Jython</code>：用Java实现的Python解释器。不存在GIL锁。更多详情请见：<a href="https://zh.wikipedia.org/wiki/Jython" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Jython</a></li><li><code>IronPython</code>：用<code>.net</code>实现的Python解释器。不存在GIL锁。更多详情请见：<a href="https://zh.wikipedia.org/wiki/IronPython" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/IronPython</a></li><li><code>PyPy</code>：用<code>Python</code>实现的Python解释器。存在GIL锁。更多详情请见：<a href="https://zh.wikipedia.org/wiki/PyPy" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/PyPy</a><br>GIL虽然是一个假的多线程。但是在处理一些IO操作（比如文件读写和网络请求）还是可以在很大程度上提高效率的。在IO操作上建议使用多线程提高效率。在一些CPU计算操作上不建议使用多线程，而建议使用多进程。</li></ol><h2 id="多线程下载百思不得姐段子作业："><a href="#多线程下载百思不得姐段子作业：" class="headerlink" title="多线程下载百思不得姐段子作业："></a>多线程下载百思不得姐段子作业：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSSpider</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,joke_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(BSSpider, self).__init__(*args,**kwargs)</span><br><span class="line">        self.base_domain = <span class="string">'http://www.budejie.com'</span></span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.joke_queue = joke_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            url = self.page_queue.get()</span><br><span class="line">            response = requests.get(url, headers=self.headers)</span><br><span class="line">            text = response.text</span><br><span class="line">            html = etree.HTML(text)</span><br><span class="line">            descs = html.xpath(<span class="string">"//div[@class='j-r-list-c-desc']"</span>)</span><br><span class="line">            <span class="keyword">for</span> desc <span class="keyword">in</span> descs:</span><br><span class="line">                jokes = desc.xpath(<span class="string">".//text()"</span>)</span><br><span class="line">                joke = <span class="string">"\n"</span>.join(jokes).strip()</span><br><span class="line">                link = self.base_domain+desc.xpath(<span class="string">".//a/@href"</span>)[<span class="number">0</span>]</span><br><span class="line">                self.joke_queue.put((joke,link))</span><br><span class="line">            print(<span class="string">'='</span>*<span class="number">30</span>+<span class="string">"第%s页下载完成！"</span>%url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]+<span class="string">"="</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSWriter</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, joke_queue, writer,gLock, *args, **kwargs)</span>:</span></span><br><span class="line">        super(BSWriter, self).__init__(*args, **kwargs)</span><br><span class="line">        self.joke_queue = joke_queue</span><br><span class="line">        self.writer = writer</span><br><span class="line">        self.lock = gLock</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                joke_info = self.joke_queue.get(timeout=<span class="number">40</span>)</span><br><span class="line">                joke,link = joke_info</span><br><span class="line">                self.lock.acquire()</span><br><span class="line">                self.writer.writerow((joke,link))</span><br><span class="line">                self.lock.release()</span><br><span class="line">                print(<span class="string">'保存一条'</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    page_queue = Queue(<span class="number">10</span>)</span><br><span class="line">    joke_queue = Queue(<span class="number">500</span>)</span><br><span class="line">    gLock = threading.Lock()</span><br><span class="line">    fp = open(<span class="string">'bsbdj.csv'</span>, <span class="string">'a'</span>,newline=<span class="string">''</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    writer = csv.writer(fp)</span><br><span class="line">    writer.writerow((<span class="string">'content'</span>, <span class="string">'link'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        url = <span class="string">'http://www.budejie.com/text/%d'</span> % x</span><br><span class="line">        page_queue.put(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = BSSpider(page_queue,joke_queue)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = BSWriter(joke_queue,writer,gLock)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="动态网页数据抓取"><a href="#动态网页数据抓取" class="headerlink" title="动态网页数据抓取"></a>动态网页数据抓取</h1><h2 id="什么是AJAX："><a href="#什么是AJAX：" class="headerlink" title="什么是AJAX："></a>什么是AJAX：</h2><p>AJAX（Asynchronouse JavaScript And XML）异步JavaScript和XML。过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用Ajax）如果需要更新内容，必须重载整个网页页面。因为传统的在传输数据格式方面，使用的是<code>XML</code>语法。因此叫做<code>AJAX</code>，其实现在数据交互基本上都是使用<code>JSON</code>。使用AJAX加载的数据，即使使用了JS，将数据渲染到了浏览器中，在<code>右键-&gt;查看网页源代码</code>还是不能看到通过ajax加载的数据，只能看到使用这个url加载的html代码。</p><h2 id="获取ajax数据的方式："><a href="#获取ajax数据的方式：" class="headerlink" title="获取ajax数据的方式："></a>获取ajax数据的方式：</h2><ol><li>直接分析ajax调用的接口。然后通过代码请求这个接口。</li><li>使用Selenium+chromedriver模拟浏览器行为获取数据。</li></ol><table><thead><tr><th>方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>分析接口</td><td>直接可以请求到数据。不需要做一些解析工作。代码量少，性能高。</td><td>分析接口比较复杂，特别是一些通过js混淆的接口，要有一定的js功底。容易被发现是爬虫。</td></tr><tr><td>selenium</td><td>直接模拟浏览器的行为。浏览器能请求到的，使用selenium也能请求到。爬虫更稳定。</td><td>代码量多。性能低。</td></tr></tbody></table><h2 id="Selenium-chromedriver获取动态数据："><a href="#Selenium-chromedriver获取动态数据：" class="headerlink" title="Selenium+chromedriver获取动态数据："></a>Selenium+chromedriver获取动态数据：</h2><p><code>Selenium</code>相当于是一个机器人。可以模拟人类在浏览器上的一些行为，自动处理浏览器上的一些行为，比如点击，填充数据，删除cookie等。<code>chromedriver</code>是一个驱动<code>Chrome</code>浏览器的驱动程序，使用他才可以驱动浏览器。当然针对不同的浏览器有不同的driver。以下列出了不同浏览器及其对应的driver：</p><ol><li>Chrome：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="noopener">https://sites.google.com/a/chromium.org/chromedriver/downloads</a></li><li>Firefox：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></li><li>Edge：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/" target="_blank" rel="noopener">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></li><li>Safari：<a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/" target="_blank" rel="noopener">https://webkit.org/blog/6900/webdriver-support-in-safari-10/</a></li></ol><h2 id="安装Selenium和chromedriver："><a href="#安装Selenium和chromedriver：" class="headerlink" title="安装Selenium和chromedriver："></a>安装Selenium和chromedriver：</h2><ol><li><p>安装Selenium，Selenium有很多语言的版本，有java、ruby、python等。我们下载python版本的就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure></li><li><p>安装<code>chromedriver</code>：下载完成后，放到不需要权限的纯英文目录下就可以了。</p></li></ol><h3 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h3><p>现在以一个简单的获取百度首页的例子来讲下<code>Selenium</code>和<code>chromedriver</code>如何快速入门：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># chromedriver的绝对路径</span></span><br><span class="line">driver_path = <span class="string">r'D:\ProgramApp\chromedriver\chromedriver.exe'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一个driver，并且指定chromedriver的路径</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line">driver.get(<span class="string">"https://www.baidu.com/"</span>)</span><br><span class="line"><span class="comment"># 通过page_source获取网页源代码</span></span><br><span class="line">print(driver.page_source)</span><br></pre></td></tr></table></figure><h3 id="selenium常用操作："><a href="#selenium常用操作：" class="headerlink" title="selenium常用操作："></a>selenium常用操作：</h3><p>更多教程请参考：<a href="http://selenium-python.readthedocs.io/installation.html#introduction" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/installation.html#introduction</a></p><h4 id="关闭页面："><a href="#关闭页面：" class="headerlink" title="关闭页面："></a>关闭页面：</h4><ol><li><code>driver.close()</code>：关闭当前页面。</li><li><code>driver.quit()</code>：退出整个浏览器。</li></ol><h4 id="定位元素："><a href="#定位元素：" class="headerlink" title="定位元素："></a>定位元素：</h4><ol><li><pre><code>find_element_by_id<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">根据id来查找某个元素。等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = driver.find<span class="constructor">_element_by_id('<span class="params">su</span>')</span></span><br><span class="line"> submitTag1 = driver.find<span class="constructor">_element(By.ID,'<span class="params">su</span>')</span></span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code>find_element_by_class_name<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">根据类名查找元素。 等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = driver.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span><span class="keyword">class</span><span class="number">_n</span>ame(<span class="string">'su'</span>)</span><br><span class="line"> submitTag<span class="number">1</span> = driver.find<span class="number">_</span>element(By.CLASS<span class="number">_</span>NAME,<span class="string">'su'</span>)</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code>find_element_by_name<figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">根据<span class="built_in">name</span>属性的值来查找元素。等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = <span class="built_in">driver</span>.find_element_by_name(<span class="string">'email'</span>)</span><br><span class="line"> submitTag1 = <span class="built_in">driver</span>.find_element(By.<span class="built_in">NAME</span>,<span class="string">'email'</span>)</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code>find_element_by_tag_name<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">根据标签名来查找元素。等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = driver.find<span class="constructor">_element_by_tag_name('<span class="params">div</span>')</span></span><br><span class="line"> submitTag1 = driver.find<span class="constructor">_element(By.TAG_NAME,'<span class="params">div</span>')</span></span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code>find_element_by_xpath<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">根据xpath语法来获取元素。等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = driver.find<span class="constructor">_element_by_xpath('<span class="operator">/</span><span class="operator">/</span><span class="params">div</span>')</span></span><br><span class="line"> submitTag1 = driver.find<span class="constructor">_element(By.XPATH,'<span class="operator">/</span><span class="operator">/</span><span class="params">div</span>')</span></span><br></pre></td></tr></table></figure></code></pre></li><li><p><code>find_element_by_css_selector</code>：根据css选择器选择元素。等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">submitTag = driver.find_element_by_css_selector(<span class="string">'//div'</span>)</span><br><span class="line">submitTag1 = driver.find_element(By.CSS_SELECTOR,<span class="string">'//div'</span>)</span><br></pre></td></tr></table></figure><p>要注意，<code>find_element</code>是获取第一个满足条件的元素。<code>find_elements</code>是获取所有满足条件的元素。</p></li></ol><h4 id="操作表单元素："><a href="#操作表单元素：" class="headerlink" title="操作表单元素："></a>操作表单元素：</h4><ol><li><p>操作输入框：分为两步。第一步：找到这个元素。第二步：使用<code>send_keys(value)</code>，将数据填充进去。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputTag = driver.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">inputTag.send_keys(<span class="string">'python'</span>)</span><br></pre></td></tr></table></figure><p>使用<code>clear</code>方法可以清除输入框中的内容。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inputTag.clear()</span><br></pre></td></tr></table></figure></li><li><p>操作checkbox：因为要选中<code>checkbox</code>标签，在网页中是通过鼠标点击的。因此想要选中<code>checkbox</code>标签，那么先选中这个标签，然后执行<code>click</code>事件。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rememberTag = driver.find_element_by_name(<span class="string">"rememberMe"</span>)</span><br><span class="line">rememberTag.click()</span><br></pre></td></tr></table></figure></li><li><p>选择select：select元素不能直接点击。因为点击后还需要选中元素。这时候selenium就专门为select标签提供了一个类<code>selenium.webdriver.support.ui.Select</code>。将获取到的元素当成参数传到这个类中，创建这个对象。以后就可以使用这个对象进行选择了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"><span class="comment"># 选中这个标签，然后使用Select创建对象</span></span><br><span class="line">selectTag = Select(driver.find_element_by_name(<span class="string">"jumpMenu"</span>))</span><br><span class="line"><span class="comment"># 根据索引选择</span></span><br><span class="line">selectTag.select_by_index(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 根据值选择</span></span><br><span class="line">selectTag.select_by_value(<span class="string">"http://www.95yueba.com"</span>)</span><br><span class="line"><span class="comment"># 根据可视的文本选择</span></span><br><span class="line">selectTag.select_by_visible_text(<span class="string">"95秀客户端"</span>)</span><br><span class="line"><span class="comment"># 取消选中所有选项</span></span><br><span class="line">selectTag.deselect_all()</span><br></pre></td></tr></table></figure></li><li><p>操作按钮：操作按钮有很多种方式。比如单击、右击、双击等。这里讲一个最常用的。就是点击。直接调用<code>click</code>函数就可以了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputTag = driver.find_element_by_id(<span class="string">'su'</span>)</span><br><span class="line">inputTag.click()</span><br></pre></td></tr></table></figure></li></ol><h4 id="行为链："><a href="#行为链：" class="headerlink" title="行为链："></a>行为链：</h4><p>有时候在页面中的操作可能要有很多步，那么这时候可以使用鼠标行为链类<code>ActionChains</code>来完成。比如现在要将鼠标移动到某个元素上并执行点击事件。那么示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">inputTag = driver.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">submitTag = driver.find_element_by_id(<span class="string">'su'</span>)</span><br><span class="line"></span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line">actions.move_to_element(inputTag)</span><br><span class="line">actions.send_keys_to_element(inputTag,<span class="string">'python'</span>)</span><br><span class="line">actions.move_to_element(submitTag)</span><br><span class="line">actions.click(submitTag)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure><p>还有更多的鼠标相关的操作。</p><ul><li>click_and_hold(element)：点击但不松开鼠标。</li><li>context_click(element)：右键点击。</li><li>double_click(element)：双击。 更多方法请参考：<a href="http://selenium-python.readthedocs.io/api.html" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/api.html</a></li></ul><h4 id="Cookie操作："><a href="#Cookie操作：" class="headerlink" title="Cookie操作："></a>Cookie操作：</h4><ol><li><p>获取所有cookie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line">    print(cookie)</span><br></pre></td></tr></table></figure></li><li><p>根据cookie的key获取value：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = driver.get_cookie(key)</span><br></pre></td></tr></table></figure></li><li><p>删除所有的cookie：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.delete_all_cookies()</span><br></pre></td></tr></table></figure></li><li><p>删除某cookie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.delete_cookie(key)</span><br></pre></td></tr></table></figure></li></ol><h4 id="页面等待："><a href="#页面等待：" class="headerlink" title="页面等待："></a>页面等待：</h4><p>现在的网页越来越多采用了 Ajax 技术，这样程序便不能确定何时某个元素完全加载出来了。如果实际页面等待时间过长导致某个dom元素还没出来，但是你的代码直接使用了这个WebElement，那么就会抛出NullPointer的异常。为了解决这个问题。所以 Selenium 提供了两种等待方式：一种是隐式等待、一种是显式等待。</p><ol><li><p>隐式等待：调用<code>driver.implicitly_wait</code>。那么在获取不可用的元素之前，会先等待10秒中的时间。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line">driver.get(<span class="string">"https://www.douban.com/"</span>)</span><br></pre></td></tr></table></figure></li><li><p>显示等待：显示等待是表明某个条件成立后才执行获取元素的操作。也可以在等待的时候指定一个最大的时间，如果超过这个时间那么就抛出一个异常。显示等待应该使用<code>selenium.webdriver.support.excepted_conditions</code>期望的条件和<code>selenium.webdriver.support.ui.WebDriverWait</code>来配合完成。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line">   </span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">"http://somedomain/url_that_delays_loading"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    element = WebDriverWait(driver, <span class="number">10</span>).until(</span><br><span class="line">        EC.presence_of_element_located((By.ID, <span class="string">"myDynamicElement"</span>))</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure></li><li><p>一些其他的等待条件：</p><ul><li><p>presence_of_element_located：某个元素已经加载完毕了。</p></li><li><p>presence_of_all_emement_located：网页中所有满足条件的元素都加载完毕了。</p></li><li><p>element_to_be_cliable：某个元素是可以点击了。</p><p>更多条件请参考：<a href="http://selenium-python.readthedocs.io/waits.html" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/waits.html</a></p></li></ul></li></ol><h4 id="切换页面："><a href="#切换页面：" class="headerlink" title="切换页面："></a>切换页面：</h4><p>有时候窗口中有很多子tab页面。这时候肯定是需要进行切换的。<code>selenium</code>提供了一个叫做<code>switch_to_window</code>来进行切换，具体切换到哪个页面，可以从<code>driver.window_handles</code>中找到。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开一个新的页面</span></span><br><span class="line">self.driver.execute_script(<span class="string">"window.open('"</span>+url+<span class="string">"')"</span>)</span><br><span class="line"><span class="comment"># 切换到这个新的页面中</span></span><br><span class="line">self.driver.switch_to_window(self.driver.window_handles[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h4 id="设置代理ip："><a href="#设置代理ip：" class="headerlink" title="设置代理ip："></a>设置代理ip：</h4><p>有时候频繁爬取一些网页。服务器发现你是爬虫后会封掉你的ip地址。这时候我们可以更改代理ip。更改代理ip，不同的浏览器有不同的实现方式。这里以<code>Chrome</code>浏览器为例来讲解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">"--proxy-server=http://110.73.2.248:8123"</span>)</span><br><span class="line">driver_path = <span class="string">r"D:\ProgramApp\chromedriver\chromedriver.exe"</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path,chrome_options=options)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">'http://httpbin.org/ip'</span>)</span><br></pre></td></tr></table></figure><h4 id="WebElement元素："><a href="#WebElement元素：" class="headerlink" title="WebElement元素："></a><code>WebElement</code>元素：</h4><p><code>from selenium.webdriver.remote.webelement import WebElement</code>类是每个获取出来的元素的所属类。<br>有一些常用的属性：</p><ol><li>get_attribute：这个标签的某个属性的值。</li><li>screentshot：获取当前页面的截图。这个方法只能在<code>driver</code>上使用。<br><code>driver</code>的对象类，也是继承自<code>WebElement</code>。<br>更多请阅读相关源代码。</li></ol><h1 id="图形验证码识别技术："><a href="#图形验证码识别技术：" class="headerlink" title="图形验证码识别技术："></a>图形验证码识别技术：</h1><p>阻碍我们爬虫的。有时候正是在登录或者请求一些数据时候的图形验证码。因此这里我们讲解一种能将图片翻译成文字的技术。将图片翻译成文字一般被成为光学文字识别（Optical Character Recognition），简写为<code>OCR</code>。实现<code>OCR</code>的库不是很多，特别是开源的。因为这块存在一定的技术壁垒（需要大量的数据、算法、机器学习、深度学习知识等），并且如果做好了具有很高的商业价值。因此开源的比较少。这里介绍一个比较优秀的图像识别开源库：Tesseract。</p><h2 id="Tesseract："><a href="#Tesseract：" class="headerlink" title="Tesseract："></a>Tesseract：</h2><p>Tesseract是一个OCR库，目前由谷歌赞助。Tesseract是目前公认最优秀、最准确的开源OCR库。Tesseract具有很高的识别度，也具有很高的灵活性，他可以通过训练识别任何字体。</p><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><h4 id="Windows系统："><a href="#Windows系统：" class="headerlink" title="Windows系统："></a>Windows系统：</h4><p>在以下链接下载可执行文件，然后一顿点击下一步安装即可（放在不需要权限的纯英文路径下）：<br><a href="https://github.com/tesseract-ocr/">https://github.com/tesseract-ocr/</a></p><h4 id="Linux系统："><a href="#Linux系统：" class="headerlink" title="Linux系统："></a>Linux系统：</h4><p>可以在以下链接下载源码自行编译。<br><a href="https://github.com/tesseract-ocr/tesseract/wiki/Compiling">https://github.com/tesseract-ocr/tesseract/wiki/Compiling</a><br>或者在<code>ubuntu</code>下通过以下命令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install tesseract-ocr</span><br></pre></td></tr></table></figure><h4 id="Mac系统："><a href="#Mac系统：" class="headerlink" title="Mac系统："></a>Mac系统：</h4><p>用<code>Homebrew</code>即可方便安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tesseract</span><br></pre></td></tr></table></figure><h4 id="设置环境变量："><a href="#设置环境变量：" class="headerlink" title="设置环境变量："></a>设置环境变量：</h4><p>安装完成后，如果想要在命令行中使用<code>Tesseract</code>，那么应该设置环境变量。<code>Mac</code>和<code>Linux</code>在安装的时候就默认已经设置好了。在<code>Windows</code>下把<code>tesseract.exe</code>所在的路径添加到<code>PATH</code>环境变量中。</p><p>还有一个环境变量需要设置的是，要把训练的数据文件路径也放到环境变量中。<br>在环境变量中，添加一个<code>TESSDATA_PREFIX=C:\path_to_tesseractdata\teseractdata</code>。</p><h3 id="在命令行中使用tesseract识别图像："><a href="#在命令行中使用tesseract识别图像：" class="headerlink" title="在命令行中使用tesseract识别图像："></a>在命令行中使用tesseract识别图像：</h3><p>如果想要在<code>cmd</code>下能够使用<code>tesseract</code>命令，那么需要把<code>tesseract.exe</code>所在的目录放到<code>PATH</code>环境变量中。然后使用命令：<code>tesseract 图片路径 文件路径</code>。<br>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tesseract a.png a</span><br></pre></td></tr></table></figure><p>那么就会识别出<code>a.png</code>中的图片，并且把文字写入到<code>a.txt</code>中。如果不想写入文件直接想显示在终端，那么不要加文件名就可以了。</p><h3 id="在代码中使用tesseract识别图像："><a href="#在代码中使用tesseract识别图像：" class="headerlink" title="在代码中使用tesseract识别图像："></a>在代码中使用tesseract识别图像：</h3><p>在<code>Python</code>代码中操作<code>tesseract</code>。需要安装一个库，叫做<code>pytesseract</code>。通过<code>pip</code>的方式即可安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pytesseract</span><br></pre></td></tr></table></figure><p>并且，需要读取图片，需要借助一个第三方库叫做<code>PIL</code>。通过<code>pip list</code>看下是否安装。如果没有安装，通过<code>pip</code>的方式安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> PIL</span><br></pre></td></tr></table></figure><p>使用<code>pytesseract</code>将图片上的文字转换为文本文字的示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pytesseract库</span></span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="comment"># 导入Image库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定tesseract.exe所在的路径</span></span><br><span class="line">pytesseract.pytesseract.tesseract_cmd = <span class="string">r'D:\ProgramApp\TesseractOCR\tesseract.exe'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开图片</span></span><br><span class="line">image = Image.open(<span class="string">"a.png"</span>)</span><br><span class="line"><span class="comment"># 调用image_to_string将图片转换为文字</span></span><br><span class="line">text = pytesseract.image_to_string(image)</span><br><span class="line">print(text)</span><br></pre></td></tr></table></figure><h2 id="用pytesseract处理拉勾网图形验证码："><a href="#用pytesseract处理拉勾网图形验证码：" class="headerlink" title="用pytesseract处理拉勾网图形验证码："></a>用<code>pytesseract</code>处理拉勾网图形验证码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pytesseract.pytesseract.tesseract_cmd = <span class="string">r"D:\ProgramApp\TesseractOCR\tesseract.exe"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    captchaUrl = <span class="string">"https://passport.lagou.com/vcode/create?from=register&amp;refresh=1513081451891"</span></span><br><span class="line">    request.urlretrieve(captchaUrl,<span class="string">'captcha.png'</span>)</span><br><span class="line">    image = Image.open(<span class="string">'captcha.png'</span>)</span><br><span class="line">    text = pytesseract.image_to_string(image,lang=<span class="string">'eng'</span>)</span><br><span class="line">    print(text)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h1 id="Scrapy框架架构"><a href="#Scrapy框架架构" class="headerlink" title="Scrapy框架架构"></a>Scrapy框架架构</h1><h2 id="Scrapy框架介绍："><a href="#Scrapy框架介绍：" class="headerlink" title="Scrapy框架介绍："></a>Scrapy框架介绍：</h2><p>写一个爬虫，需要做很多的事情。比如：发送网络请求、数据解析、数据存储、反反爬虫机制（更换ip代理、设置请求头等）、异步请求等。这些工作如果每次都要自己从零开始写的话，比较浪费时间。因此<code>Scrapy</code>把一些基础的东西封装好了，在他上面写爬虫可以变的更加的高效（爬取效率和开发效率）。因此真正在公司里，一些上了量的爬虫，都是使用<code>Scrapy</code>框架来解决。</p><h2 id="Scrapy架构图："><a href="#Scrapy架构图：" class="headerlink" title="Scrapy架构图："></a>Scrapy架构图：</h2><ol><li>流程图（1）：<br><img src="../assets/scrapy_all.png" alt="img"></li><li>流程图（2）：<br><img src="../assets/884863172-5985e0b48edf9.png" alt="img"></li></ol><h2 id="Scrapy框架模块功能："><a href="#Scrapy框架模块功能：" class="headerlink" title="Scrapy框架模块功能："></a>Scrapy框架模块功能：</h2><ol><li><code>Scrapy Engine（引擎）</code>：<code>Scrapy</code>框架的核心部分。负责在<code>Spider</code>和<code>ItemPipeline</code>、<code>Downloader</code>、<code>Scheduler</code>中间通信、传递数据等。</li><li><code>Spider（爬虫）</code>：发送需要爬取的链接给引擎，最后引擎把其他模块请求回来的数据再发送给爬虫，爬虫就去解析想要的数据。这个部分是我们开发者自己写的，因为要爬取哪些链接，页面中的哪些数据是我们需要的，都是由程序员自己决定。</li><li><code>Scheduler（调度器）</code>：负责接收引擎发送过来的请求，并按照一定的方式进行排列和整理，负责调度请求的顺序等。</li><li><code>Downloader（下载器）</code>：负责接收引擎传过来的下载请求，然后去网络上下载对应的数据再交还给引擎。</li><li><code>Item Pipeline（管道）</code>：负责将<code>Spider（爬虫）</code>传递过来的数据进行保存。具体保存在哪里，应该看开发者自己的需求。</li><li><code>Downloader Middlewares（下载中间件）</code>：可以扩展下载器和引擎之间通信功能的中间件。</li><li><code>Spider Middlewares（Spider中间件）</code>：可以扩展引擎和爬虫之间通信功能的中间件。</li></ol><h1 id="Scrapy快速入门"><a href="#Scrapy快速入门" class="headerlink" title="Scrapy快速入门"></a>Scrapy快速入门</h1><h2 id="安装和文档：-1"><a href="#安装和文档：-1" class="headerlink" title="安装和文档："></a>安装和文档：</h2><ol><li>安装：通过<code>pip install scrapy</code>即可安装。</li><li>Scrapy官方文档：<a href="http://doc.scrapy.org/en/latest" target="_blank" rel="noopener">http://doc.scrapy.org/en/latest</a></li><li>Scrapy中文文档：<a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html</a></li></ol><blockquote><p>注意：</p><ol><li>在<code>ubuntu</code>上安装<code>scrapy</code>之前，需要先安装以下依赖：<br><code>sudo apt-get install python3-dev build-essential python3-pip libxml2-dev libxslt1-dev zlib1g-dev libffi-dev libssl-dev</code>，然后再通过<code>pip install scrapy</code>安装。</li><li>如果在<code>windows</code>系统下，提示这个错误<code>ModuleNotFoundError: No module named &#39;win32api&#39;</code>，那么使用以下命令可以解决：<code>pip install pypiwin32</code>。</li></ol></blockquote><h2 id="快速入门：-1"><a href="#快速入门：-1" class="headerlink" title="快速入门："></a>快速入门：</h2><h3 id="创建项目："><a href="#创建项目：" class="headerlink" title="创建项目："></a>创建项目：</h3><p>要使用<code>Scrapy</code>框架创建项目，需要通过命令来创建。首先进入到你想把这个项目存放的目录。然后使用以下命令创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject [项目名称]</span><br></pre></td></tr></table></figure><h3 id="目录结构介绍："><a href="#目录结构介绍：" class="headerlink" title="目录结构介绍："></a>目录结构介绍：</h3><p><img src="../assets/QQ%E6%88%AA%E5%9B%BE20171212213138.png" alt="img"><br>以下介绍下主要文件的作用：</p><ol><li>items.py：用来存放爬虫爬取下来数据的模型。</li><li>middlewares.py：用来存放各种中间件的文件。</li><li>pipelines.py：用来将<code>items</code>的模型存储到本地磁盘中。</li><li>settings.py：本爬虫的一些配置信息（比如请求头、多久发送一次请求、ip代理池等）。</li><li>scrapy.cfg：项目的配置文件。</li><li>spiders包：以后所有的爬虫，都是存放到这个里面。</li></ol><h3 id="使用Scrapy框架爬取糗事百科段子："><a href="#使用Scrapy框架爬取糗事百科段子：" class="headerlink" title="使用Scrapy框架爬取糗事百科段子："></a>使用Scrapy框架爬取糗事百科段子：</h3><h4 id="使用命令创建一个爬虫："><a href="#使用命令创建一个爬虫：" class="headerlink" title="使用命令创建一个爬虫："></a>使用命令创建一个爬虫：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy gensipder qsbk "qiushibaike.com"</span><br></pre></td></tr></table></figure><p>创建了一个名字叫做<code>qsbk</code>的爬虫，并且能爬取的网页只会限制在<code>qiushibaike.com</code>这个域名下。</p><h4 id="爬虫代码解析："><a href="#爬虫代码解析：" class="headerlink" title="爬虫代码解析："></a>爬虫代码解析：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'qsbk'</span></span><br><span class="line">    allowed_domains = [<span class="string">'qiushibaike.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://qiushibaike.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>其实这些代码我们完全可以自己手动去写，而不用命令。只不过是不用命令，自己写这些代码比较麻烦。<br>要创建一个Spider，那么必须自定义一个类，继承自<code>scrapy.Spider</code>，然后在这个类中定义三个属性和一个方法。</p><ol><li>name：这个爬虫的名字，名字必须是唯一的。</li><li>allow_domains：允许的域名。爬虫只会爬取这个域名下的网页，其他不是这个域名下的网页会被自动忽略。</li><li>start_urls：爬虫从这个变量中的url开始。</li><li>parse：引擎会把下载器下载回来的数据扔给爬虫解析，爬虫再把数据传给这个<code>parse</code>方法。这个是个固定的写法。这个方法的作用有两个，第一个是提取想要的数据。第二个是生成下一个请求的url。</li></ol><h4 id="修改settings-py代码："><a href="#修改settings-py代码：" class="headerlink" title="修改settings.py代码："></a>修改<code>settings.py</code>代码：</h4><p>在做一个爬虫之前，一定要记得修改<code>setttings.py</code>中的设置。两个地方是强烈建议设置的。</p><ol><li><code>ROBOTSTXT_OBEY</code>设置为False。默认是True。即遵守机器协议，那么在爬虫的时候，scrapy首先去找robots.txt文件，如果没有找到。则直接停止爬取。</li><li><code>DEFAULT_REQUEST_HEADERS</code>添加<code>User-Agent</code>。这个也是告诉服务器，我这个请求是一个正常的请求，不是一个爬虫。</li></ol><h4 id="完成的爬虫代码："><a href="#完成的爬虫代码：" class="headerlink" title="完成的爬虫代码："></a>完成的爬虫代码：</h4><ol><li><p>爬虫部分代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> abcspider.items <span class="keyword">import</span> QsbkItem</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'qsbk'</span></span><br><span class="line">    allowed_domains = [<span class="string">'qiushibaike.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'https://www.qiushibaike.com/text/'</span>]</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        outerbox = response.xpath(<span class="string">"//div[@id='content-left']/div"</span>)</span><br><span class="line">        items = []</span><br><span class="line">        <span class="keyword">for</span> box <span class="keyword">in</span> outerbox:</span><br><span class="line">            author = box.xpath(<span class="string">".//div[contains(@class,'author')]//h2/text()"</span>).extract_first().strip()</span><br><span class="line">            content = box.xpath(<span class="string">".//div[@class='content']/span/text()"</span>).extract_first().strip()</span><br><span class="line">            item = QsbkItem()</span><br><span class="line">            item[<span class="string">"author"</span>] = author</span><br><span class="line">            item[<span class="string">"content"</span>] = content</span><br><span class="line">            items.append(item)</span><br><span class="line">        <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure></li><li><p>items.py部分代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br></pre></td></tr></table></figure></li><li><p>pipeline部分代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbcspiderPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">   </span><br><span class="line">        self.items = []</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.items.append(dict(item))</span><br><span class="line">        print(<span class="string">"="</span>*<span class="number">40</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self,spider)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'qsbk.json'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            json.dump(self.items,fp,ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="运行scrapy项目："><a href="#运行scrapy项目：" class="headerlink" title="运行scrapy项目："></a>运行scrapy项目：</h4><p>运行scrapy项目。需要在终端，进入项目所在的路径，然后<code>scrapy crawl [爬虫名字]</code>即可运行指定的爬虫。如果不想每次都在命令行中运行，那么可以把这个命令写在一个文件中。以后就在pycharm中执行运行这个文件就可以了。比如现在新创建一个文件叫做<code>start.py</code>，然后在这个文件中填入以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line">cmdline.execute(<span class="string">"scrapy crawl qsbk"</span>.split())</span><br></pre></td></tr></table></figure><h1 id="CrawlSpider"><a href="#CrawlSpider" class="headerlink" title="CrawlSpider"></a>CrawlSpider</h1><p>在上一个糗事百科的爬虫案例中。我们是自己在解析完整个页面后获取下一页的url，然后重新发送一个请求。有时候我们想要这样做，只要满足某个条件的url，都给我进行爬取。那么这时候我们就可以通过<code>CrawlSpider</code>来帮我们完成了。<code>CrawlSpider</code>继承自<code>Spider</code>，只不过是在之前的基础之上增加了新的功能，可以定义爬取的url的规则，以后scrapy碰到满足条件的url都进行爬取，而不用手动的<code>yield Request</code>。</p><h2 id="CrawlSpider爬虫："><a href="#CrawlSpider爬虫：" class="headerlink" title="CrawlSpider爬虫："></a>CrawlSpider爬虫：</h2><h3 id="创建CrawlSpider爬虫："><a href="#创建CrawlSpider爬虫：" class="headerlink" title="创建CrawlSpider爬虫："></a>创建CrawlSpider爬虫：</h3><p>之前创建爬虫的方式是通过<code>scrapy genspider [爬虫名字] [域名]</code>的方式创建的。如果想要创建<code>CrawlSpider</code>爬虫，那么应该通过以下命令创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider -c crawl [爬虫名字] [域名]</span><br></pre></td></tr></table></figure><h3 id="LinkExtractors链接提取器："><a href="#LinkExtractors链接提取器：" class="headerlink" title="LinkExtractors链接提取器："></a>LinkExtractors链接提取器：</h3><p>使用<code>LinkExtractors</code>可以不用程序员自己提取想要的url，然后发送请求。这些工作都可以交给<code>LinkExtractors</code>，他会在所有爬的页面中找到满足规则的<code>url</code>，实现自动的爬取。以下对<code>LinkExtractors</code>类做一个简单的介绍：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">linkextractors</span>.<span class="title">LinkExtractor</span><span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">    allow = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    deny = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    allow_domains = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    deny_domains = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    deny_extensions = None,</span></span></span><br><span class="line"><span class="class"><span class="params">    restrict_xpaths = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    tags = <span class="params">(<span class="string">'a'</span>,<span class="string">'area'</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    attrs = <span class="params">(<span class="string">'href'</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    canonicalize = True,</span></span></span><br><span class="line"><span class="class"><span class="params">    unique = True,</span></span></span><br><span class="line"><span class="class"><span class="params">    process_value = None</span></span></span><br><span class="line"><span class="class"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><p>主要参数讲解：</p><ul><li>allow：允许的url。所有满足这个正则表达式的url都会被提取。</li><li>deny：禁止的url。所有满足这个正则表达式的url都不会被提取。</li><li>allow_domains：允许的域名。只有在这个里面指定的域名的url才会被提取。</li><li>deny_domains：禁止的域名。所有在这个里面指定的域名的url都不会被提取。</li><li>restrict_xpaths：严格的xpath。和allow共同过滤链接。</li></ul><h3 id="Rule规则类："><a href="#Rule规则类：" class="headerlink" title="Rule规则类："></a>Rule规则类：</h3><p>定义爬虫的规则类。以下对这个类做一个简单的介绍：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">spiders</span>.<span class="title">Rule</span><span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">    link_extractor, </span></span></span><br><span class="line"><span class="class"><span class="params">    callback = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    cb_kwargs = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    follow = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    process_links = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    process_request = None</span></span></span><br><span class="line"><span class="class"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><p>主要参数讲解：</p><ul><li>link_extractor：一个<code>LinkExtractor</code>对象，用于定义爬取规则。</li><li>callback：满足这个规则的url，应该要执行哪个回调函数。因为<code>CrawlSpider</code>使用了<code>parse</code>作为回调函数，因此不要覆盖<code>parse</code>作为回调函数自己的回调函数。</li><li>follow：指定根据该规则从response中提取的链接是否需要跟进。</li><li>process_links：从link_extractor中获取到链接后会传递给这个函数，用来过滤不需要爬取的链接。</li></ul><h1 id="Scrapy-Shell"><a href="#Scrapy-Shell" class="headerlink" title="Scrapy Shell"></a>Scrapy Shell</h1><p>我们想要在爬虫中使用xpath、beautifulsoup、正则表达式、css选择器等来提取想要的数据。但是因为<code>scrapy</code>是一个比较重的框架。每次运行起来都要等待一段时间。因此要去验证我们写的提取规则是否正确，是一个比较麻烦的事情。因此<code>Scrapy</code>提供了一个shell，用来方便的测试规则。当然也不仅仅局限于这一个功能。</p><h2 id="打开Scrapy-Shell："><a href="#打开Scrapy-Shell：" class="headerlink" title="打开Scrapy Shell："></a>打开Scrapy Shell：</h2><p>打开cmd终端，进入到<code>Scrapy</code>项目所在的目录，然后进入到<code>scrapy</code>框架所在的虚拟环境中，输入命令<code>scrapy shell [链接]</code>。就会进入到scrapy的shell环境中。在这个环境中，你可以跟在爬虫的<code>parse</code>方法中一样使用了。 </p><h1 id="redis教程："><a href="#redis教程：" class="headerlink" title="redis教程："></a>redis教程：</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>redis</code>是一种支持分布式的<code>nosql</code>数据库,他的数据是保存在内存中，同时<code>redis</code>可以定时把内存数据同步到磁盘，即可以将数据持久化，并且他比<code>memcached</code>支持更多的数据结构(<code>string</code>,<code>list列表[队列和栈]</code>,<code>set[集合]</code>,<code>sorted set[有序集合]</code>,<code>hash(hash表)</code>)。相关参考文档：<a href="http://redisdoc.com/index.html" target="_blank" rel="noopener">http://redisdoc.com/index.html</a></p><h2 id="redis使用场景："><a href="#redis使用场景：" class="headerlink" title="redis使用场景："></a>redis使用场景：</h2><ol><li>登录会话存储：存储在<code>redis</code>中，与<code>memcached</code>相比，数据不会丢失。</li><li>排行版/计数器：比如一些秀场类的项目，经常会有一些前多少名的主播排名。还有一些文章阅读量的技术，或者新浪微博的点赞数等。</li><li>作为消息队列：比如<code>celery</code>就是使用<code>redis</code>作为中间人。</li><li>当前在线人数：还是之前的秀场例子，会显示当前系统有多少在线人数。</li><li>一些常用的数据缓存：比如我们的<code>BBS</code>论坛，板块不会经常变化的，但是每次访问首页都要从<code>mysql</code>中获取，可以在<code>redis</code>中缓存起来，不用每次请求数据库。</li><li>把前200篇文章缓存或者评论缓存：一般用户浏览网站，只会浏览前面一部分文章或者评论，那么可以把前面200篇文章和对应的评论缓存起来。用户访问超过的，就访问数据库，并且以后文章超过200篇，则把之前的文章删除。</li><li>好友关系：微博的好友关系使用<code>redis</code>实现。</li><li>发布和订阅功能：可以用来做聊天软件。</li></ol><h2 id="redis和memcached的比较："><a href="#redis和memcached的比较：" class="headerlink" title="redis和memcached的比较："></a><code>redis</code>和<code>memcached</code>的比较：</h2><table><thead><tr><th></th><th>memcached</th><th>redis</th></tr></thead><tbody><tr><td>类型</td><td>纯内存数据库</td><td>内存磁盘同步数据库</td></tr><tr><td>数据类型</td><td>在定义value时就要固定数据类型</td><td>不需要</td></tr><tr><td>虚拟内存</td><td>不支持</td><td>支持</td></tr><tr><td>过期策略</td><td>支持</td><td>支持</td></tr><tr><td>存储数据安全</td><td>不支持</td><td>可以将数据同步到dump.db中</td></tr><tr><td>灾难恢复</td><td>不支持</td><td>可以将磁盘中的数据恢复到内存中</td></tr><tr><td>分布式</td><td>支持</td><td>主从同步</td></tr><tr><td>订阅与发布</td><td>不支持</td><td>支持</td></tr></tbody></table><h2 id="redis在ubuntu系统中的安装与启动"><a href="#redis在ubuntu系统中的安装与启动" class="headerlink" title="redis在ubuntu系统中的安装与启动"></a><code>redis</code>在<code>ubuntu</code>系统中的安装与启动</h2><ol><li><p>安装：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install redis-<span class="keyword">server</span></span><br></pre></td></tr></table></figure></li><li><p>卸载：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> purge --auto-<span class="builtin-name">remove</span> redis-server</span><br></pre></td></tr></table></figure></li><li><p>启动：<code>redis</code>安装后，默认会自动启动，可以通过以下命令查看：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> aux|<span class="keyword">grep</span> redis</span><br></pre></td></tr></table></figure><p>如果想自己手动启动，可以通过以下命令进行启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>redis-server start</span><br></pre></td></tr></table></figure></li><li><p>停止：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>redis-server stop</span><br></pre></td></tr></table></figure></li></ol><h2 id="redis在windows系统中的安装与启动："><a href="#redis在windows系统中的安装与启动：" class="headerlink" title="redis在windows系统中的安装与启动："></a>redis在windows系统中的安装与启动：</h2><ol><li>下载：redis官方是不支持windows操作系统的。但是微软的开源部门将redis移植到了windows上。因此下载地址不是在redis官网上。而是在github上：<a href="https://github.com/MicrosoftArchive/redis/releases。">https://github.com/MicrosoftArchive/redis/releases。</a></li><li>安装：点击一顿下一步安装就可以了。</li><li>运行：进入到<code>redis</code>安装所在的路径然后执行<code>redis-server.exe redis.windows.conf</code>就可以运行了。</li><li>连接：<code>redis</code>和<code>mysql</code>以及<code>mongo</code>是一样的，都提供了一个客户端进行连接。输入命令<code>redis-cli</code>（前提是redis安装路径已经加入到环境变量中了）就可以连接到<code>redis</code>服务器了。</li></ol><h2 id="其他机器访问本机redis服务器："><a href="#其他机器访问本机redis服务器：" class="headerlink" title="其他机器访问本机redis服务器："></a>其他机器访问本机redis服务器：</h2><p>想要让其他机器访问本机的redis服务器。那么要修改redis.conf的配置文件，将bind改成<code>bind [自己的ip地址或者0.0.0.0]</code>，其他机器才能访问。<br><strong>注意：bind绑定的是本机网卡的ip地址，而不是想让其他机器连接的ip地址。如果有多块网卡，那么可以绑定多个网卡的ip地址。如果绑定到额是0.0.0.0，那么意味着其他机器可以通过本机所有的ip地址进行访问。</strong></p><h2 id="对redis的操作"><a href="#对redis的操作" class="headerlink" title="对redis的操作"></a>对<code>redis</code>的操作</h2><p>对<code>redis</code>的操作可以用两种方式，第一种方式采用<code>redis-cli</code>，第二种方式采用编程语言，比如<code>Python</code>、<code>PHP</code>和<code>JAVA</code>等。</p><ol><li><p>使用<code>redis-cli</code>对<code>redis</code>进行字符串操作：</p></li><li><p>启动<code>redis</code>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>redis-server start</span><br></pre></td></tr></table></figure></li><li><p>连接上</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">redis-cli</span> <span class="selector-tag">-h</span> <span class="selector-attr">[ip]</span> <span class="selector-tag">-p</span> <span class="selector-attr">[端口]</span></span><br></pre></td></tr></table></figure></li><li><p>添加：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> key <span class="comment">value</span></span><br><span class="line">如：</span><br><span class="line"><span class="keyword">set</span> <span class="comment">username xiaotuo</span></span><br></pre></td></tr></table></figure><p>将字符串值<code>value</code>关联到<code>key</code>。如果<code>key</code>已经持有其他值，<code>set</code>命令就覆写旧值，无视其类型。并且默认的过期时间是永久，即永远不会过期。</p></li><li><p>删除：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">del</span> <span class="built_in">key</span></span><br><span class="line">如：</span><br><span class="line"><span class="built_in">del</span> username</span><br></pre></td></tr></table></figure></li><li><p>设置过期时间：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">expire</span> <span class="variable">key</span> <span class="function"><span class="title">timeout</span>(单位为秒)</span></span><br></pre></td></tr></table></figure><p>也可以在设置值的时候，一同指定过期时间：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">key</span> <span class="keyword">value</span> EX <span class="keyword">timeout</span></span><br><span class="line">或：</span><br><span class="line">setex <span class="keyword">key</span> <span class="keyword">timeout</span> <span class="keyword">value</span></span><br></pre></td></tr></table></figure></li><li><p>查看过期时间：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ttl</span> <span class="string">key</span></span><br><span class="line"><span class="attr">如：</span></span><br><span class="line"><span class="attr">ttl</span> <span class="string">username</span></span><br></pre></td></tr></table></figure></li><li><p>查看当前<code>redis</code>中的所有<code>key</code>：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">keys</span> *</span><br></pre></td></tr></table></figure></li><li><p>列表操作：</p><ul><li><p>在列表左边添加元素：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpush <span class="built_in">key</span> <span class="built_in">value</span></span><br></pre></td></tr></table></figure><p>将值<code>value</code>插入到列表<code>key</code>的表头。如果<code>key</code>不存在，一个空列表会被创建并执行<code>lpush</code>操作。当<code>key</code>存在但不是列表类型时，将返回一个错误。</p></li><li><p>在列表右边添加元素：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpush <span class="built_in">key</span> <span class="built_in">value</span></span><br></pre></td></tr></table></figure><p>将值value插入到列表key的表尾。如果key不存在，一个空列表会被创建并执行RPUSH操作。当key存在但不是列表类型时，返回一个错误。</p></li><li><p>查看列表中的元素：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lrange</span> key start stop</span><br></pre></td></tr></table></figure><p>返回列表<code>key</code>中指定区间内的元素，区间以偏移量<code>start</code>和<code>stop</code>指定,如果要左边的第一个到最后的一个<code>lrange key 0 -1</code>。</p></li><li><p>移除列表中的元素：</p><ul><li><p>移除并返回列表</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">key</span></span><br></pre></td></tr></table></figure><p>的头元素：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lpop key</span></span><br></pre></td></tr></table></figure></li><li><p>移除并返回列表的尾元素：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rpop key</span></span><br></pre></td></tr></table></figure></li><li><p>移除并返回列表<code>key</code>的中间元素：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrem <span class="built_in">key</span> <span class="built_in">count</span> <span class="built_in">value</span></span><br></pre></td></tr></table></figure><p>将删除<code>key</code>这个列表中，<code>count</code>个值为<code>value</code>的元素。</p></li></ul></li><li><p>指定返回第几个元素：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lindex</span> key index</span><br></pre></td></tr></table></figure><p>将返回<code>key</code>这个列表中，索引为<code>index</code>的这个元素。</p></li><li><p>获取列表中的元素个数：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">llen </span>key</span><br><span class="line">如：</span><br><span class="line"><span class="keyword">llen </span>languages</span><br></pre></td></tr></table></figure></li><li><p>删除指定的元素：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lrem <span class="built_in">key</span> <span class="built_in">count</span> <span class="built_in">value</span></span><br><span class="line">如：</span><br><span class="line">lrem languages <span class="number">0</span> php</span><br></pre></td></tr></table></figure><p>根据参数 count 的值，移除列表中与参数 value 相等的元素。<code>count</code>的值可以是以下几种：</p><ul><li>count &gt; 0：从表头开始向表尾搜索，移除与<code>value</code>相等的元素，数量为<code>count</code>。</li><li>count &lt; 0：从表尾开始向表头搜索，移除与 <code>value</code>相等的元素，数量为<code>count</code>的绝对值。</li><li>count = 0：移除表中所有与<code>value</code> 相等的值。</li></ul></li></ul></li><li><p><code>set</code>集合的操作：</p><ul><li><p>添加元素：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">sadd</span></span> <span class="keyword">set</span> value1 <span class="comment">value2....</span></span><br><span class="line">如：</span><br><span class="line">sadd <span class="comment">team xiaotuo datuo</span></span><br></pre></td></tr></table></figure></li><li><p>查看元素：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">smembers <span class="keyword">set</span></span><br><span class="line">如：</span><br><span class="line">smembers <span class="comment">team</span></span><br></pre></td></tr></table></figure></li><li><p>移除元素：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">srem</span></span> <span class="keyword">set</span> member...</span><br><span class="line">如：</span><br><span class="line">srem <span class="comment">team xiaotuo datuo</span></span><br></pre></td></tr></table></figure></li><li><p>查看集合中的元素个数：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scard <span class="keyword">set</span></span><br><span class="line">如：</span><br><span class="line">scard <span class="comment">team1</span></span><br></pre></td></tr></table></figure></li><li><p>获取多个集合的交集：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sinter <span class="keyword">set</span>1 <span class="keyword">set</span>2</span><br><span class="line">如：</span><br><span class="line">sinter team1 team2</span><br></pre></td></tr></table></figure></li><li><p>获取多个集合的并集：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sunion <span class="keyword">set</span>1 <span class="keyword">set</span>2</span><br><span class="line">如：</span><br><span class="line">sunion team1 team2</span><br></pre></td></tr></table></figure></li><li><p>获取多个集合的差集：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sdiff set<span class="number">1</span> set<span class="number">2</span></span><br><span class="line">如：</span><br><span class="line">sdiff tea<span class="name">m1</span> tea<span class="name">m2</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>hash</code>哈希操作：</p><ul><li><p>添加一个新值：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">hset</span> key <span class="meta">field</span> value</span><br><span class="line">如：</span><br><span class="line"><span class="symbol">hset</span> website <span class="keyword">baidu </span><span class="keyword">baidu.com</span></span><br></pre></td></tr></table></figure><p>将哈希表<code>key</code>中的域<code>field</code>的值设为<code>value</code>。<br>如果<code>key</code>不存在，一个新的哈希表被创建并进行 <code>HSET</code>操作。如果域 <code>field</code>已经存在于哈希表中，旧值将被覆盖。</p></li><li><p>获取哈希中的<code>field</code>对应的值：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hget</span> <span class="string">key field</span></span><br><span class="line"><span class="attr">如：</span></span><br><span class="line"><span class="attr">hget</span> <span class="string">website baidu</span></span><br></pre></td></tr></table></figure></li><li><p>删除<code>field</code>中的某个<code>field</code>：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hdel</span> <span class="built_in">key</span> field</span><br><span class="line">如：</span><br><span class="line"><span class="built_in">hdel</span> website baidu</span><br></pre></td></tr></table></figure></li><li><p>获取某个哈希中所有的<code>field</code>和<code>value</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hgetall</span> <span class="string">key</span></span><br><span class="line"><span class="attr">如：</span></span><br><span class="line"><span class="attr">hgetall</span> <span class="string">website</span></span><br></pre></td></tr></table></figure></li><li><p>获取某个哈希中所有的<code>field</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hkeys</span> <span class="string">key</span></span><br><span class="line"><span class="attr">如：</span></span><br><span class="line"><span class="attr">hkeys</span> <span class="string">website</span></span><br></pre></td></tr></table></figure></li><li><p>获取某个哈希中所有的值：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hvals</span> <span class="string">key</span></span><br><span class="line"><span class="attr">如：</span></span><br><span class="line"><span class="attr">hvals</span> <span class="string">website</span></span><br></pre></td></tr></table></figure></li><li><p>判断哈希中是否存在某个<code>field</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexists</span> <span class="string">key field</span></span><br><span class="line"><span class="attr">如：</span></span><br><span class="line"><span class="attr">hexists</span> <span class="string">website baidu</span></span><br></pre></td></tr></table></figure></li><li><p>获取哈希中总共的键值对：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hlen</span> <span class="string">field</span></span><br><span class="line"><span class="attr">如：</span></span><br><span class="line"><span class="attr">hlen</span> <span class="string">website</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>事务操作：Redis事务可以一次执行多个命令，事务具有以下特征：</p><ul><li><p>隔离操作：事务中的所有命令都会序列化、按顺序地执行，不会被其他命令打扰。</p></li><li><p>原子操作：事务中的命令要么全部被执行，要么全部都不执行。</p></li><li><p>开启一个事务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">multi</span></span><br></pre></td></tr></table></figure><p>以后执行的所有命令，都在这个事务中执行的。</p></li><li><p>执行事务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span></span><br></pre></td></tr></table></figure><p>会将在<code>multi</code>和<code>exec</code>中的操作一并提交。</p></li><li><p>取消事务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">discard</span></span><br></pre></td></tr></table></figure><p>会将<code>multi</code>后的所有命令取消。</p></li><li><p>监视一个或者多个<code>key</code>：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">watch</span></span> key...</span><br></pre></td></tr></table></figure><p>监视一个(或多个)key，如果在事务执行之前这个(或这些) key被其他命令所改动，那么事务将被打断。</p></li><li><p>取消所有<code>key</code>的监视：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">unwatch</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>发布/订阅操作：</p><ul><li><p>给某个频道发布消息：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publish channel <span class="keyword">message</span></span><br></pre></td></tr></table></figure></li><li><p>订阅某个频道的消息：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">subscribe </span>channel</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="Scrapy-Redis分布式爬虫组件"><a href="#Scrapy-Redis分布式爬虫组件" class="headerlink" title="Scrapy-Redis分布式爬虫组件"></a>Scrapy-Redis分布式爬虫组件</h1><p><code>Scrapy</code>是一个框架，他本身是不支持分布式的。如果我们想要做分布式的爬虫，就需要借助一个组件叫做<code>Scrapy-Redis</code>，这个组件正是利用了<code>Redis</code>可以分布式的功能，集成到<code>Scrapy</code>框架中，使得爬虫可以进行分布式。可以充分的利用资源（多个ip、更多带宽、同步爬取）来提高爬虫的爬行效率。</p><h2 id="分布式爬虫的优点："><a href="#分布式爬虫的优点：" class="headerlink" title="分布式爬虫的优点："></a>分布式爬虫的优点：</h2><ol><li>可以充分利用多台机器的带宽。</li><li>可以充分利用多台机器的ip地址。</li><li>多台机器做，爬取效率更高。</li></ol><h2 id="分布式爬虫必须要解决的问题："><a href="#分布式爬虫必须要解决的问题：" class="headerlink" title="分布式爬虫必须要解决的问题："></a>分布式爬虫必须要解决的问题：</h2><ol><li>分布式爬虫是好几台机器在同时运行，如何保证不同的机器爬取页面的时候不会出现重复爬取的问题。</li><li>同样，分布式爬虫在不同的机器上运行，在把数据爬完后如何保证保存在同一个地方。</li></ol><h2 id="安装：-1"><a href="#安装：-1" class="headerlink" title="安装："></a>安装：</h2><p>通过<code>pip install scrapy-redis</code>即可安装。</p><h2 id="Scrapy-Redis架构："><a href="#Scrapy-Redis架构：" class="headerlink" title="Scrapy-Redis架构："></a>Scrapy-Redis架构：</h2><p>Scrapy架构图：<br><img src="../assets/scrapy_all.png" alt="img"></p><p>Scrapy-Redis架构图：<br><img src="../assets/scrapy-redis.png" alt="img"></p><p>分布式爬虫架构图：<br><img src="../assets/fenbushi.png" alt="img"></p><p>以上两个图片对比我们可以发现。<code>Item Pipeline</code>在接收到数据后发送给了<code>Redis</code>、<code>Scheduler</code>调度器调度数据也是从<code>Redis</code>中来的、并且其实数据去重也是在<code>Redis</code>中做的。</p><h2 id="编写Scrapy-Redis分布式爬虫："><a href="#编写Scrapy-Redis分布式爬虫：" class="headerlink" title="编写Scrapy-Redis分布式爬虫："></a>编写Scrapy-Redis分布式爬虫：</h2><p>要将一个<code>Scrapy</code>项目变成一个<code>Scrapy-redis</code>项目只需修改以下三点就可以了：</p><ol><li>将爬虫的类从<code>scrapy.Spider</code>变成<code>scrapy_redis.spiders.RedisSpider</code>；或者是从<code>scrapy.CrawlSpider</code>变成<code>scrapy_redis.spiders.RedisCrawlSpider</code>。</li><li>将爬虫中的<code>start_urls</code>删掉。增加一个<code>redis_key=&quot;xxx&quot;</code>。这个<code>redis_key</code>是为了以后在<code>redis</code>中控制爬虫启动的。爬虫的第一个url，就是在redis中通过这个发送出去的。</li><li>在配置文件中增加如下配置：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Scrapy-Redis相关配置</span></span><br><span class="line"><span class="comment"># 确保request存储到redis中</span></span><br><span class="line">SCHEDULER = <span class="string">"scrapy_redis.scheduler.Scheduler"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保所有爬虫共享相同的去重指纹</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">"scrapy_redis.dupefilter.RFPDupeFilter"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置redis为item pipeline</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'scrapy_redis.pipelines.RedisPipeline'</span>: <span class="number">300</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在redis中保持scrapy-redis用到的队列，不会清理redis中的队列，从而可以实现暂停和恢复的功能。</span></span><br><span class="line">SCHEDULER_PERSIST = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置连接redis信息</span></span><br><span class="line">REDIS_HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br></pre></td></tr></table></figure><ol><li>运行爬虫：<ol><li>在爬虫服务器上。进入爬虫文件所在的路径，然后输入命令：<code>scrapy runspider [爬虫名字]</code>。</li><li>在<code>Redis</code>服务器上，推入一个开始的url链接：<code>redis-cli&gt; lpush [redis_key] start_url</code>开始爬取。</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;网络爬虫&quot;&gt;&lt;a href=&quot;#网络爬虫&quot; class=&quot;headerlink&quot; title=&quot;网络爬虫&quot;&gt;&lt;/a&gt;网络爬虫&lt;/h1&gt;&lt;h1 id=&quot;什么是网络爬虫：&quot;&gt;&lt;a href=&quot;#什么是网络爬虫：&quot; class=&quot;headerlink&quot; title=&quot;什么是网络爬虫：&quot;&gt;&lt;/a&gt;什么是网络爬虫：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;通俗理解：爬虫是一个模拟人类请求网站行为的程序。可以自动请求网页、并数据抓取下来，然后使用一定的规则提取有价值的数据。&lt;/li&gt;
&lt;li&gt;专业介绍：&lt;a href=&quot;https://baike.baidu.com/item/网络爬虫/5162711?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度百科&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/Python/"/>
    
      <category term="网络爬虫" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python数据分析三剑客之Pandas</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/06/02/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8BPandas/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/06/02/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8BPandas/</id>
    <published>2020-06-02T08:30:06.000Z</published>
    <updated>2020-06-07T01:45:26.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要介绍pandas的一维对象Series与二维对象Dataframe的一些常用操作。</p><a id="more"></a><h1 id="pandas介绍"><a href="#pandas介绍" class="headerlink" title="pandas介绍"></a>pandas介绍</h1><p>pandas 是基于<a href="https://baike.baidu.com/item/NumPy/5678437" target="_blank" rel="noopener">NumPy</a> 的一种工具，该工具是为了解决数据分析任务而创建的。Pandas 纳入了大量库和一些标准的<a href="https://baike.baidu.com/item/数据模型/1305623" target="_blank" rel="noopener">数据模型</a>，提供了高效地操作大型数据集所需的工具。pandas提供了大量能使我们快速便捷地处理数据的函数和方法。你很快就会发现，它是使Python成为强大而高效的数据分析环境的重要因素之一。</p><h1 id="pandas常用数据类型"><a href="#pandas常用数据类型" class="headerlink" title="pandas常用数据类型"></a>pandas常用数据类型</h1><ol><li>Series，带标签的一位数组</li><li>DatatimeIndex，时间序列</li><li>Dataframe，带标签且大小可变的二维表格结构。</li><li>Panel，带标签且大小可变的三维数组。</li></ol><p>这里只介绍一维与二维结构。</p><h1 id="一维数组与常用操作"><a href="#一维数组与常用操作" class="headerlink" title="一维数组与常用操作"></a>一维数组与常用操作</h1><ul><li>Series，由索引和值两部分组成，是一个类似于字典的结构。</li><li>其中值的类型可以不同，如果没有索引会自动从0开始的非负整数作为索引。</li></ul><h2 id="创建Series对象"><a href="#创建Series对象" class="headerlink" title="创建Series对象"></a>创建Series对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#自动创建从0开始的非负整数索引</span></span><br><span class="line">s1=pd.Series(range(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>))</span><br><span class="line">s1</span><br><span class="line">Out[<span class="number">21</span>]: </span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    <span class="number">5</span></span><br><span class="line"><span class="number">3</span>    <span class="number">7</span></span><br><span class="line"><span class="number">4</span>    <span class="number">9</span></span><br><span class="line">dtype: int64</span><br><span class="line">    </span><br><span class="line"><span class="comment">#使用字典创建，字典的键作为索引</span></span><br><span class="line">s2=pd.Series(&#123;<span class="string">'语文'</span>:<span class="number">90</span>,<span class="string">'数学'</span>:<span class="number">88</span>,<span class="string">'英语'</span>:<span class="number">89</span>&#125;)</span><br><span class="line"></span><br><span class="line">s2</span><br><span class="line">Out[<span class="number">23</span>]: </span><br><span class="line">语文    <span class="number">90</span></span><br><span class="line">数学    <span class="number">88</span></span><br><span class="line">英语    <span class="number">89</span></span><br><span class="line">dtype: int64</span><br><span class="line">s2.values</span><br><span class="line">Out[<span class="number">24</span>]: array([<span class="number">90</span>, <span class="number">88</span>, <span class="number">89</span>], dtype=int64)</span><br><span class="line"></span><br><span class="line">s2.index</span><br><span class="line">Out[<span class="number">25</span>]: Index([<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>], dtype=<span class="string">'object'</span>)    </span><br><span class="line"><span class="comment">#根据列表创建Series，index用来自定义索引</span></span><br><span class="line">s3=pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">s3</span><br><span class="line">Out[<span class="number">29</span>]: </span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h2 id="修改值"><a href="#修改值" class="headerlink" title="修改值"></a>修改值</h2><ul><li>可以根据索引修改</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s3=pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">s3[<span class="number">0</span>]=<span class="number">10</span>或s3[<span class="string">'a'</span>]=<span class="number">10</span></span><br></pre></td></tr></table></figure><ul><li>注意series的索引可以重复，如果索引重复并且相邻，就会出现问题。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">s3=pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">s3[<span class="string">'a'</span>]</span><br><span class="line">Out[<span class="number">39</span>]: </span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">a    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="comment">#注意这时候如果用下标，则会出现问题    </span></span><br><span class="line"> s3[<span class="number">0</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line">  File <span class="string">"&lt;ipython-input-40-e48481fcb92e&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    s3[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  File <span class="string">"E:\Anaconda\lib\site-packages\pandas\core\series.py"</span>, line <span class="number">1068</span>, <span class="keyword">in</span> __getitem__</span><br><span class="line">    result = self.index.get_value(self, key)</span><br><span class="line"></span><br><span class="line">  File <span class="string">"E:\Anaconda\lib\site-packages\pandas\core\indexes\base.py"</span>, line <span class="number">4750</span>, <span class="keyword">in</span> get_value</span><br><span class="line">    <span class="keyword">raise</span> IndexError(key)</span><br><span class="line"></span><br><span class="line">IndexError: <span class="number">0</span></span><br><span class="line"><span class="comment">#这时候可以这样取值</span></span><br><span class="line"></span><br><span class="line">s3[[<span class="number">0</span>]]</span><br><span class="line">Out[<span class="number">41</span>]: </span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">s3[[<span class="number">1</span>]]</span><br><span class="line">Out[<span class="number">42</span>]: </span><br><span class="line">a    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">s3[[<span class="number">3</span>]]</span><br><span class="line">Out[<span class="number">43</span>]: </span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>Serious的操作也是元素级别的，不需要循环就可以对整体进行操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">s1=pd.Series([<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">-8</span>,<span class="number">-4</span>,<span class="number">-65</span>])</span><br><span class="line">s1</span><br><span class="line">Out[<span class="number">47</span>]: </span><br><span class="line"><span class="number">0</span>     <span class="number">1</span></span><br><span class="line"><span class="number">1</span>     <span class="number">5</span></span><br><span class="line"><span class="number">2</span>     <span class="number">8</span></span><br><span class="line"><span class="number">3</span>     <span class="number">6</span></span><br><span class="line"><span class="number">4</span>    <span class="number">-8</span></span><br><span class="line"><span class="number">5</span>    <span class="number">-4</span></span><br><span class="line"><span class="number">6</span>   <span class="number">-65</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><ul><li><code>abs(s1)</code>  #求绝对值</li><li>s1+5  #所有元素+5</li><li>s1.add_suffix(‘_name’) #每行索引后加上’__name’</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Out[<span class="number">49</span>]: </span><br><span class="line"><span class="number">0</span>_name     <span class="number">1</span></span><br><span class="line"><span class="number">1</span>_name     <span class="number">5</span></span><br><span class="line"><span class="number">2</span>_name     <span class="number">8</span></span><br><span class="line"><span class="number">3</span>_name     <span class="number">6</span></span><br><span class="line"><span class="number">4</span>_name    <span class="number">-8</span></span><br><span class="line"><span class="number">5</span>_name    <span class="number">-4</span></span><br><span class="line"><span class="number">6</span>_name   <span class="number">-65</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><ul><li>s2.argmax()   #最大值索引</li><li>s2[s2&gt;90]  #筛选大于90以上的数据</li></ul><p>还有很多很多操作，这里仅仅是几个例子。</p><h1 id="时间序列与常用操作"><a href="#时间序列与常用操作" class="headerlink" title="时间序列与常用操作."></a>时间序列与常用操作.</h1><p>时间序列对象用pandas的date_range()函数生成</p><ul><li>格式：<code>data_range(start=None,end=None,periods=None,freq=&#39;D&#39;,tz=None,normalize=False,name=None,closed=None,**kwargs)</code><ul><li>start和end分别用来指定起止日期时间。</li><li>periods用来指定要生成的数据数量。</li><li>freq用来指定时间间隔，默认为D，表示天，W表示周，H表示小时，M表示月末最后一天，MS表示月初第一天，T表示分钟，Y表示年末最后一天，YS表示年初第一天。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data=pd.date_range(start=<span class="string">'20190601'</span>,end=<span class="string">'20190630'</span>,freq=<span class="string">'5D'</span>)</span><br><span class="line">data</span><br><span class="line">Out[<span class="number">2</span>]: </span><br><span class="line">DatetimeIndex([<span class="string">'2019-06-01'</span>, <span class="string">'2019-06-06'</span>, <span class="string">'2019-06-11'</span>, <span class="string">'2019-06-16'</span>,</span><br><span class="line">               <span class="string">'2019-06-21'</span>, <span class="string">'2019-06-26'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'5D'</span>)</span><br><span class="line">data=pd.date_range(start=<span class="string">'20190601'</span>,periods=<span class="number">5</span>,freq=<span class="string">'2D'</span>)</span><br><span class="line">data</span><br><span class="line">Out[<span class="number">4</span>]: </span><br><span class="line">DatetimeIndex([<span class="string">'2019-06-01'</span>, <span class="string">'2019-06-03'</span>, <span class="string">'2019-06-05'</span>, <span class="string">'2019-06-07'</span>,</span><br><span class="line">               <span class="string">'2019-06-09'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'2D'</span>)</span><br></pre></td></tr></table></figure><h1 id="二维数组DataFrame"><a href="#二维数组DataFrame" class="headerlink" title="二维数组DataFrame"></a>二维数组DataFrame</h1><p>Dataframe时pandas最常用的数据结构之一。每个Dataframe对象可看成一个二维表格由索引(index)，列名(colnums)和值(values)三部分组成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df=pd.DataFrame(&#123;<span class="string">'语文'</span>:[<span class="number">87</span>,<span class="number">79</span>,<span class="number">67</span>,<span class="number">92</span>],</span><br><span class="line">                 <span class="string">'数学'</span>:[<span class="number">93</span>,<span class="number">89</span>,<span class="number">80</span>,<span class="number">77</span>],</span><br><span class="line">                 <span class="string">'英语'</span>:[<span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">75</span>]&#125;,</span><br><span class="line">                index=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'张柳'</span>])</span><br><span class="line">Out[<span class="number">8</span>]: </span><br><span class="line">    语文  数学  英语</span><br><span class="line">张三  <span class="number">87</span>  <span class="number">93</span>  <span class="number">90</span></span><br><span class="line">李四  <span class="number">79</span>  <span class="number">89</span>  <span class="number">80</span></span><br><span class="line">王五  <span class="number">67</span>  <span class="number">80</span>  <span class="number">70</span></span><br><span class="line">张柳  <span class="number">92</span>  <span class="number">77</span>  <span class="number">75</span></span><br></pre></td></tr></table></figure><h2 id="Dataframe数据处理与分析"><a href="#Dataframe数据处理与分析" class="headerlink" title="Dataframe数据处理与分析"></a>Dataframe数据处理与分析</h2><p>案例文件<a href="https://leecode1024.oss-cn-qingdao.aliyuncs.com/shujufenxi/%E8%B6%85%E5%B8%82%E8%90%A5%E4%B8%9A%E9%A2%9D2.xlsx" target="_blank" rel="noopener">https://leecode1024.oss-cn-qingdao.aliyuncs.com/shujufenxi/%E8%B6%85%E5%B8%82%E8%90%A5%E4%B8%9A%E9%A2%9D2.xlsx</a></p><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p>pandas提供了读取各种文件的方法，例如excel文件，read_excel()  ,csv文件使用read_csv()等等。。。</p><ul><li><code>read_excel(io,sheetname=0,headers=0,skiprowsNone,indexcol=None,names=None,thousands=None,usecols=None,na_values=None,coverters=None)</code>这里仅仅列举了部分参数！<ul><li><strong>io</strong>,用来指定要读取的Excel文件，可以是路径或url文件对象。</li><li><strong>sheetname</strong>，用来指定要读取的worksheet，可以指定worksheet的整数序号，或者字符串名称。如果读取多个，形如[0,1,’sheet3’]的列表，如果指定该参数为None，则表示读取所有，并返回包含多个Data Frame结构的字典，默认为0.</li><li><strong>headers</strong>，用来指定worksheet中表示表头或列名的行索引，默认为0，如果没有表头行，则必须显示指定headers=None。</li><li><strong>skiprows</strong>，用来指定要跳过的行索引组成的列表。</li><li><strong>index_col</strong>，用来指定作为DataFrame索引的列下标。可以是包含多个列下标的列表。</li><li><strong>names</strong>，用来指定读取数据后使用的列名。</li><li><strong>thousands</strong>，用来指定文本转换为数字时的千分符。</li><li><strong>usecols</strong>，用来指定要读取列的索引或名字。</li><li><strong>na_values</strong>，用来指定哪些值被解释为缺失值。</li><li><strong>coverters</strong>，用来在读取时，转换数据类型，例如：数字类型，在读取时直接转换成字符串类型。coverters{列1:类型,列2:类型}</li></ul></li><li>read_csv(参数列表)<ul><li><strong>sep</strong>，指定分隔符。如果不指定参数，则会尝试使用逗号分隔。分隔符长于一个字符并且不是‘\s+’,将使用python的语法分析器。并且忽略数据中的逗号。正则表达式例子：’\r\t’</li><li><strong>delimiter</strong>，定界符，备选分隔符（如果指定该参数，则sep参数失效）</li><li><strong>header</strong> ，指定行数用来作为列名，数据开始行数。如果文件中没有列名，则默认为0，否则设置为None。如果明确设定header=0 就会替换掉原来存在列名</li><li><strong>names</strong> ，用于结果的列名列表，如果数据文件中没有列标题行，就需要执行header=None。默认列表中不能出现重复，除非设定参数mangle_dupe_cols=True。</li><li><strong>index_col</strong> ，用作行索引的列编号或者列名，如果给定一个序列则有多个行索引。</li><li><strong>usecols</strong> ，返回一个数据子集，该列表中的值必须可以对应到文件中的位置（数字可以对应到指定的列）或者是字符传为文件中的列名。例如：usecols有效参数可能是 [0,1,2]或者是 [‘foo’, ‘bar’, ‘baz’]。使用这个参数可以加快加载速度并降低内存消耗。</li><li><strong>squeeze</strong> : boolean, default False，如果文件值包含一列，则返回一个Series</li><li><strong>prefix</strong> : str, default None，在没有列标题时，给列添加前缀。例如：添加‘X’ 成为 X0, X1, …</li><li><strong>mangle_dupe_cols</strong> : boolean, default True，重复的列，将‘X’…’X’表示为‘X.0’…’X.N’。如果设定为false则会将所有重名列覆盖。</li><li><strong>dtype</strong> : Type name or dict of column -&gt; type, default None，每列数据的数据类型。例如 {‘a’: np.float64, ‘b’: np.int32}</li><li><strong>converters</strong> : dict, default None，列转换函数的字典。key可以是列名或者列的序号。</li><li><strong>nrows</strong> : int, default None，需要读取的行数（从文件头开始算起）。</li><li><strong>iterator</strong> : boolean, default False，返回一个TextFileReader 对象，以便逐块处理文件。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_excel(<span class="string">'超市营业额2.xlsx'</span>)</span><br><span class="line">print(data)</span><br><span class="line">       工号  姓名          日期           时段     交易额    柜台</span><br><span class="line"><span class="number">0</span>    <span class="number">1001</span>  张三  <span class="number">2019</span><span class="number">-03</span><span class="number">-01</span>   <span class="number">9</span>：<span class="number">00</span><span class="number">-14</span>：<span class="number">00</span>  <span class="number">1664.0</span>   化妆品</span><br><span class="line"><span class="number">1</span>    <span class="number">1002</span>  李四  <span class="number">2019</span><span class="number">-03</span><span class="number">-01</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>   <span class="number">954.0</span>   化妆品</span><br><span class="line"><span class="number">2</span>    <span class="number">1003</span>  王五  <span class="number">2019</span><span class="number">-03</span><span class="number">-01</span>   <span class="number">9</span>：<span class="number">00</span><span class="number">-14</span>：<span class="number">00</span>  <span class="number">1407.0</span>    食品</span><br><span class="line"><span class="number">3</span>    <span class="number">1004</span>  赵六  <span class="number">2019</span><span class="number">-03</span><span class="number">-01</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>  <span class="number">1320.0</span>    食品</span><br><span class="line"><span class="number">4</span>    <span class="number">1005</span>  周七  <span class="number">2019</span><span class="number">-03</span><span class="number">-01</span>   <span class="number">9</span>：<span class="number">00</span><span class="number">-14</span>：<span class="number">00</span>   <span class="number">994.0</span>   日用品</span><br><span class="line">..    ...  ..         ...          ...     ...   ...</span><br><span class="line"><span class="number">244</span>  <span class="number">1002</span>  李四  <span class="number">2019</span><span class="number">-03</span><span class="number">-31</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>   <span class="number">859.0</span>  蔬菜水果</span><br><span class="line"><span class="number">245</span>  <span class="number">1004</span>  赵六  <span class="number">2019</span><span class="number">-03</span><span class="number">-31</span>   <span class="number">9</span>：<span class="number">00</span><span class="number">-14</span>：<span class="number">00</span>  <span class="number">1668.0</span>   日用品</span><br><span class="line"><span class="number">246</span>  <span class="number">1004</span>  赵六  <span class="number">2019</span><span class="number">-03</span><span class="number">-31</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>  <span class="number">1722.0</span>   日用品</span><br><span class="line"><span class="number">247</span>  <span class="number">1003</span>  王五  <span class="number">2019</span><span class="number">-03</span><span class="number">-31</span>   <span class="number">9</span>：<span class="number">00</span><span class="number">-14</span>：<span class="number">00</span>  <span class="number">1274.0</span>    食品</span><br><span class="line"><span class="number">248</span>  <span class="number">1006</span>  钱八  <span class="number">2019</span><span class="number">-03</span><span class="number">-31</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>   <span class="number">812.0</span>    食品</span><br><span class="line"></span><br><span class="line">[<span class="number">249</span> rows x <span class="number">6</span> columns]</span><br></pre></td></tr></table></figure><h2 id="数据筛选"><a href="#数据筛选" class="headerlink" title="数据筛选"></a>数据筛选</h2><ul><li><p>DataFrame结构支持对行和列进行切片，也支持访问特定的行、列对应的数据，或者访问符合条件的数据。</p></li><li><p>使用下标和切片访问指定行和列的数据，用户还可以使用布尔数组作为下标访问符合条件的数据。</p></li><li><p>DataFrame结构还提供了loc,iloc,at,iat等访问器来访问指定数据。</p><ul><li>其中loc,at使用标签来访问行和列。</li><li>iloc,iat使用整数来指定行、列下标。</li><li>iloc和iat只关心位置，即：第一行，第二行，而不关心具体索引的值。</li><li>at和iat的访问速度更快，但只能访问单个值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#交易额大于某数  这里的df.列名和df['列名']效果一样，这样相当于传入了一个布尔数组进行筛选。</span></span><br><span class="line">df[df.交易额&gt;<span class="number">1700</span>] 或df[df[<span class="string">'交易额'</span>]&gt;<span class="number">1700</span>]  </span><br><span class="line"><span class="comment">#张三下午班交易情况 或与非逻辑运算 &amp;,|,!</span></span><br><span class="line">df[  (df.姓名==<span class="string">'张三'</span>) &amp; (df.时段==<span class="string">'14：00-21：00'</span>) ]</span><br><span class="line"><span class="comment">#查看张三，李四两人销售总额 isin()可以用来筛选在另外一组数据中的内容</span></span><br><span class="line">df[df[<span class="string">'姓名'</span>].isin([<span class="string">'张三'</span>,<span class="string">'李四'</span>])][<span class="string">'交易额'</span>].sum()</span><br><span class="line"><span class="comment">#交易额在指定范围内的记录</span></span><br><span class="line">df[df[<span class="string">'交易额'</span>].between(<span class="number">800</span>,<span class="number">850</span>)]</span><br></pre></td></tr></table></figure><h2 id="查看数据特征和统计信息"><a href="#查看数据特征和统计信息" class="headerlink" title="查看数据特征和统计信息"></a>查看数据特征和统计信息</h2><p>在分析数据时，有时需要查看数据的数量、平均值、标准差、最大值、最小值、四分位数等特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">'display.unicode.ambiguous_as_wide'</span>,<span class="literal">True</span>)<span class="comment">#对齐</span></span><br><span class="line">pd.set_option(<span class="string">'display.unicode.east_asian_width'</span>,<span class="literal">True</span>)</span><br><span class="line">data = pd.read_excel(<span class="string">'超市营业额2.xlsx'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'交易额'</span>].describe()  <span class="comment">#查看交易额统计信息</span></span><br><span class="line">Out[<span class="number">8</span>]: </span><br><span class="line">count      <span class="number">246.000000</span></span><br><span class="line">mean      <span class="number">1330.313008</span></span><br><span class="line">std        <span class="number">904.300720</span></span><br><span class="line">min         <span class="number">53.000000</span></span><br><span class="line"><span class="number">25</span>%       <span class="number">1031.250000</span></span><br><span class="line"><span class="number">50</span>%       <span class="number">1259.000000</span></span><br><span class="line"><span class="number">75</span>%       <span class="number">1523.000000</span></span><br><span class="line">max      <span class="number">12100.000000</span></span><br><span class="line">Name: 交易额, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'交易额'</span>].quantile([<span class="number">0</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,<span class="number">0.75</span>,<span class="number">1</span>])  <span class="comment">#查看交易额四分位数</span></span><br><span class="line">Out[<span class="number">10</span>]: </span><br><span class="line"><span class="number">0.00</span>       <span class="number">53.00</span></span><br><span class="line"><span class="number">0.25</span>     <span class="number">1031.25</span></span><br><span class="line"><span class="number">0.50</span>     <span class="number">1259.00</span></span><br><span class="line"><span class="number">0.75</span>     <span class="number">1523.00</span></span><br><span class="line"><span class="number">1.00</span>    <span class="number">12100.00</span></span><br><span class="line">Name: 交易额, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'交易额'</span>].median()  <span class="comment">#查看交易额中值</span></span><br><span class="line">Out[<span class="number">11</span>]: <span class="number">1259.0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data.nsmallest(<span class="number">3</span>,<span class="string">'交易额'</span>)<span class="comment">#交易额最小的三条记录</span></span><br><span class="line">Out[<span class="number">12</span>]: </span><br><span class="line">     工号  姓名        日期           时段  交易额    柜台</span><br><span class="line"><span class="number">76</span>   <span class="number">1005</span>  周七  <span class="number">2019</span><span class="number">-03</span><span class="number">-10</span>   <span class="number">9</span>：<span class="number">00</span><span class="number">-14</span>：<span class="number">00</span>    <span class="number">53.0</span>  日用品</span><br><span class="line"><span class="number">97</span>   <span class="number">1002</span>  李四  <span class="number">2019</span><span class="number">-03</span><span class="number">-13</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>    <span class="number">98.0</span>  日用品</span><br><span class="line"><span class="number">194</span>  <span class="number">1001</span>  张三  <span class="number">2019</span><span class="number">-03</span><span class="number">-25</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>   <span class="number">114.0</span>  化妆品</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data.nlargest(<span class="number">5</span>,<span class="string">'交易额'</span>)<span class="comment">#交易额最大的五条记录</span></span><br><span class="line">Out[<span class="number">13</span>]: </span><br><span class="line">     工号  姓名        日期           时段   交易额      柜台</span><br><span class="line"><span class="number">105</span>  <span class="number">1001</span>  张三  <span class="number">2019</span><span class="number">-03</span><span class="number">-14</span>   <span class="number">9</span>：<span class="number">00</span><span class="number">-14</span>：<span class="number">00</span>  <span class="number">12100.0</span>    日用品</span><br><span class="line"><span class="number">223</span>  <span class="number">1003</span>  王五  <span class="number">2019</span><span class="number">-03</span><span class="number">-28</span>   <span class="number">9</span>：<span class="number">00</span><span class="number">-14</span>：<span class="number">00</span>   <span class="number">9031.0</span>      食品</span><br><span class="line"><span class="number">113</span>  <span class="number">1002</span>  李四  <span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>   <span class="number">9</span>：<span class="number">00</span><span class="number">-14</span>：<span class="number">00</span>   <span class="number">1798.0</span>    日用品</span><br><span class="line"><span class="number">188</span>  <span class="number">1002</span>  李四  <span class="number">2019</span><span class="number">-03</span><span class="number">-24</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>   <span class="number">1793.0</span>  蔬菜水果</span><br><span class="line"><span class="number">136</span>  <span class="number">1001</span>  张三  <span class="number">2019</span><span class="number">-03</span><span class="number">-17</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>   <span class="number">1791.0</span>      食品</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'最后一个日期'</span>.ljust(<span class="number">20</span>,<span class="string">'-'</span>))</span><br><span class="line">print(df[<span class="string">'日期'</span>].max())</span><br><span class="line">print(<span class="string">'最小工号'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">print(df[<span class="string">'工号'</span>].min())</span><br><span class="line">print(<span class="string">'第一个最小交易额的行下标'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">index=df[<span class="string">'交易额'</span>].idxmin()</span><br><span class="line">print(index)</span><br><span class="line">print(<span class="string">'第一个最小交易额'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">print(df.loc[index,<span class="string">'交易额'</span>])</span><br><span class="line">print(<span class="string">'第一个最da交易额的行下标'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">index=df[<span class="string">'交易额'</span>].idxmax()</span><br><span class="line">print(index)</span><br><span class="line">print(<span class="string">'第一个最大交易额'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">print(df.loc[index,<span class="string">'交易额'</span>])</span><br><span class="line">结果：</span><br><span class="line">最后一个日期--------------</span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-31</span></span><br><span class="line">最小工号================</span><br><span class="line"><span class="number">1001</span></span><br><span class="line">第一个最小交易额的行下标========</span><br><span class="line"><span class="number">76</span></span><br><span class="line">第一个最小交易额============</span><br><span class="line"><span class="number">53.0</span></span><br><span class="line">第一个最da交易额的行下标=======</span><br><span class="line"><span class="number">105</span></span><br><span class="line">第一个最大交易额============</span><br><span class="line"><span class="number">12100.0</span></span><br></pre></td></tr></table></figure><h2 id="数据排序"><a href="#数据排序" class="headerlink" title="数据排序"></a>数据排序</h2><ul><li><code>sort_index(axis=0,level=None,ascending=True,implace=False,kind=&#39;quicksort&#39;,na_position=&#39;last&#39;,sort_remaining=True,by=None)</code><ul><li>axie=0表示根据行索引标签进行排序，axis=1表示根据列名。</li><li>ascending=True代表升序，False代表降序。</li><li>inplace=True表示原地排序，False表示返回新DataFrame。</li></ul></li><li><code>sort_values(by,axis=0,ascending=True,inplace=False,kind=&#39;quicksort&#39;,na_position=&#39;last&#39;)</code><ul><li>by用来指定依据那个或那些列进行排序by=***或by=[a,b,c]。</li><li>ascending=True代表升序，False代表降序。如果ascending设置为包含若干True/False的列表（必须与by指定的列表等长），则可以为不同的列指定不同的排序。</li><li>np_position用来指定把缺失值放在最前面（np_position=’first’）还是最后面（np_position=’last’）。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">'display.unicode.ambiguous_as_wide'</span>,<span class="literal">True</span>)</span><br><span class="line">pd.set_option(<span class="string">'display.unicode.east_asian_width'</span>,<span class="literal">True</span>)</span><br><span class="line">df = pd.read_excel(<span class="string">'超市营业额2.xlsx'</span>)</span><br><span class="line">print(<span class="string">'按交易额和工号降序排序'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">print(df.sort_values(by=[<span class="string">'交易额'</span>,<span class="string">'工号'</span>],ascending=<span class="literal">False</span>)[:<span class="number">12</span>])</span><br><span class="line">print(<span class="string">'按交易额降序，工号升序'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">print(df.sort_values(by=[<span class="string">'交易额'</span>,<span class="string">'工号'</span>],ascending=[<span class="literal">False</span>,<span class="literal">True</span>])[:<span class="number">12</span>])</span><br><span class="line">print(<span class="string">'按工号升序'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">print(df.sort_values(by=<span class="string">'工号'</span>,na_position=<span class="string">'last'</span>)[:<span class="number">10</span>])</span><br><span class="line">print(<span class="string">'按列名升序排序'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line"><span class="comment">#注意，这里是按汉字的unicode编码排序·</span></span><br><span class="line">print(df.sort_index(axis=<span class="number">1</span>,ascending=<span class="literal">True</span>)[:<span class="number">10</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line">按交易额和工号降序排序&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">     工号  姓名        日期           时段   交易额      柜台</span><br><span class="line">105  1001  张三  2019-03-14   9：00-14：00  12100.0    日用品</span><br><span class="line">223  1003  王五  2019-03-28   9：00-14：00   9031.0      食品</span><br><span class="line">113  1002  李四  2019-03-15   9：00-14：00   1798.0    日用品</span><br><span class="line">188  1002  李四  2019-03-24  14：00-21：00   1793.0  蔬菜水果</span><br><span class="line">136  1001  张三  2019-03-17  14：00-21：00   1791.0      食品</span><br><span class="line">121  1002  李四  2019-03-16   9：00-14：00   1788.0    日用品</span><br><span class="line">47   1005  周七  2019-03-06  14：00-21：00   1778.0  蔬菜水果</span><br><span class="line">185  1004  赵六  2019-03-24   9：00-14：00   1775.0    化妆品</span><br><span class="line">205  1001  张三  2019-03-26   9：00-14：00   1746.0    日用品</span><br><span class="line">82   1006  钱八  2019-03-11   9：00-14：00   1737.0      食品</span><br><span class="line">227  1005  周七  2019-03-29   9：00-14：00   1737.0  蔬菜水果</span><br><span class="line">246  1004  赵六  2019-03-31  14：00-21：00   1722.0    日用品</span><br><span class="line">按交易额降序，工号升序&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">     工号  姓名        日期           时段   交易额      柜台</span><br><span class="line">105  1001  张三  2019-03-14   9：00-14：00  12100.0    日用品</span><br><span class="line">223  1003  王五  2019-03-28   9：00-14：00   9031.0      食品</span><br><span class="line">113  1002  李四  2019-03-15   9：00-14：00   1798.0    日用品</span><br><span class="line">188  1002  李四  2019-03-24  14：00-21：00   1793.0  蔬菜水果</span><br><span class="line">136  1001  张三  2019-03-17  14：00-21：00   1791.0      食品</span><br><span class="line">121  1002  李四  2019-03-16   9：00-14：00   1788.0    日用品</span><br><span class="line">47   1005  周七  2019-03-06  14：00-21：00   1778.0  蔬菜水果</span><br><span class="line">185  1004  赵六  2019-03-24   9：00-14：00   1775.0    化妆品</span><br><span class="line">205  1001  张三  2019-03-26   9：00-14：00   1746.0    日用品</span><br><span class="line">227  1005  周七  2019-03-29   9：00-14：00   1737.0  蔬菜水果</span><br><span class="line">82   1006  钱八  2019-03-11   9：00-14：00   1737.0      食品</span><br><span class="line">246  1004  赵六  2019-03-31  14：00-21：00   1722.0    日用品</span><br><span class="line">按工号升序&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">     工号  姓名        日期           时段  交易额      柜台</span><br><span class="line">0    1001  张三  2019-03-01   9：00-14：00  1664.0    化妆品</span><br><span class="line">178  1001  张三  2019-03-23  14：00-21：00  1271.0    化妆品</span><br><span class="line">39   1001  张三  2019-03-05  14：00-21：00   856.0  蔬菜水果</span><br><span class="line">40   1001  张三  2019-03-06   9：00-14：00  1037.0    化妆品</span><br><span class="line">177  1001  张三  2019-03-23   9：00-14：00  1296.0    化妆品</span><br><span class="line">169  1001  张三  2019-03-22   9：00-14：00   946.0    化妆品</span><br><span class="line">160  1001  张三  2019-03-20  14：00-21：00   829.0      食品</span><br><span class="line">54   1001  张三  2019-03-07   9：00-14：00  1263.0  蔬菜水果</span><br><span class="line">157  1001  张三  2019-03-20   9：00-14：00  1037.0    日用品</span><br><span class="line">225  1001  张三  2019-03-29  14：00-21：00  1523.0    化妆品</span><br><span class="line">按列名升序排序&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">   交易额  姓名  工号        日期           时段      柜台</span><br><span class="line">0  1664.0  张三  1001  2019-03-01   9：00-14：00    化妆品</span><br><span class="line">1   954.0  李四  1002  2019-03-01  14：00-21：00    化妆品</span><br><span class="line">2  1407.0  王五  1003  2019-03-01   9：00-14：00      食品</span><br><span class="line">3  1320.0  赵六  1004  2019-03-01  14：00-21：00      食品</span><br><span class="line">4   994.0  周七  1005  2019-03-01   9：00-14：00    日用品</span><br><span class="line">5  1421.0  钱八  1006  2019-03-01  14：00-21：00    日用品</span><br><span class="line">6  1226.0  钱八  1006  2019-03-01   9：00-14：00  蔬菜水果</span><br><span class="line">7  1442.0  张三  1001  2019-03-01  14：00-21：00  蔬菜水果</span><br><span class="line">8  1530.0  张三  1001  2019-03-02   9：00-14：00    化妆品</span><br><span class="line">9  1395.0  李四  1002  2019-03-02  14：00-21：00</span><br></pre></td></tr></table></figure><h2 id="异常值、缺失值、重复值的处理"><a href="#异常值、缺失值、重复值的处理" class="headerlink" title="异常值、缺失值、重复值的处理"></a>异常值、缺失值、重复值的处理</h2><h3 id="异常值"><a href="#异常值" class="headerlink" title="异常值"></a>异常值</h3><p>异常值是指眼中超出正常范围的数值，这样的数据一般是数据采集错误或类似原因造成的。在数据分析时，需要把这些数据删除或替换成特定的值，减小对最终数据分析结果的影响。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">'display.unicode.ambiguous_as_wide'</span>,<span class="literal">True</span>)</span><br><span class="line">pd.set_option(<span class="string">'display.unicode.east_asian_width'</span>,<span class="literal">True</span>)</span><br><span class="line">df = pd.read_excel(<span class="string">'超市营业额2.xlsx'</span>)</span><br><span class="line"><span class="comment">#低于200的交易额固定为200</span></span><br><span class="line">df.loc[df.交易额&lt;<span class="number">200</span>,<span class="string">'交易额'</span>] = <span class="number">200</span></span><br><span class="line">print(<span class="string">'交易额低于200或高于3000的数据'</span>.ljust(<span class="number">30</span>,<span class="string">'='</span>))</span><br><span class="line">print(df[(df[<span class="string">'交易额'</span>]&lt;<span class="number">200</span>) | (df[<span class="string">'交易额'</span>]&gt;<span class="number">3000</span>)])</span><br><span class="line"><span class="comment">#高于3000的交易额固定为3000</span></span><br><span class="line">df.loc[df.交易额&gt;<span class="number">3000</span>,<span class="string">'交易额'</span>] = <span class="number">3000</span></span><br><span class="line">print(<span class="string">'低于200或大于3000的数量'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">print(df[(df[<span class="string">'交易额'</span>]&lt;<span class="number">200</span>) | (df[<span class="string">'交易额'</span>]&gt;<span class="number">3000</span>)][<span class="string">'交易额'</span>].count())</span><br><span class="line">结果：---------------------------------------------------------------------------</span><br><span class="line">交易额低于<span class="number">200</span>或高于<span class="number">3000</span>的数据============</span><br><span class="line">     工号  姓名        日期          时段   交易额    柜台</span><br><span class="line"><span class="number">105</span>  <span class="number">1001</span>  张三  <span class="number">2019</span><span class="number">-03</span><span class="number">-14</span>  <span class="number">9</span>：<span class="number">00</span><span class="number">-14</span>：<span class="number">00</span>  <span class="number">12100.0</span>  日用品</span><br><span class="line"><span class="number">223</span>  <span class="number">1003</span>  王五  <span class="number">2019</span><span class="number">-03</span><span class="number">-28</span>  <span class="number">9</span>：<span class="number">00</span><span class="number">-14</span>：<span class="number">00</span>   <span class="number">9031.0</span>    食品</span><br><span class="line">低于<span class="number">200</span>或大于<span class="number">3000</span>的数量=====</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="缺失值"><a href="#缺失值" class="headerlink" title="缺失值"></a>缺失值</h3><p>由于人为失误或机器故障的缘由，可能会导致某些数据丢失。在数据分析时应注意检查有没有缺失值，如果有则将其删除或替换成特定值。</p><ul><li><code>dropna(axis=0,how=&#39;any&#39;,thresh=None,subset=None,inplace=False)</code><strong>丢弃</strong>带有缺失值的行<ul><li>how=’any’时表示只要某行包含缺失值就丢弃，how=’all’时表示，某行全部为缺失值时才丢弃。</li><li>thresh用来指定保留包含几个非缺失值数据的行。</li><li>subset用来指定在判断缺失值时只考虑那些列。</li></ul></li><li><code>fillna(value=None,method=None,axis=None,inplace=False,limit=None,downcast=None,**kwargs)</code><strong>填充缺失值</strong><ul><li>value用来指定要替换的值，可以是标量，字典，Series或DataFrame。</li><li>method用来指定填充缺失值的方式，值为<strong>pad或ffill</strong>时表示使用扫描过程中遇到的最后一个有效值一直填充到下一个有效值，值为<strong>backfill或bfill</strong>时表示使用缺失值之后遇到的第一个有效值填充前面遇到的所有连续缺失值。</li><li>limit用来指定设置了参数method时最多填充多少个连续的缺失值。</li><li>implace=True表示原地替换，False返回新DataFrame，原来数据不变。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">pd.set_option(<span class="string">'display.unicode.ambiguous_as_wide'</span>,<span class="literal">True</span>)</span><br><span class="line">pd.set_option(<span class="string">'display.unicode.east_asian_width'</span>,<span class="literal">True</span>)</span><br><span class="line">df = pd.read_excel(<span class="string">'超市营业额2.xlsx'</span>)</span><br><span class="line">print(<span class="string">'总行数'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">print(len(df))</span><br><span class="line">print(<span class="string">'丢弃缺失值之后行数'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">print(len(df.dropna()))</span><br><span class="line">print(<span class="string">'包含缺失值的行'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">print(df[df.交易额.isnull()])</span><br><span class="line">print(<span class="string">'使用固定值替换缺失值'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line"><span class="comment">#深复制，不影响原来df</span></span><br><span class="line">dff=deepcopy(df)</span><br><span class="line">dff.loc[dff.交易额.isnull(),<span class="string">'交易额'</span>] = <span class="number">1000</span></span><br><span class="line">print(dff.iloc[[<span class="number">110</span>,<span class="number">124</span>,<span class="number">168</span>],:])</span><br><span class="line"></span><br><span class="line">print(<span class="string">'使用每个人的交易额均值替换缺失值'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">dff=deepcopy(df)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dff[dff.交易额.isnull()].index:</span><br><span class="line">    dff.loc[i,<span class="string">'交易额'</span>] = round(dff.loc[dff.姓名==dff.loc[i,<span class="string">'姓名'</span>],<span class="string">'交易额'</span>].mean())</span><br><span class="line"></span><br><span class="line">print(dff.iloc[[<span class="number">110</span>,<span class="number">124</span>,<span class="number">168</span>],:])</span><br><span class="line"></span><br><span class="line">print(<span class="string">'使用整体均值的80%填充缺失值'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">df.fillna(&#123;<span class="string">'交易额'</span>:round(df[<span class="string">'交易额'</span>].mean()*<span class="number">0.8</span>)&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">print(dff.iloc[[<span class="number">110</span>,<span class="number">124</span>,<span class="number">168</span>],:])</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">总行数=================</span><br><span class="line"><span class="number">249</span></span><br><span class="line">丢弃缺失值之后行数===========</span><br><span class="line"><span class="number">246</span></span><br><span class="line">包含缺失值的行=============</span><br><span class="line">     工号  姓名        日期           时段  交易额    柜台</span><br><span class="line"><span class="number">110</span>  <span class="number">1005</span>  周七  <span class="number">2019</span><span class="number">-03</span><span class="number">-14</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>     NaN  化妆品</span><br><span class="line"><span class="number">124</span>  <span class="number">1006</span>  钱八  <span class="number">2019</span><span class="number">-03</span><span class="number">-16</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>     NaN    食品</span><br><span class="line"><span class="number">168</span>  <span class="number">1005</span>  周七  <span class="number">2019</span><span class="number">-03</span><span class="number">-21</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>     NaN    食品</span><br><span class="line">使用固定值替换缺失值==========</span><br><span class="line">     工号  姓名        日期           时段  交易额    柜台</span><br><span class="line"><span class="number">110</span>  <span class="number">1005</span>  周七  <span class="number">2019</span><span class="number">-03</span><span class="number">-14</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>  <span class="number">1000.0</span>  化妆品</span><br><span class="line"><span class="number">124</span>  <span class="number">1006</span>  钱八  <span class="number">2019</span><span class="number">-03</span><span class="number">-16</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>  <span class="number">1000.0</span>    食品</span><br><span class="line"><span class="number">168</span>  <span class="number">1005</span>  周七  <span class="number">2019</span><span class="number">-03</span><span class="number">-21</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>  <span class="number">1000.0</span>    食品</span><br><span class="line">使用每个人的交易额均值替换缺失值====</span><br><span class="line">     工号  姓名        日期           时段  交易额    柜台</span><br><span class="line"><span class="number">110</span>  <span class="number">1005</span>  周七  <span class="number">2019</span><span class="number">-03</span><span class="number">-14</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>  <span class="number">1195.0</span>  化妆品</span><br><span class="line"><span class="number">124</span>  <span class="number">1006</span>  钱八  <span class="number">2019</span><span class="number">-03</span><span class="number">-16</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>  <span class="number">1323.0</span>    食品</span><br><span class="line"><span class="number">168</span>  <span class="number">1005</span>  周七  <span class="number">2019</span><span class="number">-03</span><span class="number">-21</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>  <span class="number">1195.0</span>    食品</span><br><span class="line">使用整体均值的<span class="number">80</span>%填充缺失值=====</span><br><span class="line">     工号  姓名        日期           时段  交易额    柜台</span><br><span class="line"><span class="number">110</span>  <span class="number">1005</span>  周七  <span class="number">2019</span><span class="number">-03</span><span class="number">-14</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>  <span class="number">1195.0</span>  化妆品</span><br><span class="line"><span class="number">124</span>  <span class="number">1006</span>  钱八  <span class="number">2019</span><span class="number">-03</span><span class="number">-16</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>  <span class="number">1323.0</span>    食品</span><br><span class="line"><span class="number">168</span>  <span class="number">1005</span>  周七  <span class="number">2019</span><span class="number">-03</span><span class="number">-21</span>  <span class="number">14</span>：<span class="number">00</span><span class="number">-21</span>：<span class="number">00</span>  <span class="number">1195.0</span>    食品</span><br></pre></td></tr></table></figure><h3 id="重复值"><a href="#重复值" class="headerlink" title="重复值"></a>重复值</h3><p>当记录失误，可能会导致重复数据的时候，一般采取的处理方法是直接丢弃重复数据。</p><ul><li><code>duplicated(subset=None,keep=&#39;first&#39;)</code>检查哪些重复<ul><li>subset用来指定判断不同行的数据是否重复时所依据的一列或多列，默认使用所有列的数据进行比较。</li><li>keep=’first’时表示重复数据的第一次出现标记为False，keep=’last’表示最后一次出现标记为False，keep=False表示标记所有重复数据为True。</li></ul></li><li><code>drop_duplicates(subset=None,keep=&#39;first&#39;,inplace=False)</code></li></ul><h2 id="分组与聚合"><a href="#分组与聚合" class="headerlink" title="分组与聚合"></a>分组与聚合</h2><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><ul><li><code>groupby(by=None,axis=0,level=None,as_index=True,sort=True,group_keys=True)</code><ul><li>by用来指定作用于index的函数、字典、Series对象或者指定列名作为分组依据。</li><li>as_index=False时，其结果有点类似于sql语句的查询结果。</li><li>squeeze=True会在可能的情况下降低结果的维度。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df=pd.read_excel(<span class="string">'用水情况.xlsx'</span>,converters=&#123;<span class="string">'日期'</span>:str,<span class="string">'房号'</span>:str&#125;)</span><br><span class="line"></span><br><span class="line">df[<span class="string">'楼号'</span>]=[ item[<span class="number">0</span>:<span class="number">2</span>] <span class="keyword">for</span> item <span class="keyword">in</span> df[<span class="string">'房号'</span>]]</span><br><span class="line">df[<span class="string">'年份'</span>]=[ item[<span class="number">0</span>:<span class="number">4</span>] <span class="keyword">for</span> item <span class="keyword">in</span> df[<span class="string">'日期'</span>]]</span><br><span class="line">dff=df[df[<span class="string">'用水量（立方）'</span>].isnull()]</span><br><span class="line">dff=dff.groupby(<span class="string">'楼号'</span>)</span><br><span class="line"><span class="keyword">for</span> name,value <span class="keyword">in</span> dff:</span><br><span class="line">    df.loc[value.index,<span class="string">'用水量（立方）'</span>]=df[ df[<span class="string">'楼号'</span>]==name ][<span class="string">'用水量（立方）'</span>].mean()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">df4=df.groupby(by=[<span class="string">'年份'</span>,<span class="string">'房号'</span>,<span class="string">'楼号'</span>])[<span class="string">'用水量（立方）'</span>].sum()</span><br><span class="line">年份  房号    楼号</span><br><span class="line"><span class="number">2015</span>  <span class="number">010101</span>  <span class="number">01</span>    <span class="number">227.467979</span></span><br><span class="line">      <span class="number">010102</span>  <span class="number">01</span>    <span class="number">180.467979</span></span><br><span class="line">      <span class="number">010103</span>  <span class="number">01</span>    <span class="number">189.000000</span></span><br><span class="line">      <span class="number">010104</span>  <span class="number">01</span>    <span class="number">241.000000</span></span><br><span class="line">      <span class="number">010201</span>  <span class="number">01</span>    <span class="number">148.000000</span></span><br><span class="line">   </span><br><span class="line"><span class="number">2019</span>  <span class="number">663204</span>  <span class="number">66</span>    <span class="number">200.029439</span></span><br><span class="line">      <span class="number">663301</span>  <span class="number">66</span>    <span class="number">168.514719</span></span><br><span class="line">      <span class="number">663302</span>  <span class="number">66</span>    <span class="number">209.000000</span></span><br><span class="line">      <span class="number">663303</span>  <span class="number">66</span>    <span class="number">199.000000</span></span><br><span class="line">      <span class="number">663304</span>  <span class="number">66</span>    <span class="number">206.029439</span></span><br><span class="line">Name: 用水量（立方）, Length: <span class="number">43560</span>, dtype: float64</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">df1=df.groupby(by=[<span class="string">'年份'</span>,<span class="string">'房号'</span>,<span class="string">'楼号'</span>],as_index=<span class="literal">False</span>)[<span class="string">'用水量（立方）'</span>].sum()    </span><br><span class="line">       年份    房号 楼号  用水量（立方）</span><br><span class="line"><span class="number">0</span>      <span class="number">2015</span>  <span class="number">010101</span>   <span class="number">01</span>      <span class="number">227.467979</span></span><br><span class="line"><span class="number">1</span>      <span class="number">2015</span>  <span class="number">010102</span>   <span class="number">01</span>      <span class="number">180.467979</span></span><br><span class="line"><span class="number">2</span>      <span class="number">2015</span>  <span class="number">010103</span>   <span class="number">01</span>      <span class="number">189.000000</span></span><br><span class="line"><span class="number">3</span>      <span class="number">2015</span>  <span class="number">010104</span>   <span class="number">01</span>      <span class="number">241.000000</span></span><br><span class="line"><span class="number">4</span>      <span class="number">2015</span>  <span class="number">010201</span>   <span class="number">01</span>      <span class="number">148.000000</span></span><br><span class="line">    ...     ...  ...             ...</span><br><span class="line"><span class="number">43555</span>  <span class="number">2019</span>  <span class="number">663204</span>   <span class="number">66</span>      <span class="number">200.029439</span></span><br><span class="line"><span class="number">43556</span>  <span class="number">2019</span>  <span class="number">663301</span>   <span class="number">66</span>      <span class="number">168.514719</span></span><br><span class="line"><span class="number">43557</span>  <span class="number">2019</span>  <span class="number">663302</span>   <span class="number">66</span>      <span class="number">209.000000</span></span><br><span class="line"><span class="number">43558</span>  <span class="number">2019</span>  <span class="number">663303</span>   <span class="number">66</span>      <span class="number">199.000000</span></span><br><span class="line"><span class="number">43559</span>  <span class="number">2019</span>  <span class="number">663304</span>   <span class="number">66</span>      <span class="number">206.029439</span></span><br><span class="line"></span><br><span class="line">[<span class="number">43560</span> rows x <span class="number">4</span> columns]</span><br></pre></td></tr></table></figure><p>上面就是as_index的区别。</p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><ul><li>内置聚合函数sum(),mean(),max(),min(),size(),describe()…等等</li><li>agg()函数可以传入一个字典，表示哪一列，怎样聚合，例如：agg({‘A’:sum,’B’:mean,….})</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">pd.set_option(<span class="string">'display.unicode.ambiguous_as_wide'</span>,<span class="literal">True</span>)</span><br><span class="line">pd.set_option(<span class="string">'display.unicode.east_asian_width'</span>,<span class="literal">True</span>)</span><br><span class="line">df = pd.read_excel(<span class="string">'超市营业额2.xlsx'</span>)</span><br><span class="line"></span><br><span class="line">df.groupby(by=<span class="string">'姓名'</span>).agg([<span class="string">'max'</span>,<span class="string">'min'</span>,<span class="string">'mean'</span>,<span class="string">'median'</span>])[<span class="string">'交易额'</span>]</span><br><span class="line">Out[<span class="number">39</span>]: </span><br><span class="line">          max    min         mean  median</span><br><span class="line">姓名                                     </span><br><span class="line">周七   <span class="number">1778.0</span>   <span class="number">53.0</span>  <span class="number">1195.450000</span>  <span class="number">1134.5</span></span><br><span class="line">张三  <span class="number">12100.0</span>  <span class="number">114.0</span>  <span class="number">1529.736842</span>  <span class="number">1290.0</span></span><br><span class="line">李四   <span class="number">1798.0</span>   <span class="number">98.0</span>  <span class="number">1249.574468</span>  <span class="number">1276.0</span></span><br><span class="line">王五   <span class="number">9031.0</span>  <span class="number">801.0</span>  <span class="number">1472.300000</span>  <span class="number">1227.0</span></span><br><span class="line">赵六   <span class="number">1775.0</span>  <span class="number">825.0</span>  <span class="number">1245.977778</span>  <span class="number">1224.0</span></span><br><span class="line">钱八   <span class="number">1737.0</span>  <span class="number">807.0</span>  <span class="number">1322.722222</span>  <span class="number">1381.0</span></span><br></pre></td></tr></table></figure><h2 id="透视表与交叉表"><a href="#透视表与交叉表" class="headerlink" title="透视表与交叉表"></a>透视表与交叉表</h2><h3 id="透视表"><a href="#透视表" class="headerlink" title="透视表"></a>透视表</h3><p>透视表通过聚合一个或多个键，把数据分散到对应的行和列上。</p><ul><li><p><code>pivot(index=None,columns=None,values=None)</code></p><ul><li><p>index用来指定使用哪一列数据作为结果DataFrame的索引。</p></li><li><p>columns用来指定哪一列数据作为结果DataFrame的列名。</p></li><li><p>values用来指定哪一列数据作为结果DataFrame的值。</p><p><a href="https://leecode1024.oss-cn-qingdao.aliyuncs.com/shujufenxi/%E7%94%A8%E6%B0%B4%E6%83%85%E5%86%B5.xlsx" target="_blank" rel="noopener">文件链接</a></p></li></ul></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">已知某小区所有楼号所有业主<span class="number">2015</span>年到<span class="number">2019</span>年每个月用水情况，该小区供<span class="number">66</span>栋楼，每个楼<span class="number">33</span>层，每层<span class="number">4</span>户，这些数据保存在文件“用水情况.xlsx”中，约<span class="number">52</span>万条数据，格式如下：其中房号前两位表示楼号（<span class="number">01</span><span class="number">-66</span>）、中间两位表示楼层（<span class="number">01</span><span class="number">-33</span>），最后两位表示房号（<span class="number">01</span><span class="number">-04</span>）。</span><br><span class="line">现在要求统计出该小区每年每个业主房号的用水情况、每个楼的用水情况，并输出年度用水量最大的业主房号。</span><br><span class="line">注意：表内有缺失值，先将缺失值填充为该栋楼用水平均值。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df=pd.read_excel(<span class="string">'用水情况.xlsx'</span>,converters=&#123;<span class="string">'日期'</span>:str,<span class="string">'房号'</span>:str&#125;)</span><br><span class="line"></span><br><span class="line">df[<span class="string">'楼号'</span>]=[ item[<span class="number">0</span>:<span class="number">2</span>] <span class="keyword">for</span> item <span class="keyword">in</span> df[<span class="string">'房号'</span>]]</span><br><span class="line">df[<span class="string">'年份'</span>]=[ item[<span class="number">0</span>:<span class="number">4</span>] <span class="keyword">for</span> item <span class="keyword">in</span> df[<span class="string">'日期'</span>]]</span><br><span class="line">dff=df[df[<span class="string">'用水量（立方）'</span>].isnull()]</span><br><span class="line">dff=dff.groupby(<span class="string">'楼号'</span>)</span><br><span class="line"><span class="keyword">for</span> name,value <span class="keyword">in</span> dff:</span><br><span class="line">    df.loc[value.index,<span class="string">'用水量（立方）'</span>]=df[ df[<span class="string">'楼号'</span>]==name ][<span class="string">'用水量（立方）'</span>].mean()    </span><br><span class="line">df1=df.groupby(by=[<span class="string">'年份'</span>,<span class="string">'房号'</span>,<span class="string">'楼号'</span>],as_index=<span class="literal">False</span>)[<span class="string">'用水量（立方）'</span>].sum()    </span><br><span class="line">df2=df1.groupby(by=[<span class="string">'年份'</span>,<span class="string">'楼号'</span>],as_index=<span class="literal">False</span>)[<span class="string">'用水量（立方）'</span>].sum()</span><br><span class="line">dd=df1.pivot(index=<span class="string">'房号'</span>,columns=<span class="string">'年份'</span>,values=<span class="string">'用水量（立方）'</span>)</span><br><span class="line">a=df2.pivot(index=<span class="string">'楼号'</span>,columns=<span class="string">'年份'</span>,values=<span class="string">'用水量（立方）'</span>)</span><br><span class="line">b=df1.groupby(by=[<span class="string">'年份'</span>],as_index=<span class="literal">False</span>)[<span class="string">'用水量（立方）'</span>].idxmax().values</span><br><span class="line">bb=df1[df1.index.isin(b)].reset_index()</span><br><span class="line">print(dd)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(bb)</span><br><span class="line">=======================================================================================</span><br><span class="line">年份          <span class="number">2015</span>        <span class="number">2016</span>        <span class="number">2017</span>        <span class="number">2018</span>        <span class="number">2019</span></span><br><span class="line">房号                                                              </span><br><span class="line"><span class="number">010101</span>  <span class="number">227.467979</span>  <span class="number">153.000000</span>  <span class="number">174.000000</span>  <span class="number">204.000000</span>  <span class="number">226.000000</span></span><br><span class="line"><span class="number">010102</span>  <span class="number">180.467979</span>  <span class="number">187.000000</span>  <span class="number">192.000000</span>  <span class="number">149.000000</span>  <span class="number">171.467979</span></span><br><span class="line"><span class="number">010103</span>  <span class="number">189.000000</span>  <span class="number">193.467979</span>  <span class="number">186.000000</span>  <span class="number">173.467979</span>  <span class="number">218.000000</span></span><br><span class="line"><span class="number">010104</span>  <span class="number">241.000000</span>  <span class="number">219.467979</span>  <span class="number">182.000000</span>  <span class="number">183.000000</span>  <span class="number">205.000000</span></span><br><span class="line"><span class="number">010201</span>  <span class="number">148.000000</span>  <span class="number">220.467979</span>  <span class="number">196.935958</span>  <span class="number">150.000000</span>  <span class="number">152.000000</span></span><br><span class="line">           ...         ...         ...         ...         ...</span><br><span class="line"><span class="number">663204</span>  <span class="number">178.000000</span>  <span class="number">187.000000</span>  <span class="number">199.000000</span>  <span class="number">165.514719</span>  <span class="number">200.029439</span></span><br><span class="line"><span class="number">663301</span>  <span class="number">203.514719</span>  <span class="number">126.514719</span>  <span class="number">199.000000</span>  <span class="number">175.514719</span>  <span class="number">168.514719</span></span><br><span class="line"><span class="number">663302</span>  <span class="number">133.000000</span>  <span class="number">141.000000</span>  <span class="number">216.000000</span>  <span class="number">158.029439</span>  <span class="number">209.000000</span></span><br><span class="line"><span class="number">663303</span>  <span class="number">202.514719</span>  <span class="number">182.029439</span>  <span class="number">179.000000</span>  <span class="number">217.514719</span>  <span class="number">199.000000</span></span><br><span class="line"><span class="number">663304</span>  <span class="number">172.000000</span>  <span class="number">174.000000</span>  <span class="number">166.000000</span>  <span class="number">213.514719</span>  <span class="number">206.029439</span></span><br><span class="line"></span><br><span class="line">[<span class="number">8712</span> rows x <span class="number">5</span> columns]</span><br><span class="line">年份          <span class="number">2015</span>          <span class="number">2016</span>          <span class="number">2017</span>          <span class="number">2018</span>          <span class="number">2019</span></span><br><span class="line">楼号                                                                      </span><br><span class="line"><span class="number">01</span>    <span class="number">24318.738845</span>  <span class="number">24857.738845</span>  <span class="number">24402.950656</span>  <span class="number">24458.482677</span>  <span class="number">24468.482677</span></span><br><span class="line"><span class="number">02</span>    <span class="number">24780.316352</span>  <span class="number">25030.093941</span>  <span class="number">24512.001694</span>  <span class="number">24687.631010</span>  <span class="number">24043.538762</span></span><br><span class="line"><span class="number">03</span>    <span class="number">23990.274951</span>  <span class="number">24689.435654</span>  <span class="number">24276.855303</span>  <span class="number">24093.326740</span>  <span class="number">24253.383865</span></span><br><span class="line"><span class="number">04</span>    <span class="number">24820.536194</span>  <span class="number">24891.477110</span>  <span class="number">24774.183905</span>  <span class="number">24559.713447</span>  <span class="number">23948.063519</span></span><br><span class="line"><span class="number">05</span>    <span class="number">24311.726608</span>  <span class="number">24951.666058</span>  <span class="number">24231.835965</span>  <span class="number">24528.841837</span>  <span class="number">24039.841837</span></span><br><span class="line">           ...           ...           ...           ...           ...</span><br><span class="line"><span class="number">62</span>    <span class="number">25237.022141</span>  <span class="number">24912.973536</span>  <span class="number">24056.315210</span>  <span class="number">24771.144373</span>  <span class="number">24651.534652</span></span><br><span class="line"><span class="number">63</span>    <span class="number">24605.034721</span>  <span class="number">24570.751077</span>  <span class="number">24140.717791</span>  <span class="number">24684.584650</span>  <span class="number">24627.101292</span></span><br><span class="line"><span class="number">64</span>    <span class="number">24154.465423</span>  <span class="number">24736.969990</span>  <span class="number">24506.969990</span>  <span class="number">24724.971294</span>  <span class="number">24631.456289</span></span><br><span class="line"><span class="number">65</span>    <span class="number">24128.715851</span>  <span class="number">24705.880626</span>  <span class="number">24549.374951</span>  <span class="number">24383.792564</span>  <span class="number">24339.727202</span></span><br><span class="line"><span class="number">66</span>    <span class="number">24288.794845</span>  <span class="number">24703.824284</span>  <span class="number">24555.103493</span>  <span class="number">24508.515635</span>  <span class="number">24820.339003</span></span><br><span class="line"></span><br><span class="line">[<span class="number">66</span> rows x <span class="number">5</span> columns]</span><br><span class="line">   index  年份    房号 楼号  用水量（立方）</span><br><span class="line"><span class="number">0</span>   <span class="number">1097</span>  <span class="number">2015</span>  <span class="number">091102</span>   <span class="number">09</span>           <span class="number">313.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">11821</span>  <span class="number">2016</span>  <span class="number">241902</span>   <span class="number">24</span>           <span class="number">291.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">25747</span>  <span class="number">2017</span>  <span class="number">640204</span>   <span class="number">64</span>           <span class="number">302.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">32921</span>  <span class="number">2018</span>  <span class="number">521402</span>   <span class="number">52</span>           <span class="number">298.0</span></span><br><span class="line"><span class="number">4</span>  <span class="number">35337</span>  <span class="number">2019</span>  <span class="number">042402</span>   <span class="number">04</span>           <span class="number">286.0</span></span><br></pre></td></tr></table></figure><h3 id="交叉表"><a href="#交叉表" class="headerlink" title="交叉表"></a>交叉表</h3><p>交叉表是一种特殊的透视表，往往用来统计频次，也可以使用参数aggfunc指定聚合函数从而实现其他功能。</p><p>pandas提供了crosstab函数，根据一个DataFrame对象中的数据生成交叉表，返回新的DataFrame。</p><ul><li><code>crosstab(index,columns,values=None,rownames=None,columns=None,aggfunc=None,margins=False,dropna=True,normalize=False)</code><ul><li>values,index,columns的含义与透视表pivot()一样。</li><li>aggfunc用来指定聚合函数，默认为统计次数。</li><li>rownames和colnames分别用来指定行索引和列索引的名字，如果不指定，则直接用参数index,columns指定的列名。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">'display.unicode.ambiguous_as_wide'</span>,<span class="literal">True</span>)</span><br><span class="line">pd.set_option(<span class="string">'display.unicode.east_asian_width'</span>,<span class="literal">True</span>)</span><br><span class="line">df = pd.read_excel(<span class="string">'超市营业额2.xlsx'</span>)</span><br><span class="line">print(<span class="string">'每人每天的上班次数'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">print(pd.crosstab(df.姓名,df.日期,margins=<span class="literal">True</span>).iloc[:,:<span class="number">5</span>])</span><br><span class="line">print(<span class="string">'每人在各柜台上班总次数'</span>.ljust(<span class="number">20</span>,<span class="string">'='</span>))</span><br><span class="line">print(pd.crosstab(df.姓名,df.柜台))</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">每人每天的上班次数===========</span><br><span class="line">日期  <span class="number">2019</span><span class="number">-03</span><span class="number">-01</span>  <span class="number">2019</span><span class="number">-03</span><span class="number">-02</span>  <span class="number">2019</span><span class="number">-03</span><span class="number">-03</span>  <span class="number">2019</span><span class="number">-03</span><span class="number">-04</span>  <span class="number">2019</span><span class="number">-03</span><span class="number">-05</span></span><br><span class="line">姓名                                                            </span><br><span class="line">周七           <span class="number">1</span>           <span class="number">1</span>           <span class="number">2</span>           <span class="number">2</span>           <span class="number">1</span></span><br><span class="line">张三           <span class="number">2</span>           <span class="number">1</span>           <span class="number">1</span>           <span class="number">1</span>           <span class="number">2</span></span><br><span class="line">李四           <span class="number">1</span>           <span class="number">2</span>           <span class="number">1</span>           <span class="number">2</span>           <span class="number">2</span></span><br><span class="line">王五           <span class="number">1</span>           <span class="number">2</span>           <span class="number">1</span>           <span class="number">1</span>           <span class="number">1</span></span><br><span class="line">赵六           <span class="number">1</span>           <span class="number">1</span>           <span class="number">2</span>           <span class="number">1</span>           <span class="number">1</span></span><br><span class="line">钱八           <span class="number">2</span>           <span class="number">1</span>           <span class="number">1</span>           <span class="number">1</span>           <span class="number">1</span></span><br><span class="line">All            <span class="number">8</span>           <span class="number">8</span>           <span class="number">8</span>           <span class="number">8</span>           <span class="number">8</span></span><br><span class="line">每人在各柜台上班总次数=========</span><br><span class="line">柜台  化妆品  日用品  蔬菜水果  食品</span><br><span class="line">姓名                                </span><br><span class="line">周七       <span class="number">9</span>      <span class="number">11</span>        <span class="number">14</span>     <span class="number">8</span></span><br><span class="line">张三      <span class="number">19</span>       <span class="number">6</span>         <span class="number">6</span>     <span class="number">7</span></span><br><span class="line">李四      <span class="number">16</span>       <span class="number">9</span>        <span class="number">18</span>     <span class="number">4</span></span><br><span class="line">王五       <span class="number">8</span>       <span class="number">9</span>         <span class="number">9</span>    <span class="number">14</span></span><br><span class="line">赵六      <span class="number">10</span>      <span class="number">18</span>         <span class="number">2</span>    <span class="number">15</span></span><br><span class="line">钱八       <span class="number">0</span>       <span class="number">9</span>        <span class="number">14</span>    <span class="number">14</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;pandas&quot;&gt;&lt;a href=&quot;#pandas&quot; class=&quot;headerlink&quot; title=&quot;pandas&quot;&gt;&lt;/a&gt;pandas&lt;/h1&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文主要介绍pandas的一维对象Series与二维对象Dataframe的一些常用操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="-[Python,数据分析]" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/Python/"/>
    
      <category term="数据分析" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Python数据分析三剑客之Numpy</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/05/31/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8BNumpy/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/05/31/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8BNumpy/</id>
    <published>2020-05-31T11:33:06.000Z</published>
    <updated>2020-06-04T11:47:15.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><p>#前言<br>NumPy（Numerical  Python）是Python的一种开源的数值计算扩展。这种工具可用来存储和处理大型矩阵，比Python自身的嵌套列表（nested list  structure)结构要高效的多（该结构也可以用来表示矩阵（matrix）），支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><a id="more"></a><h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h1><p>python的容器类型对象是没有数组的，python一般使用列表来代替数组的功能。但是python是解释型语言，并且封装度更高，它的执行效率就会很低，而numpy中引入了数组这一类型，它的底层是C语言，这样就大大提高了python的执行效率。</p><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><ul><li><p>np.array([1,2,3,4])   这是将列表转换成数组</p></li><li><p>np.array((1,2,3,4))   这是将元组转换成数组</p></li><li><p>np.array(range(10)) 将range对象转换成数组</p></li><li><p>np.arange(1,10,2)  这里类似于range()</p><ul><li><p><strong>注意np.arange()可以存浮点数，而range()只能是整数</strong></p></li><li><pre><code class="python">c=np.arange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">1.5</span>)<span class="keyword">in</span>:cOut[<span class="number">7</span>]: array([<span class="number">1.</span> , <span class="number">2.5</span>, <span class="number">4.</span> , <span class="number">5.5</span>, <span class="number">7.</span> , <span class="number">8.5</span>])<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- np.linspace(start,end,count) 在这里最后一个参数不是步长了，而是元素个数，而且默认是闭区间</span><br><span class="line"></span><br><span class="line">  - 参数endpoint 默认True,表示包含终点，False表示不包含终点</span><br><span class="line"></span><br><span class="line">  - retstep,默认False，如果True,返回 (`samples`, `step`)   </span><br><span class="line"></span><br><span class="line">    - </span><br><span class="line">    </span><br><span class="line">    - ```python</span><br><span class="line">      <span class="keyword">import</span> numpy as np</span><br><span class="line">      </span><br><span class="line">      print(np.linspace(<span class="number">2.0</span>, <span class="number">3.0</span>, num=<span class="number">5</span>))</span><br><span class="line">      a = np.linspace(<span class="number">2.0</span>, <span class="number">3.0</span>, num=<span class="number">5</span>, retstep=True)</span><br><span class="line">      print(a)</span><br><span class="line">      print(a[<span class="number">0</span>])</span><br><span class="line">      print(a[<span class="number">1</span>])</span><br><span class="line">      输出：</span><br><span class="line">      </span><br><span class="line">      [ <span class="number">2.</span>    <span class="number">2.25</span>  <span class="number">2.5</span>   <span class="number">2.75</span>  <span class="number">3.</span>  ]</span><br><span class="line">      (<span class="built_in">array</span>([ <span class="number">2.</span>  ,  <span class="number">2.25</span>,  <span class="number">2.5</span> ,  <span class="number">2.75</span>,  <span class="number">3.</span>  ]), <span class="number">0.25</span>)</span><br><span class="line">      [ <span class="number">2.</span>    <span class="number">2.25</span>  <span class="number">2.5</span>   <span class="number">2.75</span>  <span class="number">3.</span>  ]</span><br><span class="line">      <span class="number">0.25</span></span><br><span class="line">       retstep=True时输出了步长（step），此时步长为<span class="number">0.25</span></span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>np.logspace(0,100,10,[base=10]) 相当于10**np.linspace(0,100,10)</p></li><li><p>np.zeros(3)创建全0数组，np.ones(3) 创建全1数组</p></li><li><p>np.identity(3)  单位矩阵</p></li><li><p>np.empty((3,3)) 空数组，只申请空间，不初始化。</p></li><li><p>np.random.randint(0,50,5)随机数0-50之间</p><p>这里仅介绍部分常用方式，还有很多创建方式，可查看官方文档。</p></li></ul><h3 id="数组的属性"><a href="#数组的属性" class="headerlink" title="数组的属性"></a>数组的属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">a.dtype</td><td align="left">获知ndarray的数据类型</td></tr><tr><td align="center">type(a)</td><td align="left">numpy.ndarray数组的类型</td></tr><tr><td align="center">a.ndim</td><td align="left">秩数量</td></tr><tr><td align="center">a.size</td><td align="left">数组的长度</td></tr><tr><td align="center">a.shape</td><td align="left">数组的形状</td></tr><tr><td align="center">a.itemsize</td><td align="left">定义了数组中的每个元素占几个字节</td></tr><tr><td align="center">a.data</td><td align="left">包含数组实际元素的缓冲区（用的不多）</td></tr></tbody></table><h2 id="测试两个数组对应元素是否接近"><a href="#测试两个数组对应元素是否接近" class="headerlink" title="测试两个数组对应元素是否接近"></a>测试两个数组对应元素是否接近</h2><ul><li><p>isclose(a,b,rtol=1e-05,atol=1e-8,equal_nan=False)</p><ul><li>用来测试每一对元素是否相等，返回包含若干True、False的列表</li><li>rtol相对误差，相对误差 = | 测量值 - 真实值 |/真实值</li><li>atol绝对误差，绝对误差 = | 测量值 - 真实值 |</li><li>equal_nan，是否将Nan的值比较为相等。如果是真的，Nan在 <em>a</em> 将被视为等于 <em>b</em> 在输出数组中。</li></ul></li><li><p>allclose(a,b,rtol=1e-05,atol=1e-8,equal_nan=False)</p><ul><li>用来测试所有对应位置上的元素是否相等，返回单个True或False</li></ul></li></ul><h2 id="修改数组中元素值"><a href="#修改数组中元素值" class="headerlink" title="修改数组中元素值"></a>修改数组中元素值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure><ul><li><code>np.append(x,8)</code>  在尾部追加元素(一个或多个)，返回新数组。</li><li><code>np.insert(x,index,item)</code>指定位置插入，参数【被操作数组，位置，插入值】，返回新数组。</li><li><code>x[3]=8</code>  使用下标修改某个元素的值。格式：数组[行,列]</li><li>x[1:,1:] 数组切片，行和列下标都大于等于1的元素。</li></ul><h2 id="数组与标量的运算"><a href="#数组与标量的运算" class="headerlink" title="数组与标量的运算"></a>数组与标量的运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x=np.array((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))  <span class="comment">#创建数组对象</span></span><br><span class="line"></span><br><span class="line">x</span><br><span class="line">Out[<span class="number">19</span>]: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">x * <span class="number">2</span></span><br><span class="line">Out[<span class="number">20</span>]: array([ <span class="number">2</span>,  <span class="number">4</span>,  <span class="number">6</span>,  <span class="number">8</span>, <span class="number">10</span>])   <span class="comment"># 数组与数值相乘，返回新数组</span></span><br><span class="line"></span><br><span class="line">x / <span class="number">2</span>  </span><br><span class="line">Out[<span class="number">21</span>]: array([<span class="number">0.5</span>, <span class="number">1.</span> , <span class="number">1.5</span>, <span class="number">2.</span> , <span class="number">2.5</span>])  <span class="comment">#数组与数值想除，返回新数组</span></span><br><span class="line"></span><br><span class="line">x // <span class="number">2</span></span><br><span class="line">Out[<span class="number">22</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], dtype=int32)  <span class="comment">#数组与数值整除</span></span><br><span class="line"></span><br><span class="line">x ** <span class="number">9</span>    <span class="comment">#数组求幂运算</span></span><br><span class="line">Out[<span class="number">23</span>]: array([      <span class="number">1</span>,     <span class="number">512</span>,   <span class="number">19683</span>,  <span class="number">262144</span>, <span class="number">1953125</span>], dtype=int32)</span><br><span class="line"></span><br><span class="line">x + <span class="number">2</span>   <span class="comment">#数组与数值相加</span></span><br><span class="line">Out[<span class="number">24</span>]: array([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">x % <span class="number">3</span> <span class="comment">#数组与数值求余数</span></span><br><span class="line">Out[<span class="number">25</span>]: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], dtype=int32)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> ** x  <span class="comment">#分别计算 2**2,2**4,2**8,2**16,2**32</span></span><br><span class="line">Out[<span class="number">26</span>]: array([ <span class="number">2</span>,  <span class="number">4</span>,  <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>], dtype=int32)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> / x</span><br><span class="line">Out[<span class="number">27</span>]: array([<span class="number">2.</span>        , <span class="number">1.</span>        , <span class="number">0.66666667</span>, <span class="number">0.5</span>       , <span class="number">0.4</span>       ])</span><br><span class="line"></span><br><span class="line"><span class="number">63</span> // x</span><br><span class="line">Out[<span class="number">28</span>]: array([<span class="number">63</span>, <span class="number">31</span>, <span class="number">21</span>, <span class="number">15</span>, <span class="number">12</span>], dtype=int32)</span><br></pre></td></tr></table></figure><p>由此我们可以看到，numpy数组的运算都是元素级别的，我们不需要循环，就可以使每个元素参与运算。这极大减少了我们的工作量，而且numpy的运算速度很快，也弥补了python效率低的问题！</p><h2 id="数组与数组的运算"><a href="#数组与数组的运算" class="headerlink" title="数组与数组的运算"></a>数组与数组的运算</h2><ul><li><p>对两个等长数组进行算数运算后，得到一个新数组，其中每个元素的值为原来的两个数组中对应位置上的元素进行算数运算后的结果。</p></li><li><p>当数组大小不一样时，如果符合广播要求则进行广播，否则报错并退出。</p><ul><li>广播条件：维度相同，或者其中一个为一维。 </li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">b=np.array([<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">print(a+b)</span><br><span class="line"><span class="comment">#[7 7 7 7 7 7]，这是同一维度</span></span><br><span class="line">c=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">c1=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(c+c1)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">不同维度，广播 </span></span><br><span class="line"><span class="string">[[ 2  4  6]</span></span><br><span class="line"><span class="string"> [ 5  7  9]</span></span><br><span class="line"><span class="string"> [ 8 10 12]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><ul><li>np.argsort(),用来返回一个数组，其中每个元素为原数组中元素的索引，即位置。</li><li>np.argmax()返回最大值的索引。</li><li>np.argmin()返回最小值的索引。</li></ul><h2 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="数组元素访问"></a>数组元素访问</h2><p>用户可以使用<strong>下标和索引</strong>来访问数组的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">b=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">b</span><br><span class="line">Out[<span class="number">7</span>]: </span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line">b[<span class="number">0</span>]  <span class="comment">#第一行所有元素</span></span><br><span class="line"><span class="comment">#Out[8]: array([1, 2, 3])</span></span><br><span class="line"></span><br><span class="line">b[[<span class="number">0</span>,<span class="number">1</span>]] <span class="comment">#第一行和第二行所有元素，只指定行下标</span></span><br><span class="line">Out[<span class="number">9</span>]: </span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">b[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>]]<span class="comment">#第一个列表为行下标，第二个为列下表，(0,2)(2,1)(1,0)</span></span><br><span class="line">Out[<span class="number">10</span>]: array([<span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><h2 id="改变数组形状"><a href="#改变数组形状" class="headerlink" title="改变数组形状"></a>改变数组形状</h2><ul><li><p>numpy提供了reshape()和resize()两个方法。</p></li><li><p>reshape()用来修改数组形状，<strong>返回新数组</strong>，但<strong>不能改变数组中元素的总数量</strong></p></li><li><p>resize()对数组进行<strong>原地修改</strong>，并且会根据需要进行补0或丢弃部分元素。</p></li><li><p>通过数组的shape可以直接修改数组的大小</p><p>这里就介绍numpy的基本用法，更多使用方式还要查阅官方文档。(<em>^▽^</em>)</p></li></ul><p>​                      </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Numpy&quot;&gt;&lt;a href=&quot;#Numpy&quot; class=&quot;headerlink&quot; title=&quot;Numpy&quot;&gt;&lt;/a&gt;Numpy&lt;/h1&gt;&lt;p&gt;#前言&lt;br&gt;NumPy（Numerical  Python）是Python的一种开源的数值计算扩展。这种工具可用来存储和处理大型矩阵，比Python自身的嵌套列表（nested list  structure)结构要高效的多（该结构也可以用来表示矩阵（matrix）），支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="-[Python,数据分析]" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/Python/"/>
    
      <category term="数据分析" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Python之基本文件操作</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/05/31/Python%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/05/31/Python%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-31T06:57:10.000Z</published>
    <updated>2020-05-31T07:41:49.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python之基本文件操作"><a href="#Python之基本文件操作" class="headerlink" title="Python之基本文件操作"></a>Python之基本文件操作</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要讲述open()函数操作文件，以及各个参数的含义。介绍文件对象常用方法，with上下文管理语句。</p><a id="more"></a><h2 id="内置函数open"><a href="#内置函数open" class="headerlink" title="内置函数open()"></a>内置函数open()</h2><p>python的内置函数open()使用指定模式，打开指定文件，并创建文件对象。</p><p><code>open(file,mode=&#39;r&#39;,buffering=-1,encoding=None,errors=None,newline=None,closefd=True,opener=None)</code></p><ul><li><p>file是文件名，可以是相对路径，也可以是绝对路径。</p></li><li><p>mode是打开文件的模式</p><table><thead><tr><th>模式</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>读模式（默认，可省略），文件不存在，则抛出异常</td></tr><tr><td>w</td><td>写模式，如果文件存在，则清空原有内容；如果不存在，则创建新文件。</td></tr><tr><td>x</td><td>写模式。创建新文件，如果文件已存在，则抛出异常</td></tr><tr><td>a</td><td>追加模式，不覆盖文件中原有内容</td></tr><tr><td>b</td><td>二进制模式（可与上面四种组合使用），二进制模式不允许指定参数encoding</td></tr><tr><td>t</td><td>文本模式，(默认，可省略)</td></tr><tr><td>+</td><td>读写模式，可与其他模式组合使用</td></tr></tbody></table></li><li><p>buffering是一个可选的参数，用来表示缓冲区的策略选择。设置为0时，表示不使用缓冲区，直接读写，仅在二进制模式下有效。设置为1时，表示在文本模式下使用行缓冲区方式。设置为大于1时，表示缓冲区的设置大小。如果参数buffering没有给出，使用默认时，会采用下面策略来选择：</p><ul><li>对于二进制文件模式时，采用固定块内存缓冲区方式，内存块的大小根据系统设备的分配的磁盘块来决定，如果获取系统磁盘块的大小失败，就使用内部常量io.DEFAULT_BUFFER_SIZE定义的大小。一般的操作系统上，块的大小是4096或者8192字节大小。</li><li>对于交互的文本文件（采用isatty()判断为True）时，采用一行缓冲区的方式。其它文本文件使用跟二进制一样的方式。</li></ul></li><li><p>encoding是指明对文件编码，仅适用于文本文件。如果不明编码方式，默认是使用locale.getpreferredencoding()函数返回的编码方式。</p></li><li><p>errors是用来指明编码和解码错误时怎么样处理。不能在二进制的模式下使用。</p><ul><li>当指明为’strict’时，编码出错则抛出异常ValueError。</li><li>当指明为’ignore’时，忽略错误。</li><li>当指明为’replace’时，使用某字符进行替代模式，比如使用’?’来替换出错的。</li><li>其它相应还有surrogateescape/xmlcharrefreplacs/backslashreplace。</li></ul></li><li><p>newline是用来控制文本模式之下，一行的结束字符。可以是None，’’，\n，\r，\r\n等。</p></li><li><p>closefd是用来当给一个文件句柄传进来时，而当退出文件使用时，而不对文件句柄进行关闭。如果传递一个文件名进来，这个参数无效，必定为True方式。</p></li><li><p>opener是用来实现自己定义打开文件方式。这种使用方式比较复杂。</p></li></ul><h2 id="文件对象常用方法"><a href="#文件对象常用方法" class="headerlink" title="文件对象常用方法"></a>文件对象常用方法</h2><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>close()</td><td>把缓冲区的内容写入文件，同时关闭文件，释放文件对象。</td></tr><tr><td>read([size])</td><td>从文本文件中读取并返回size个字符，或从二进制文件中读取并返回size个字节，省略size表示读取全部</td></tr><tr><td>readline()</td><td>从文本文件中读取并返回一行内容。</td></tr><tr><td>readlines()</td><td>返回包含文本文件中每行内容的列表。</td></tr><tr><td>seck(cookie,whence=0,/)</td><td>指定文件指针，把文件指针移动到相对于whence的偏移量为cookie的位置，其中whence{0:文件头,1:当前位置,2:文件尾}，对于文本文件whence=2时，cookie必须为0，对于二进制文件，whence=2时，cookie可以为负数；不指定时，默认0</td></tr><tr><td>write(s)</td><td>把s的内容写入文件，如果文件为文本文件，则s为字符串；如果文件为二进制文件，s为字节串</td></tr><tr><td>writelines(s)</td><td>将列表s中所有字符串写入文本文件，但并不在每个字符串后面加换行符。</td></tr></tbody></table><p>文件打开后必须要关闭，with关键字可以自动管理资源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(filename,mode,encoding) <span class="keyword">as</span> fp:</span><br><span class="line">代码块</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python之基本文件操作&quot;&gt;&lt;a href=&quot;#Python之基本文件操作&quot; class=&quot;headerlink&quot; title=&quot;Python之基本文件操作&quot;&gt;&lt;/a&gt;Python之基本文件操作&lt;/h1&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文主要讲述open()函数操作文件，以及各个参数的含义。介绍文件对象常用方法，with上下文管理语句。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之选择、循环结构，函数的定义与使用</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/05/30/Python%E4%B9%8B%E9%80%89%E6%8B%A9%E3%80%81%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%EF%BC%8C%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/05/30/Python%E4%B9%8B%E9%80%89%E6%8B%A9%E3%80%81%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%EF%BC%8C%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2020-05-30T13:40:03.000Z</published>
    <updated>2020-05-31T03:39:42.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python之选择、循环结构，函数的定义与使用"><a href="#Python之选择、循环结构，函数的定义与使用" class="headerlink" title="Python之选择、循环结构，函数的定义与使用"></a>Python之选择、循环结构，函数的定义与使用</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这里介绍python中的选择、循环结构的各种表现形式，以及python特有的语法。简单介绍python中函数的使用，函数参数的各种类型等等。</p><a id="more"></a><h1 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h1><h2 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h2><ul><li>所有合法表达式都可为条件表达式。</li><li>条件表达式的值为True和False</li><li>数字作为条件表达式0,0.0,0j等价于False，其他任意数字均等价于True</li><li>不含任何元素的容器类对象等价于False</li><li>不含任何字符的空字符串等价于False，哪怕有个空格都为True</li></ul><h2 id="三种形式的选择结构"><a href="#三种形式的选择结构" class="headerlink" title="三种形式的选择结构"></a>三种形式的选择结构</h2><p>单分支</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>：</span><br><span class="line">语句块<span class="number">1</span></span><br></pre></td></tr></table></figure><p>双分支</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>：</span><br><span class="line">语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> 表达式<span class="number">2</span>：</span><br><span class="line">语句块<span class="number">2</span></span><br></pre></td></tr></table></figure><p>嵌套分支1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>：</span><br><span class="line">语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">2</span>:</span><br><span class="line">语句块<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">3</span>:</span><br><span class="line">语句块<span class="number">3</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句块n</span><br></pre></td></tr></table></figure><p>嵌套分支2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> 表达式<span class="number">2</span>:</span><br><span class="line">语句块<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span> 表达式<span class="number">3</span>:</span><br><span class="line">    语句块<span class="number">3</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> 表达式<span class="number">4</span>:</span><br><span class="line">语句块<span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> 容器类对象:</span><br><span class="line">循环体</span><br><span class="line">[<span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">else</span>代码块]</span><br></pre></td></tr></table></figure><p>python为循环结构加入了else块，else块在<strong>循环体自然结束后执行</strong>。如果循环体提前结束，即执行了break语句，则不执行。</p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件表达式:</span><br><span class="line">循环体</span><br><span class="line">[<span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">else</span>代码块]</span><br></pre></td></tr></table></figure><h2 id="break与continue"><a href="#break与continue" class="headerlink" title="break与continue"></a>break与continue</h2><p>这里的作用跟C语言，java语言作用一样。</p><ul><li>break 直接结束循环体</li><li>continue 跳过之后的循环体语句，进入下次循环</li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">([参数列表])</span>:</span></span><br><span class="line">函数体</span><br></pre></td></tr></table></figure><ul><li>def 是定义函数的关键字</li><li>参数不需要指定类型，python自动判断</li><li>不需要说明返回值类型，可以返回多个值，没有返回值，认为返回None</li></ul><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><ul><li><p>等价于一个函数，用于需要一个函数，但又不想定义的场合。</p></li><li><p>lambda表达式只能包含一个表达式，不允许包含选择、循环等语法结构。</p></li><li><p>格式：<code>lambda [参数列表]:表达式</code></p></li><li><p>多个参数用逗号隔开，没有参数，表达式的值等于函数的返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">案例：</span><br><span class="line"><span class="comment">#给lambda表达式起名字，定义具名函数</span></span><br><span class="line">func=<span class="keyword">lambda</span> x,y :x+y</span><br><span class="line">sum=func(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 按各位数字之和的大小升序排序</span></span><br><span class="line">print(sorted(data,key=<span class="keyword">lambda</span> num:sum(map(int,str(num)))))</span><br></pre></td></tr></table></figure></li></ul><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><ul><li><p>一个函数在执行过程中，又调用本身。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用递归计算自然数各位数字之和</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> func(num//<span class="number">10</span>) + n%<span class="number">10</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h2><ul><li><p>函数中包含yield语句，代码每次执行到yield语句时，返回一个值，然后暂停执行，当通过其他方式索要数据时，在恢复执行。</p></li><li><p>也就是说yield会返回一个值，但返回之后会记住执行到哪里了，当再次索要数据时，会继续执行。</p></li><li><p>返回的生成器对象具有惰性求值的特性。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myMap</span><span class="params">(func,iterable)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> func(item)</span><br><span class="line">result = myMap(str,range(<span class="number">5</span>))</span><br><span class="line">print(result)</span><br><span class="line">print(list(result))</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li><p>位置参数</p><ul><li>即：实参与形参，在位置与数量上对应。这里跟C语言，java语言用法一样。</li></ul></li><li><p>默认值参数</p><ul><li>在定义函数时，为部分形参设置默认值。</li><li>在调用函数时，如果不为已经设置了默认值的参数传值，则使用默认值。如果传了值，则使用实参的值。</li><li>在语法上，任何带默认值的参数，其右边不能有不带默认值的参数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b=<span class="number">5</span>)</span>:</span></span><br><span class="line"><span class="keyword">return</span> a+b</span><br><span class="line">ab=add(<span class="number">1</span>)  <span class="comment">#6</span></span><br><span class="line">ab1=add(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">#3</span></span><br></pre></td></tr></table></figure></li><li><p>关键参数</p><ul><li><p>关键参数是指，明确给哪个参数传值，类似于key=value。</p></li><li><p>这时候，如果参数位置不对应，也无所谓。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span></span></span><br><span class="line"><span class="function"><span class="title">return</span> <span class="title">a</span>+<span class="title">b</span></span></span><br><span class="line">r=add(b=1,a=2)  #3</span><br></pre></td></tr></table></figure></li></ul></li><li><p>可变长度参数</p><ul><li><p>可变长度参数指：一个形参接收实参的数量是可变的</p></li><li><p>形参前加<strong>一个*</strong>，表示接收多个<strong>位置参数</strong>，并把他们放到一个元组中</p></li><li><p>形参前加<strong>两个*</strong>，表示接收多个<strong>关键参数</strong>，并放到字典中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b,*args,**kwargs)</span>:</span></span><br><span class="line">    print(a,b)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)        </span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>,x=<span class="number">1</span>,y=<span class="number">2</span>,z=<span class="number">3</span>)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">(<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>这里介绍局部变量和全局变量</p><ul><li>在函数中只有引用变量值，而没有赋值的操作，该变量叫<strong>全局变量</strong></li><li>如果在函数中有为变量赋值，则该变量为<strong>局部变量</strong>，除非在操作变量前用<strong>global</strong>进行声明。</li><li>局部变量与全局变量相同，<strong>局部变量会覆盖全局变量</strong>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python之选择、循环结构，函数的定义与使用&quot;&gt;&lt;a href=&quot;#Python之选择、循环结构，函数的定义与使用&quot; class=&quot;headerlink&quot; title=&quot;Python之选择、循环结构，函数的定义与使用&quot;&gt;&lt;/a&gt;Python之选择、循环结构，函数的定义与使用&lt;/h1&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这里介绍python中的选择、循环结构的各种表现形式，以及python特有的语法。简单介绍python中函数的使用，函数参数的各种类型等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之数据类型、运算符和内置函数</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/05/30/Python%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/05/30/Python%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</id>
    <published>2020-05-30T11:39:43.000Z</published>
    <updated>2020-05-30T13:37:13.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文介绍python的基本数据类型、容器类型区别和注意点、运算符的一些注意点，以及常用的内置函数。</p><a id="more"></a><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>这里介绍一下，python中运算符的特殊用法。</p><ul><li>+不仅是加，字符串连接，也是列表，元组的连接</li><li>-减号，可求集合差集</li><li><em>乘号，可使序列元素重复 例如[0]</em>5   [0,0,0,0,0]</li><li>//求商，向下取整  17//4=4，-17//4=-5，结果是小于除法的最大整数。尤其注意负数情况。</li><li>**幂运算，指数可为小数，例如0.5代表开平方根</li><li>and or not 逻辑运算或与非，惰性求值。</li><li>关系运算符【&lt;,&gt;,==,&lt;=,&gt;=,!=】运算优先级小于算数运算符。连续使用具有惰性求值特点。</li><li>字符串，列表进行关系运算符的比较，是每个字符或元素进行比较，惰性求值。</li><li>成员测试运算符in 一个对象是否包含另一个对象。</li><li>集合运算符[&amp;,|,^,-]分别为交集，并集，对称集，差集</li></ul><h1 id="常用内置函数"><a href="#常用内置函数" class="headerlink" title="常用内置函数"></a>常用内置函数</h1><p>python提供了大量内置函数供我们使用，内置函数不需要导入任何模块，可以直接使用。</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li><strong>int(),float(),complex()</strong><ul><li>int()将浮点数转化为整数，或将数字字符串<strong>按照指定进制转化为十进制</strong>。如果不指定进制，则直接转为十进制。int(3.5),int(‘123’),int(‘111’,2)。</li><li>float()将其他数据类型转化为浮点数。</li><li>complex()用来生成复数。complex(3,4)  out:(3+4j),complex(‘3’)  out:(3+0j)</li></ul></li><li><strong>bin(),oct(),hex()</strong>将任意进制整数转化为2,8,16进制数。</li><li><strong>ord(),chr(),str()</strong><ul><li><strong>ord()用于返回字符的unicode编码，chr()用于返回对应unicode编码的字符，两者为逆运算</strong>。</li><li><strong>str()</strong>将任意类型整体转为字符串。</li></ul></li><li><strong>list(),tuple(),dict(),set()</strong>强制转换为列表，元组，字典，集合或者创建空对象。</li><li><strong>eval()</strong>用来计算字符串或字节串的值，也可以用来还原数据的实际类型，例如输入时可以直接进行类型转换。</li></ul><h2 id="最大值、最小值"><a href="#最大值、最小值" class="headerlink" title="最大值、最小值"></a>最大值、最小值</h2><p><strong>max(),min()</strong>用于返回最值，参数key可以指定排序规则。例如：max(data,key=len)返回data中len最大的元素。</p><h2 id="元素求和"><a href="#元素求和" class="headerlink" title="元素求和"></a>元素求和</h2><p><strong>len()</strong>计算序列长度，<strong>sum()</strong>计算序列元素之和，一般要求类型一致。</p><h2 id="排序、逆序"><a href="#排序、逆序" class="headerlink" title="排序、逆序"></a>排序、逆序</h2><ul><li><strong>sorted(data)</strong> 可对列表，元组等对象排序，并返回新对象，支持key指定排序规则，reverse=False为升序True为降序，<strong>默认升序</strong>。</li><li><strong>reversed()</strong>翻转并返回reversed对象，具有惰性求值特点，即只能用一次。</li></ul><h2 id="基本输入输出"><a href="#基本输入输出" class="headerlink" title="基本输入输出"></a>基本输入输出</h2><ul><li><strong>input()</strong>接收用户键盘输入，一律返回字符串。可以配合类型转换函数使用。</li><li><code>print(v1,v2,v3...,sep=&#39; &#39;,end=&#39;\n&#39;)</code>其中v1,v2..为要输出的内容，sep指定用什么分隔，end指定用什么结尾。</li></ul><h2 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h2><p><strong>range(开始，结束，步长)</strong>,左闭右开，惰性求值，可转换为列表，元组或集合</p><h2 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h2><p>用于将多个迭代对象中对应位置上的元素组合在一起，返回一个可迭代的zip对象</p><p>data=zip(‘1234’,[1,2,3,4,5,6])<br>list(data)</p><p>out:[(‘1’,1),(‘2’,2),(‘3’,3),(‘4’,4)]</p><h2 id="map-reduce-filter"><a href="#map-reduce-filter" class="headerlink" title="map(),reduce(),filter()"></a>map(),reduce(),filter()</h2><ul><li>map()将一个可调用对象func依次映射到序列的每个元素上，并返回一个可迭代对象。<ul><li>例如：list(map(str,range(5)))    [‘0’,’1’,’2’,’3’,’4’]</li></ul></li><li><strong>reduce()注意这不是内置函数</strong>！！而是在functools中，用之前需要导入！！   <ul><li><strong>reduce(func,seq[,inital])</strong></li><li>作用：可以将一个接收2个参数的函数以迭代的方式从左到右依次作用到一个序列或可迭代对象上，中间结果参与下一次运算，最后得到一个值。</li><li>例如：seq=range(1,10) print(redece(add,seq))    结果为：45</li></ul></li><li>filter()使用指定函数对序列元素进行过滤。<ul><li>filter(func or None,iterable)</li><li>filter将一个<strong>func</strong>作用于序列上，<strong>返回filter对象，其中包括func返回值为True的元素</strong></li><li>filter将<strong>None</strong>作用于序列上，<strong>返回filter，其中包括原序列中等价为True的元素</strong>。</li></ul></li></ul><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><table><thead><tr><th align="center">对象类型</th><th>类型名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td align="center">数值</td><td>int、float、complex</td><td>8888888、9.8、5+6j</td><td>数值大小没有限制</td></tr><tr><td align="center">字符串</td><td>str</td><td>‘asdasdasd’、r’C:\windows’</td><td>使用单、双、三引号为定界符，前面加r表示不转义</td></tr></tbody></table><h1 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h1><ul><li><p><strong>encode(),decode()</strong></p><ul><li>encode()指定编码格式对字符串编码为字节串，默认UTF-8</li><li>decode()使用指定编码格式对字节串解码为字符串，与上方为逆运算</li><li><strong>注意，编码与解码格式需要一致</strong>。</li></ul></li><li><p><strong>index().rindex(),count()</strong></p><ul><li>index()返回一个字符串在当前字符串中<strong>首次</strong>出现的位置，不存在会抛异常</li><li>rindex()返回一个字符串在当前字符串中<strong>最后一次</strong>出现的位置，不存在会抛异常</li><li>count()返回一个字符串在当前字符串中出现的次数，不存在则返回0</li></ul></li><li><p><strong>replace(),maketrans(),translate()</strong></p><ul><li><p>replace()用来替换字符串中指定字符或字符串的所有重复出现。相当于word里的全部替换，返回新字符串，<strong>不改变原字符串</strong></p></li><li><p>maketrans()用于生成字符映射表，translate()根据映射表中分关系进行映射。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">table=<span class="string">''</span>.maketrans(<span class="number">0123456789</span>,<span class="string">'零一二三四伍陆柒捌玖'</span>)</span><br><span class="line">print(<span class="string">'Tel:30647659'</span>.trans;ate(table))</span><br><span class="line">out:Tel:三零陆四柒陆伍玖</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>ljust(len,填充符),rjust(),center()用于对字符串进行排版，返回指定宽度的新字符串，可使用指定字符进行填充，默认为空格</strong></p></li><li><p><strong>split(),rsplit(),join()</strong></p><ul><li>split()使用指定字符串作为分隔符（默认空格）对原字符串<strong>从左到右</strong>进行分隔，返回分隔后的字符串列表。</li><li>rsplit()也是进行字符串分隔，不过是<strong>从右向左</strong></li><li>split()与rsplit()可用参数maxsplit指定最大分隔次数。 </li><li>join()使用指定字符串作为连接符，对若干字符串进行连接。<ul><li>例如：print(‘,’.join([‘a’,’b’,’c’,’d’]))   输出：a,b,c,d</li></ul></li></ul></li><li><p><strong>lower(),upper(),capitalize(),title(),swapcase()</strong></p><ul><li>lower(),upper()将字符串中英文字符转化为小、大写字母</li><li>capitalize()每个句子的第一个字母大写</li><li>title()每个单词的第一个字母大写</li><li>swapcase()大小写互换</li></ul></li><li><p><strong>startwith(),endswith()判断字符串是否以指定字符或字符串开始或结尾。</strong></p></li></ul><h1 id="容器数据类型"><a href="#容器数据类型" class="headerlink" title="容器数据类型"></a>容器数据类型</h1><p>容器数据类型包括：列表、元组、字典和集合。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><p>[1,2,3,4,5,6]，所有元素放在一对方括号中，相邻元素之间使用逗号分隔。</p></li><li><p>列表中元素的数据类型可以不同。</p></li><li><p>list()可以将其他类似对象转换成列表</p></li><li><p>列表下标访问支持双向索引，范围[-L,L-1],L为长度。正向索引0代表第一个元素，反向索引-1代表最后一个元素。</p></li></ul><h3 id="列表常用方法"><a href="#列表常用方法" class="headerlink" title="列表常用方法"></a>列表常用方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//追加x值list尾部，不影响其他元素，不改变列表在内存的起始地址</span><br><span class="line">list.append(x)</span><br><span class="line">//在index处插入x，该位置之后元素自动向后移动，索引+<span class="number">1</span></span><br><span class="line">list.insert(index.x)</span><br><span class="line">//将列表L追加到list尾部</span><br><span class="line">list.exend(L)</span><br><span class="line">//删除并返回列表list中下标为index的元素，该位置后面元素自动前移，索引<span class="number">-1</span></span><br><span class="line">list.pop([index])</span><br><span class="line">//移除第一个值为x的元素，被删除的元素位置之后所有元素自动<span class="number">-1</span>，不存在则会抛出异常</span><br><span class="line">list.remove(x)</span><br><span class="line">//返回x在list中出现的次数</span><br><span class="line">list.count(x)</span><br><span class="line">//返回第一个值为x的元素索引，没有会抛异常</span><br><span class="line">list.index(x)</span><br><span class="line">//排序 key:排序规则       reverse：<span class="literal">False</span>降序，<span class="literal">True</span>升序,默认升序</span><br><span class="line">    list.sort(key=<span class="literal">None</span>,reserve=<span class="literal">False</span>)</span><br><span class="line">//逆序</span><br><span class="line">list.reverse()</span><br></pre></td></tr></table></figure><p><strong>注意：这里对于列表的增删改，排序等操作，都是在原对象上进行的，没有返回值或返回None！</strong></p><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>例如：<code>data=[num for num in range(20) if num%2==1]</code></p><p>如果包含多个for循环，<strong>越靠前的for循环，越在内部</strong></p><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>[开始:结束:步长]，左闭右开，step默认为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data[:]   //全部元素</span><br><span class="line">data[:<span class="number">3</span>]  //从头到<span class="number">3</span>，即<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">data[<span class="number">3</span>:]  //从<span class="number">3</span>到最后</span><br><span class="line">data[::<span class="number">3</span>] //每三个元素取一个</span><br><span class="line">data[<span class="number">-3</span>:] //最后三个 <span class="number">-3</span>,<span class="number">-2</span>,<span class="number">-1</span></span><br><span class="line">data[:<span class="number">-5</span>] //除了后五个以外所有元素</span><br></pre></td></tr></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组跟列表类似，可看作轻量级列表。</p><h3 id="元组和列表的区别"><a href="#元组和列表的区别" class="headerlink" title="元组和列表的区别"></a>元组和列表的区别</h3><ul><li>元组不可变，不能对元组的元素进行增删改</li><li>元组的访问速度更快，开销更小。</li><li>元组可作为字典的键或集合的元素。</li></ul><p><strong>生成器表达式：</strong></p><p><code>gen=(2**i for i in range*(8))</code></p><p>tuple(gen) 转换为元组</p><p>生成器都满足惰性求值，可以逐个访问，但不可后退</p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>{</p><p>key1:value1,</p><p>key2:value2….</p><p>}</p><p>创建字典</p><p><code>data=dict(name=&#39;张三&#39;,age=18)</code></p><p><code>data=dict.formkeys([1,2,3,4])</code> //指定键，值为空</p><p><code>data={ch:ord(ch) for ch in &#39;abcd&#39;}</code>  //字典推导式</p><h3 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h3><p>get()方法用于获取指定键对应的值，如果不存在get()方法会返回空值或指定的值<br><strong>get(key,’指定值’)</strong></p><h3 id="字典的修改，删除与添加"><a href="#字典的修改，删除与添加" class="headerlink" title="字典的修改，删除与添加"></a>字典的修改，删除与添加</h3><ol><li>以指定键为下标为字典元素赋值，若该键存在，则修改；若不存在，则新增。</li><li>update()将另一字典一次性添加到当前字典，若键重复，则根据后者更新。</li><li>pop()删除指定键的元素，返回对应的值。popitem()删除并返回包含两个元素的元组，分别为key,value</li><li>del sock[‘key’]删除指定键对应的元素</li></ol><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>无序、可变容器对象，所有元素放在一对大括号中，逗号分隔，<strong>元素唯一，不能重复</strong>。</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>add(),新增元素，已存在则忽略，不抛异常。</li><li>update()合并另一个集合的元素到当前集合，自动去重。</li><li>pop()随机删除并饭后集合中的一个元素，集合为空则会抛异常。</li><li>remove()删除指定元素，不存在则会抛异常</li><li>discard()删除指定元素，不存在则忽略该操作。</li></ul><h2 id="空对象创建注意："><a href="#空对象创建注意：" class="headerlink" title="空对象创建注意："></a>空对象创建注意：</h2><p>空列表：s=[]或s=list()</p><p>空元组：t=[]或t=tuple()</p><p>空字典：s={}或s=dict()</p><p>空集合：因为集合与字典都是包含在{}内，空字典可以用{}声明，而空集合不行，<strong>空集合只能用s=set()</strong></p><h2 id="包含列表的元组"><a href="#包含列表的元组" class="headerlink" title="包含列表的元组"></a>包含列表的元组</h2><p><strong>元组是不可变的，但列表是可变的，如果一个元组中有列表，那么这个列表改变，是不是这个元组也改变了？</strong></p><p>其实没有改变。Python中变量不直接存储值，而是存储值的内存地址或引用。<br>元组中有列表，则存储的是该列表的地址或引用。列表中有值，也是存储的该值的地址或引用。列表改变，改变的是列表中值的地址，而列表的地址并没有改变，所以元组中存的内容也就没有变化。</p><p><strong><em>注意：元组可以作为字典的键或者集合的元素，但是包含列表的元组不可以！！！</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文介绍python的基本数据类型、容器类型区别和注意点、运算符的一些注意点，以及常用的内置函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架整合</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/05/25/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/05/25/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</id>
    <published>2020-05-25T12:44:25.000Z</published>
    <updated>2020-05-29T03:33:20.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这里介绍ssm框架的整合，使用注解+xml的方式。</p><a id="more"></a><h1 id="整合思路"><a href="#整合思路" class="headerlink" title="整合思路"></a>整合思路</h1><p><img src="https://leecode1024.oss-cn-qingdao.aliyuncs.com/ssm/ssm%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.png" alt="ssm框架整合"></p><h2 id="各层的作用"><a href="#各层的作用" class="headerlink" title="各层的作用"></a>各层的作用</h2><p>SpringMVC：实现MVC设计模式。</p><p>Mybatis：用于和数据库进行交互。</p><p>Spring 将各层进行整合</p><ul><li>通过Spring管理持久层的mapper(相当于dao接口)。</li><li>通过Spring管理业务层service,service可以调用mapper接口，spring进行事务控制。</li><li>通过Spring管理表现层Handler，Handler可以调用service接口。</li><li>mapper，service，Handler都是JavaBean。</li></ul><h2 id="整合步骤"><a href="#整合步骤" class="headerlink" title="整合步骤"></a>整合步骤</h2><ul><li><p>第一步：整合dao层</p><p>mybatis和spring整合，通过spring管理mapper接口。<br>使用mapper的扫描器自动扫描mapper接口在spring中进行注册。</p></li><li><p>第二步：整合service层</p><p>通过spring管理service接口。<br>使用配置方式将service接口配置在spring配置文件中。<br>实现事务控制</p></li><li><p>第三步：整合springmvc</p><p>由于springmvc是spring的模块，不需要整合。</p></li></ul><h1 id="整合dao"><a href="#整合dao" class="headerlink" title="整合dao"></a>整合dao</h1><h2 id="1-全局配置文件sqlMapConfig-xml"><a href="#1-全局配置文件sqlMapConfig-xml" class="headerlink" title="1.全局配置文件sqlMapConfig.xml"></a>1.全局配置文件sqlMapConfig.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 全局setting，根据需要加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 批量配置别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.dzu.po"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里是mybatis的分页插件pagehelper，如果用了在配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分页参数合理化，负数或超出最大值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"reasonable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用自动扫描器时，mapper.xml文件如果和mapper.java接口在一个目录则此处不用定义mappers --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.dzu.mapper"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-Spring与mybatis整合配置applicationContext-dao-xml"><a href="#2-Spring与mybatis整合配置applicationContext-dao-xml" class="headerlink" title="2.Spring与mybatis整合配置applicationContext-dao.xml"></a>2.Spring与mybatis整合配置applicationContext-dao.xml</h2><p>配置：数据源、SQLSessionFactory、mapper扫描器</p><h3 id="首先配置db-properties"><a href="#首先配置db-properties" class="headerlink" title="首先配置db.properties"></a>首先配置db.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">账号</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">密码</span></span><br></pre></td></tr></table></figure><h3 id="配置applicationContext-dao-xml"><a href="#配置applicationContext-dao-xml" class="headerlink" title="配置applicationContext-dao.xml"></a>配置applicationContext-dao.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dzu"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让spring扫描除controller以外的其他组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载mybatis的全局配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis/sqlMapConfig.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置可以批量操作的sqlSession --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSerssion"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"executorType"</span> <span class="attr">value</span>=<span class="string">"BATCH"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mapper扫描器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.dzu.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="整合service"><a href="#整合service" class="headerlink" title="整合service"></a>整合service</h1><h3 id="1-在spring容器中配置service"><a href="#1-在spring容器中配置service" class="headerlink" title="1.在spring容器中配置service"></a>1.在spring容器中配置service</h3><p>创建applicationContext-dao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--如果使用的是xml方式配置，则这里写service对应的bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--例如--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"itemsService"</span> <span class="attr">class</span>=<span class="string">"com.dzu.service.impl.ItemsService"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果使用注解的方式配置service，则在对应service实现类上放加 @Service--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-事务控制"><a href="#1-事务控制" class="headerlink" title="1.事务控制"></a>1.事务控制</h3><p>声明式事务配置applicationContext-transaction.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器</span></span><br><span class="line"><span class="comment">对mybatis操作数据库事务控制，spring使用jdbc的事务控制类</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 </span></span><br><span class="line"><span class="comment">dataSource在applicationContext-dao.xml中配置了</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 传播行为 </span></span><br><span class="line"><span class="comment">name是以什么开头</span></span><br><span class="line"><span class="comment">REQUIRED是需要配置</span></span><br><span class="line"><span class="comment">SUPPORTS是支持，没有事务就算了</span></span><br><span class="line"><span class="comment">read-only="true" 只读</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- aop来调用通知 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.dzu.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="整合springmvc"><a href="#整合springmvc" class="headerlink" title="整合springmvc"></a>整合springmvc</h1><h2 id="1-springmvc-xml"><a href="#1-springmvc-xml" class="headerlink" title="1.springmvc.xml"></a>1.springmvc.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将springmvc不能处理的资源交给tomcat --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描controller注解,多个包中间使用半角逗号分隔 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dzu.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ViewResolver视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置上传文件的最大尺寸为...MB --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>52428800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-web-xml"><a href="#2-web-xml" class="headerlink" title="2.web.xml"></a>2.web.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>pet_ssm<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 加载spring容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/classes/spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span>  </span><br><span class="line">   </span><br><span class="line">  <span class="comment">&lt;!-- springMVC前端控制器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- contextConfigLocation配置springmvc需要加载的配置文件（配置处理器映射器、适配器等等）</span></span><br><span class="line"><span class="comment">  如果不配置contextConfigLocation,默认加载的诗/WEB-INF/springmvc-servlet.xml</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/classes/spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  第一种：*.action结尾  由DispatcherServlet进行解析</span></span><br><span class="line"><span class="comment">  第二种：/，所有访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 字符编码过滤器，一定要放在所有过滤器之前 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- Rust风格的URI，将页面普通的post请求转为指定的delete或者put请求 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span> </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="整合测试"><a href="#整合测试" class="headerlink" title="整合测试"></a>整合测试</h1><h2 id="ssm框架流程测试"><a href="#ssm框架流程测试" class="headerlink" title="ssm框架流程测试"></a>ssm框架流程测试</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>​    <img src="https://leecode1024.oss-cn-qingdao.aliyuncs.com/ssm/ssm%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E7%A4%BA%E4%BE%8B.png" alt="ssm项目结构"></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><h4 id="po类"><a href="#po类" class="headerlink" title="po类"></a>po类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.po;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Float money;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Float <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> money;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.money = money;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", money="</span> + money + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, Float money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.money = money;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mapper接口以及mapper-xml"><a href="#mapper接口以及mapper-xml" class="headerlink" title="mapper接口以及mapper.xml"></a>mapper接口以及mapper.xml</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzu.po.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dzu.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>  <span class="attr">resultType</span>=<span class="string">"com.dzu.po.User"</span>&gt;</span></span><br><span class="line">select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.dzu.po.User"</span>&gt;</span></span><br><span class="line">  update user</span><br><span class="line">  <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null"</span>&gt;</span></span><br><span class="line">  name=#&#123;name&#125;,</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"money!=null"</span>&gt;</span></span><br><span class="line">  money=#&#123;money&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="service接口及其实现类"><a href="#service接口及其实现类" class="headerlink" title="service接口及其实现类"></a>service接口及其实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzu.po.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzu.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.dzu.po.User;</span><br><span class="line"><span class="keyword">import</span> com.dzu.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">User user = userMapper.findById(id);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzu.po.User;</span><br><span class="line"><span class="keyword">import</span> com.dzu.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/Demo1/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">Demo1</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id) </span>&#123;</span><br><span class="line">User user = userService.findById(id);</span><br><span class="line">System.out.println(user.toString());</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="jsp页面"><a href="#jsp页面" class="headerlink" title="jsp页面"></a>jsp页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">    &lt;%<span class="meta">@taglib</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;title&gt;测试&lt;/title&gt;</span><br><span class="line">&lt;%</span><br><span class="line">pageContext.setAttribute(<span class="string">"APP_PATH"</span>, request.getContextPath());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="$&#123;APP_PATH &#125;/Demo1/1"&gt;demo01&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="https://leecode1024.oss-cn-qingdao.aliyuncs.com/ssm/demo01%E7%BB%93%E6%9E%9C.png" alt=""></p><p>访问项目，点击demo01超链接,控制台输出结果</p><p><img src="https://leecode1024.oss-cn-qingdao.aliyuncs.com/ssm/demo01%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA.png" alt=""></p><p>页面跳转到hello.jsp。由此说明ssm框架整合成功。</p><h2 id="事务测试"><a href="#事务测试" class="headerlink" title="事务测试"></a>事务测试</h2><p>controller中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/Demo2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">Demo02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User u1 = <span class="keyword">new</span> User();</span><br><span class="line">u1.setId(<span class="number">1</span>);</span><br><span class="line">u1.setMoney(<span class="number">50.0f</span>);</span><br><span class="line">User u2 = <span class="keyword">new</span> User();</span><br><span class="line">u2.setId(<span class="number">2</span>);</span><br><span class="line">u2.setMoney(-<span class="number">50.0f</span>);</span><br><span class="line"></span><br><span class="line">userService.updateZhuanZhang(u1, u2);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service实现类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateZhuanZhang</span><span class="params">(User u1, User u2)</span> </span>&#123;</span><br><span class="line">userMapper.updateMoney(u1);</span><br><span class="line">userMapper.updateMoney(u2);</span><br><span class="line">System.out.println(<span class="string">"update后"</span>);</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateMoney"</span> <span class="attr">parameterType</span>=<span class="string">"com.dzu.po.User"</span>&gt;</span></span><br><span class="line">  update user</span><br><span class="line">  <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"money!=null"</span>&gt;</span></span><br><span class="line">  money=money+#&#123;money&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">    &lt;%<span class="meta">@taglib</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;title&gt;测试&lt;/title&gt;</span><br><span class="line">&lt;%</span><br><span class="line">pageContext.setAttribute(<span class="string">"APP_PATH"</span>, request.getContextPath());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="$&#123;APP_PATH &#125;/Demo1/1"&gt;demo01&lt;/a&gt;</span><br><span class="line">&lt;a href="$&#123;APP_PATH &#125;/Demo2"&gt;事务测试&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>结果为程序抛异常，但数据库未改变。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SSM框架整合&quot;&gt;&lt;a href=&quot;#SSM框架整合&quot; class=&quot;headerlink&quot; title=&quot;SSM框架整合&quot;&gt;&lt;/a&gt;SSM框架整合&lt;/h1&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这里介绍ssm框架的整合，使用注解+xml的方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaEE" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/javaEE/"/>
    
      <category term="ssm框架" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/javaEE/ssm%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="javaEE" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/javaEE/"/>
    
      <category term="ssm框架" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/ssm%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>jQuery+Ajax</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/05/22/jQuery-Ajax/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/05/22/jQuery-Ajax/</id>
    <published>2020-05-22T13:25:16.000Z</published>
    <updated>2020-05-22T13:33:39.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要介绍jQuery的基本用法，包括选择器、属性和属性节点、事件以及Ajax的jQuery封装。具体细节还请查阅jQuery帮助手册<a href="http://hemin.cn/jq/" target="_blank" rel="noopener">http://hemin.cn/jq/</a></p><a id="more"></a><h1 id="jquery到底是什么"><a href="#jquery到底是什么" class="headerlink" title="jquery到底是什么"></a>jquery到底是什么</h1><p>jQuery的官网 <a href="http://jquery.com/" target="_blank" rel="noopener">http://jquery.com/</a><br>jQuery就是一个js库，使用jQuery的话，会比使用JavaScript更简单。</p><h1 id="jquery的版本问题"><a href="#jquery的版本问题" class="headerlink" title="jquery的版本问题"></a>jquery的版本问题</h1><p>大版本分类：</p><ul><li>1.x版本：能够兼容IE678浏览器</li><li>2.x版本：不能兼容IE678浏览器</li><li>3.x版本：不能兼容IE678浏览器，更加的精简（在国内不流行，因为国内使用jQuery的主要目的就是兼容IE678）</li></ul><p>关于压缩版和未压缩版：</p><ul><li>jquery-1.12.4.min.js:压缩版本，适用于生产环境，因为文件比较小，去除了注释、换行、空格等东西，但是基本没有颗阅读性。</li><li>jquery-1.12.4.js:未压缩版本，适用于学习与开发环境，源码清晰，易阅读。</li></ul><h1 id="jquery的入口函数"><a href="#jquery的入口函数" class="headerlink" title="jquery的入口函数"></a>jquery的入口函数</h1><p>使用jQuery的三个步骤：</p><ol><li>引入jQuery文件</li><li>入口函数</li><li>功能实现</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种写法</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>jQuery入口函数与js入口函数的对比：</p><ol><li>JavaScript的入口函数要等到页面中所有资源（包括图片、文件）加载完成才开始执行。</li><li>jQuery的入口函数只会等待文档树加载完成就开始执行，并不会等待图片、文件的加载。</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$是一个函数</span><br><span class="line">参数传递不同,效果也不一样.</span><br><span class="line"> <span class="number">4.1</span> 如果参数传递的是一个匿名函数-入口函数</span><br><span class="line">  <span class="constructor">$(<span class="params">function</span>()</span>&#123;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="number">4.2</span> 如果参数传递的是一个字符串-选择器/创建一个标签</span><br><span class="line"> <span class="constructor">$('#<span class="params">one</span>')</span>;</span><br><span class="line"> <span class="constructor">$('&lt;<span class="params">div</span>&gt;啦啦,我是一个<span class="params">div</span>&lt;<span class="operator">/</span><span class="params">div</span>&gt;')</span>;</span><br><span class="line"></span><br><span class="line"> <span class="number">4.3</span> 如果参数是一个dom对象,那他就会把dom对象转换成jQuery对象.</span><br><span class="line"> <span class="constructor">$(<span class="params">dom</span>对象)</span>;</span><br></pre></td></tr></table></figure><h1 id="jq对象和dom对象-重要"><a href="#jq对象和dom对象-重要" class="headerlink" title="jq对象和dom对象(重要)"></a>jq对象和dom对象(重要)</h1><table><thead><tr><th>DOM对象：使用JavaScript中的方法获取页面中的元素返回的对象就是dom对象。</th></tr></thead><tbody><tr><td>jQuery对象：jquery对象就是使用jquery的方法获取页面中的元素返回的对象就是jQuery对象。</td></tr><tr><td>jQuery对象其实就是DOM对象的包装集包装了DOM对象的集合（伪数组）</td></tr><tr><td>DOM对象与jQuery对象的方法不能混用。</td></tr></tbody></table><p><strong>DOM对象转换成jQuery对象：【联想记忆：花钱】</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $obj = $(domObj);</span><br></pre></td></tr></table></figure><p><strong>jQuery对象转换成DOM对象：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $li = $(<span class="string">"li"</span>);</span><br><span class="line"><span class="comment">//第一种方法（推荐使用）</span></span><br><span class="line">$li[<span class="number">0</span>]</span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line">$li.get(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="jquery选择器"><a href="#jquery选择器" class="headerlink" title="jquery选择器"></a>jquery选择器</h1><h2 id="什么是jQuery选择器"><a href="#什么是jQuery选择器" class="headerlink" title="什么是jQuery选择器"></a>什么是jQuery选择器</h2><ul><li>jQuery选择器是jQuery为我们提供的一组方法，让我们更加<strong>方便的获取到页面中的元素</strong>。<br>注意：jQuery选择器返回的是jQuery对象。</li><li>jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多扩展性的选择器。<br>【查看jQuery文档】</li><li>jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。<br>所以我们平时真正能用到的只是少数的最常用的选择器。</li></ul><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(“#id”);</td><td>获取指定ID的元素</td></tr><tr><td>类选择器</td><td>$(“.class”);</td><td>获取同一类class的元素</td></tr><tr><td>标签选择器</td><td>$(“div”);</td><td>获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(“div,p,li”);</td><td>使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>交集选择器</td><td>$(“div.redClass”);</td><td>获取class为redClass的div元素</td></tr></tbody></table><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(“ul&gt;li”);</td><td>使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”);</td><td>使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr></tbody></table><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:eq（index）</td><td>$(“li:eq(2)”).css(“color”, ”red”);</td><td>获取到的li元素中，选择索引号为2的元素，索引号index从0开始。</td></tr><tr><td>:odd</td><td>$(“li:odd”).css(“color”, ”red”);</td><td>获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(“li:even”).css(“color”, ”red”);</td><td>获取到的li元素中，选择索引号为偶数的元素</td></tr></tbody></table><p>总结：<strong>这类选择器都带冒号</strong></p><h3 id="筛选选择器-方法"><a href="#筛选选择器-方法" class="headerlink" title="筛选选择器(方法)"></a>筛选选择器(方法)</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>$(“ul”).children(“li”)</td><td>相当于$(“ul&gt;li”)，子类选择器</td></tr><tr><td>find(selector)</td><td>$(“ul”).find(“li”);</td><td>相当于$(“ul li”),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(“#first”).siblings(“li”);</td><td>查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>$(“#first”).parent();</td><td>查找父亲</td></tr><tr><td>eq(index)</td><td>$(“li”).eq(2);</td><td>相当于$(“li:eq(2)”),index从0开始</td></tr><tr><td>next()</td><td>$(“li”).next()</td><td>找下一个兄弟</td></tr><tr><td>prev()</td><td>$(“li”).prev()</td><td>找上一次兄弟</td></tr></tbody></table><p>总结：筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法</p><h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><p><strong>遍历</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历谁就返回谁</span></span><br><span class="line">$.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params">index,value</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//返回空数组，也可以对原数组进行操作后返回新数组</span></span><br><span class="line">$.map(arr,<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//去除左右空格</span></span><br><span class="line">$.trim()</span><br></pre></td></tr></table></figure><h1 id="属性和属性节点"><a href="#属性和属性节点" class="headerlink" title="属性和属性节点"></a>属性和属性节点</h1><ul><li><p>属性：对象身上保存的变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">box</span>(<span class="params"></span>)</span>&#123;&#125;<span class="comment">//新建一个类</span></span><br><span class="line">    <span class="keyword">var</span> p=<span class="keyword">new</span> box(); <span class="comment">//new一个对象</span></span><br><span class="line">    p.name=<span class="string">'aa'</span>; <span class="comment">//给对象的一个属性赋值</span></span><br><span class="line">    p[<span class="string">'name'</span>]=<span class="string">'aa'</span>  <span class="comment">//.可以用[]代替</span></span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>属性节点：html标签里的就是,例如class就是属性节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'attr'</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var span=document.getElementByTagName('span')[0]  /</span><span class="regexp">/获取span对象</span></span><br><span class="line"><span class="regexp">span.setAttribute('name','aaa')  /</span><span class="regexp">/给span的属性节点赋值</span></span><br><span class="line"><span class="regexp">console。log(span.getAttribute('name'))/</span><span class="regexp">/获取属性节点的值</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>attr(name<span class="pattern-match">|pro|key,<span class="keyword">val</span>|fn)</span></span><br><span class="line"><span class="pattern-match">作用：获取或者设置属性节点的值</span></span><br><span class="line"><span class="pattern-match">传一个参数，表示获取值</span></span><br><span class="line"><span class="pattern-match">传两个参数，表示设置值</span></span><br><span class="line"><span class="pattern-match">注意：</span></span><br><span class="line"><span class="pattern-match">如果是获取：无论找到多少个元素，都只会返回第一个元素指定的元素节点的值</span></span><br><span class="line"><span class="pattern-match">如果是设置：找到多少个元素就会设置多少个元素</span></span><br><span class="line"><span class="pattern-match">如果是设置：若设置的属性不存在，那么系统就会自动新增</span></span><br><span class="line"><span class="pattern-match">2.remove<span class="constructor">Attr(<span class="params">name</span>)</span></span></span><br><span class="line"><span class="pattern-match">作用：删除属性节点</span></span><br><span class="line"><span class="pattern-match">注意：</span></span><br><span class="line"><span class="pattern-match">删除所有符合条件的元素的属性节点</span></span><br><span class="line"><span class="pattern-match">若删除多个：remove<span class="constructor">Attr('<span class="params">name1</span> , <span class="params">name2</span>')</span></span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">3.prop(name|pro|key,<span class="keyword">val</span>|fn)</span></span><br><span class="line"><span class="pattern-match">用法与attr一样</span></span><br><span class="line"><span class="pattern-match">4.remove<span class="constructor">Prop(<span class="params">name</span>)</span></span></span><br><span class="line"><span class="pattern-match">用法与remove<span class="constructor">Attr</span>一样</span></span><br><span class="line"><span class="pattern-match">注意点：</span></span><br><span class="line"><span class="pattern-match">prop方法不仅能操作属性，它还能操作属性节点</span></span><br><span class="line"><span class="pattern-match">官方推荐在操作属性节点是，具有<span class="literal">true</span>和<span class="literal">false</span>两个属性的属性节点，如check,selected或者disabled使用prop()，其他的使用attr()</span></span><br></pre></td></tr></table></figure><h2 id="CSS类"><a href="#CSS类" class="headerlink" title="CSS类"></a>CSS类</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>add<span class="constructor">Class(<span class="params">class</span>|<span class="params">fn</span>)</span></span><br><span class="line">添加一个类，不会覆盖原有，只会增加，如果添加多个用逗号隔开add<span class="constructor">Class('<span class="params">class1</span>,<span class="params">class2</span>')</span></span><br><span class="line"><span class="number">2.</span>remove<span class="constructor">Class([<span class="params">class</span>|<span class="params">fn</span>\])</span></span><br><span class="line">删除一个类，若删除多个则用逗号隔开</span><br><span class="line"><span class="number">3.</span>toggle<span class="constructor">Class(<span class="params">class</span>|<span class="params">fn</span>[,<span class="params">sw</span>\])</span></span><br><span class="line">切换类，即如果有我就删除，如果没有我就增加</span><br></pre></td></tr></table></figure><h2 id="文本值相关"><a href="#文本值相关" class="headerlink" title="文本值相关"></a>文本值相关</h2><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>html([<span class="keyword">val</span>|<span class="keyword">fn</span>])</span><br><span class="line">和原生<span class="type">JS</span>的innerHTML一模一样</span><br><span class="line">设置：obj.html(html代码)   获取：obj.html<span class="literal">()</span></span><br><span class="line"><span class="number">2.</span>text([<span class="keyword">val</span>|<span class="keyword">fn</span>])</span><br><span class="line">和原生<span class="type">JS</span>中的innerText一模一样</span><br><span class="line">如果这里设置的text内容为html代码，则会是文本，而不会被解析成html代码，设置html代码用上面方法。</span><br><span class="line"><span class="number">3.</span><span class="keyword">val</span>([<span class="keyword">val</span>|<span class="keyword">fn</span>|arr])</span><br><span class="line">设置/获取value的值</span><br></pre></td></tr></table></figure><h1 id="css"><a href="#css" class="headerlink" title="css"></a>css</h1><h2 id="获取、设置css样式"><a href="#获取、设置css样式" class="headerlink" title="获取、设置css样式"></a>获取、设置css样式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>逐个设置</span><br><span class="line">    $(<span class="string">"div"</span>).css(<span class="string">"width"</span>,<span class="string">"100px"</span>);</span><br><span class="line">    $(<span class="string">"div"</span>).css(<span class="string">"height"</span>,<span class="string">"100px"</span>);</span><br><span class="line">    $(<span class="string">"div"</span>).css(<span class="string">"background"</span>,<span class="string">"red"</span>);</span><br><span class="line"><span class="number">2.</span>链式设置</span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"width"</span>,<span class="string">"100px"</span>).css(<span class="string">"height"</span>,<span class="string">"100px"</span>).css(<span class="string">"background"</span>,<span class="string">"red"</span>);</span><br><span class="line"><span class="number">3.</span>批量设置</span><br><span class="line">$(<span class="string">"div"</span>).css(&#123;</span><br><span class="line">        width : <span class="string">"100px"</span>,</span><br><span class="line">        height : <span class="string">"100px"</span>,</span><br><span class="line">        background : <span class="string">"red"</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="number">4.</span>获取css样式的值</span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"background"</span>);</span><br></pre></td></tr></table></figure><h2 id="位置scrollTop"><a href="#位置scrollTop" class="headerlink" title="位置scrollTop()"></a>位置scrollTop()</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>scroll<span class="constructor">Top()</span></span><br><span class="line">获取滚动的偏移位：<span class="constructor">$(.<span class="params">scroll</span>)</span>.scroll<span class="constructor">Top()</span></span><br><span class="line">设置偏移位：<span class="constructor">$(.<span class="params">scroll</span>)</span>.scroll<span class="constructor">Top(300)</span>，这里的效果是滚动条移到<span class="number">300</span>px处</span><br><span class="line"></span><br><span class="line">如果获取或设置整个网页的滚动条,可以根据html标签或body标签</span><br><span class="line">注意：IE浏览器用body,其他浏览器用html,</span><br><span class="line">所以为了兼容IE浏览器，写法如下：</span><br><span class="line">获取：<span class="constructor">$(<span class="string">"body"</span>)</span>.scroll<span class="constructor">Top()</span>+$.(<span class="string">"html"</span>).scroll<span class="constructor">Top()</span>;</span><br><span class="line">设置：<span class="constructor">$(<span class="string">"html,body"</span>)</span>.scroll<span class="constructor">Top(300)</span></span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>eventName(fn)</span><br><span class="line">事件名(回调方法)</span><br><span class="line">编码效率高/部分时间JQuery没有实现，所以不能添加</span><br><span class="line"><span class="number">2.</span><span class="keyword">on</span><span class="params">(eventName,fn)</span></span><br><span class="line">编码效率低，所有js时间都可以添加</span><br><span class="line">注意点：</span><br><span class="line">可以添加多个相同或者不同类型的时间，不会覆盖</span><br></pre></td></tr></table></figure><h2 id="事件解绑"><a href="#事件解绑" class="headerlink" title="事件解绑"></a>事件解绑</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="keyword">off</span>()</span><br><span class="line">用法：$(<span class="string">"button"</span>).<span class="keyword">off</span>()  不传参数，会移除所有事件</span><br><span class="line"> $(<span class="string">"button"</span>).<span class="keyword">off</span>(<span class="string">"click"</span>)  传一个参数，会移除所有指定类型的事件，即所有的click类型事件</span><br><span class="line">     $(<span class="string">"button"</span>).<span class="keyword">off</span>(<span class="string">"click"</span>,test1) 传两个参数，会移除所有指定类型的指定事件，即click类型的test1事件</span><br></pre></td></tr></table></figure><h2 id="事件冒泡和默认行为"><a href="#事件冒泡和默认行为" class="headerlink" title="事件冒泡和默认行为"></a>事件冒泡和默认行为</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>什么是事件冒泡？</span><br><span class="line">假设有一个div <span class="number">100</span>px*<span class="number">100</span>px,它里面有一个小div <span class="number">50</span>*<span class="number">50</span>,大的为Father，小的为son，并且他们身上都绑定了点击事件，由于son在Father身上，如果我点击son，会触发son的点击事件，并且触发father的点击事件，这就是事件冒泡。</span><br><span class="line"><span class="number">2.</span>如何阻止事件冒泡？</span><br><span class="line"><span class="number">1.</span>在son的点击事件回调函数中加上<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">2.</span>在最后加event.stopPropagation();</span><br><span class="line"><span class="number">3.</span>什么是默认行为？</span><br><span class="line">例如：超链接，submit按钮等，会跳转到某个页面，或者将表单提交到服务器，由于我们是用ajax来进行提交，ajax会调用一个方法，当方法执行完后，由于有默认行为，超链接会跳转，submit会提交表单，这些操作还是会做。</span><br><span class="line"><span class="number">4.</span>如何取消默认行为？</span><br><span class="line"><span class="number">1.</span><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">2.</span>event.preventDefault();</span><br></pre></td></tr></table></figure><h2 id="事件自动触发"><a href="#事件自动触发" class="headerlink" title="事件自动触发"></a>事件自动触发</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>trigger()</span><br><span class="line">$(<span class="string">"son"</span>).trigger(eventName);</span><br><span class="line"><span class="number">2.</span>triggerHandler()</span><br><span class="line">$(<span class="string">"son"</span>).triggerHandler(eventName);</span><br><span class="line">注意点：</span><br><span class="line">trigger会自动触发事件，会触发事件冒泡，会触发默认行为</span><br><span class="line">triggerHandler会自动触发事件，不会触发事件冒泡，不会触发默认行为</span><br><span class="line">小小面试题：</span><br><span class="line">&lt;a href=<span class="string">"www.baidu.com"</span>&gt;跳转&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">$("a").click(function)&#123;</span></span><br><span class="line"><span class="regexp">alert("a")</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">$("a").trigger("click");</span></span><br><span class="line"><span class="regexp">这段代码用trigger自动触发a标签的点击事件，但是这里不会触发默认行为，页面不会跳转。</span></span><br><span class="line"><span class="regexp">如果我想触发a的事件并且触发默认行为该怎么做呢？</span></span><br><span class="line"><span class="regexp">用span包装一下，上方a标签变为&lt;a href="www.baidu.com"&gt;&lt;span&gt;跳转&lt;/</span>span&gt;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">这样我触发span的事件</span></span><br><span class="line"><span class="regexp">$("span").click(function)&#123;</span></span><br><span class="line"><span class="regexp">alert("a")</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">$("span").trigger("click");</span></span><br><span class="line"><span class="regexp">这样就会触发a的默认行为，这样相当于一个事件冒泡了。</span></span><br></pre></td></tr></table></figure><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">要满足两个条件</span><br><span class="line"><span class="number">1.</span>事件必须是通过on绑定</span><br><span class="line"><span class="number">2.</span>事件必须通过trigger或triggerHandler来触发</span><br><span class="line">例如：</span><br><span class="line">$(<span class="string">".son"</span>).on(<span class="string">"myClick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"son"</span>)</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">".son"</span>).trigger(<span class="string">"myClick"</span>);</span><br></pre></td></tr></table></figure><h2 id="事件的命名空间"><a href="#事件的命名空间" class="headerlink" title="事件的命名空间"></a>事件的命名空间</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">想要事件的命名空间有效，必须满足两个条件</span><br><span class="line"><span class="number">1.</span>事件是通过on来绑定的</span><br><span class="line"><span class="number">2.</span>通过trigger或triggerHandler来触发</span><br><span class="line">例如：</span><br><span class="line">$(<span class="string">".son"</span>).on(<span class="string">"click.zs"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"click1"</span>);</span><br><span class="line">);</span><br><span class="line">$(<span class="string">".son"</span>).on(<span class="string">"click.ls"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"click2"</span>);</span><br><span class="line">);</span><br><span class="line">$(<span class="string">".son"</span>).trigger(<span class="string">"click.ls"</span>);</span><br></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">案例：</span><br><span class="line">$(<span class="string">"ul&gt;li"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="keyword">this</span>).html())</span><br><span class="line">&#125;);</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;我是第<span class="number">1</span>个li&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li&gt;我是第2个li&lt;/</span>li&gt;</span><br><span class="line">&lt;li&gt;我是第<span class="number">3</span>个li&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">  上面代码给所有ul下的li标签添加量点击事件，一点li就会打印li里面的内容,这时如果我加一个按钮，这个按钮的作用是一点就增加一个&lt;li&gt;新增li&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">此时点击新增的li并没有加上点击事件。因为上面代码时Jquery入口函数，它会在dom元素都解析完执行，这时并没有新增li，所以加不上事件。</span></span><br><span class="line"><span class="regexp">如果要加上事件就可以使用委托：</span></span><br><span class="line"><span class="regexp">    $("ul").delegate("li","click",function()&#123;</span></span><br><span class="line"><span class="regexp">        console.log($(this).html())</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  这里委托ul给li添加点击事件，当点击li时，打印自己的内容。</span></span><br><span class="line"><span class="regexp">因为这里的ul在dom元素全部解析完后是已经存在的，所有他可以绑定事件（被委托）</span></span><br><span class="line"><span class="regexp">  为什么打印this，而我给ul绑定的事件，最后控制台却打印的li呢？</span></span><br><span class="line"><span class="regexp">因为li没有click，所有由于事件冒泡，回调用ul的click，而这时的this确是li</span></span><br></pre></td></tr></table></figure><h2 id="鼠标移入移出事件"><a href="#鼠标移入移出事件" class="headerlink" title="鼠标移入移出事件"></a>鼠标移入移出事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">情景：父div是<span class="number">100</span>*<span class="number">100</span>，子div是<span class="number">50</span>*<span class="number">50</span>，子在父上方，即父div被子div覆盖了一部分</span><br><span class="line"><span class="number">1.</span>mouseover()移入  mouseout()移出</span><br><span class="line">这两个事件，移入父元素时，调用父元素的移入，但是我在移入或移出子元素时，也会调用父元素的方法。但是此时鼠标仍在父元素内，并没有移入或移出父元素。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>mouseenter()移入  mouseleave()移出  推荐使用</span><br><span class="line">这时在移入或移出子元素时就不会调用父元素的事件了。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>hover()  移入移出</span><br><span class="line">接收两个参数：</span><br><span class="line">$(<span class="string">".father"</span>).over(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//移入方法&#125;,function()&#123;//移出方法&#125;);</span></span><br><span class="line">    接收一个参数：</span><br><span class="line">    $(<span class="string">".father"</span>).over(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//移入移出方法&#125;);</span></span><br></pre></td></tr></table></figure><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="ajax的实现步骤"><a href="#ajax的实现步骤" class="headerlink" title="ajax的实现步骤"></a>ajax的实现步骤</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>创建Ajax对象</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="number">2.</span>告诉Ajax请求地址以及请求方式</span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'http://www.baidu.com'</span>);</span><br><span class="line"><span class="number">3.</span>发送请求</span><br><span class="line">xhr.send();</span><br><span class="line"><span class="number">4.</span>获取服务器端与客户端的响应数据</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ajax错误处理"><a href="#ajax错误处理" class="headerlink" title="ajax错误处理"></a>ajax错误处理</h2><h3 id="1-网络畅通，服务器端可以接受请求，服务器返回的结果不是预期结果"><a href="#1-网络畅通，服务器端可以接受请求，服务器返回的结果不是预期结果" class="headerlink" title="1.网络畅通，服务器端可以接受请求，服务器返回的结果不是预期结果"></a>1.网络畅通，服务器端可以接受请求，服务器返回的结果不是预期结果</h3><p>这时，我们可以通过状态码，来判断响应内容是否为预期结果，然后分别进行处理。<br>状态码：ajax状态值（ajax.readyState，指ajax的运行状态），ajax状态码（ajax.status）</p><p>第四步：先判断状态码，然后进行相应操作<br><code>if(ajax.readyState == 4 &amp;&amp; ajax.status == 200) { putData(ajax.responseText)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> ajax.readyState</span><br><span class="line"> <span class="number">0</span>: (Uninitialized) the send( ) method has not yet been invoked.</span><br><span class="line"> <span class="number">1</span>: (Loading) the send( ) method has been invoked, request <span class="keyword">in</span> progress.</span><br><span class="line"> <span class="number">2</span>: (Loaded) the send( ) method has completed, entire response received.</span><br><span class="line"> <span class="number">3</span>: (Interactive) the response is being parsed.</span><br><span class="line"> <span class="number">4</span>: (Completed) the response has been parsed, is ready <span class="keyword">for</span> harvesting.</span><br><span class="line">解析:</span><br><span class="line"> <span class="number">0</span> － （未初始化）还没有调用send()方法</span><br><span class="line"> <span class="number">1</span> － （载入）已调用send()方法，正在发送请求</span><br><span class="line"> <span class="number">2</span> － （载入完成）send()方法执行完成，已经接收到全部响应内容</span><br><span class="line"> <span class="number">3</span> － （交互）正在解析响应内容</span><br><span class="line"> <span class="number">4</span> － （完成）响应内容解析完成，可以在客户端调用了</span><br></pre></td></tr></table></figure><h3 id="2-网络中断，请求无法发送到服务器端"><a href="#2-网络中断，请求无法发送到服务器端" class="headerlink" title="2.网络中断，请求无法发送到服务器端"></a>2.网络中断，请求无法发送到服务器端</h3><p>此时无法触发onload()事件，但会触发onerror事件，在onerror事件处理函数中对错误进行处理。</p><h2 id="jQuery封装"><a href="#jQuery封装" class="headerlink" title="jQuery封装"></a>jQuery封装</h2><h2 id="ajax-方法"><a href="#ajax-方法" class="headerlink" title="$.ajax()方法"></a>$.ajax()方法</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line"><span class="built_in">type</span>:<span class="string">'get'</span>,</span><br><span class="line">url:<span class="string">'http://www.example.com'</span>,</span><br><span class="line">data:&#123;name:<span class="string">'zhangsan'</span>,age:<span class="string">'20'</span>&#125;,</span><br><span class="line">contentType:<span class="string">'application/x-www.form-urlencoded'</span>,</span><br><span class="line">beforeSend:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span><span class="params">(response)</span></span>&#123;&#125;,</span><br><span class="line"><span class="built_in">error</span>:<span class="function"><span class="keyword">function</span><span class="params">(xhr)</span></span>&#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">contentType:是参数的格式，默认application/x-www.form-urlencoded，如果服务器要求json格式则：</span><br><span class="line">data:Json.stringify(params),</span><br><span class="line">contentType:<span class="string">'application/json'</span></span><br></pre></td></tr></table></figure><h3 id="ajax-方法发送jsonp请求"><a href="#ajax-方法发送jsonp请求" class="headerlink" title="$.ajax()方法发送jsonp请求"></a>$.ajax()方法发送jsonp请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">'http://www.example.com'</span>,</span><br><span class="line"><span class="comment">//指定当前发送jsonp请求</span></span><br><span class="line">dataType:<span class="string">'jsonp'</span>,</span><br><span class="line"><span class="comment">//修改callback参数名称，这里看服务器端的规定</span></span><br><span class="line">jsonp:<span class="string">'cb'</span>,</span><br><span class="line"><span class="comment">//指定函数名称</span></span><br><span class="line">jsonCallback:<span class="string">'fnName'</span>,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="get-、-post"><a href="#get-、-post" class="headerlink" title="$.get()、$.post()"></a>$.get()、$.post()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>(url,data,function(response)&#123;&#125;)</span><br><span class="line">$.post(url,data,<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="全局事件"><a href="#全局事件" class="headerlink" title="全局事件"></a>全局事件</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意一定要绑在document身上</span></span><br><span class="line">.ajax<span class="constructor">Start()</span>  <span class="comment">//当请求开始发送时触发</span></span><br><span class="line">.ajax<span class="constructor">Complete()</span> <span class="comment">//当请求完成时触发</span></span><br><span class="line"></span><br><span class="line">拓展：</span><br><span class="line">一个插件NProgress</span><br><span class="line">官宣：纳米级进度条，使用逼真的涓流动画来告诉用户正在发生的事情</span><br><span class="line">安装:</span><br><span class="line">上传文件添加到页面 nprogress.js nprogress.css</span><br><span class="line">&lt;script src='nprogress.js'&gt;&lt;/script&gt;</span><br><span class="line">&lt;link rel='stylesheet' href='nprogress.css'/&gt;</span><br><span class="line">用法:</span><br><span class="line">只需调用start<span class="literal">()</span>和<span class="keyword">done</span><span class="literal">()</span>到进度条控制。</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">NProgress</span>.</span></span>start<span class="literal">()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">NProgress</span>.</span></span><span class="keyword">done</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">高级用法:</span><br><span class="line">进度条百分比:.set(n)</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">NProgress</span>.</span></span>set(<span class="number">0.0</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">NProgress</span>.</span></span>set(<span class="number">0.4</span>); <span class="comment">// 40%</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">NProgress</span>.</span></span>set(<span class="number">1.0</span>); <span class="comment">// 100%</span></span><br><span class="line"></span><br><span class="line">进度条增加:.inc<span class="literal">()</span> 进度条将渐进增加</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">NProgress</span>.</span></span>inc<span class="literal">()</span>;</span><br><span class="line">如果你想增加一个特定的值，可以增加一个参数：</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">NProgress</span>.</span></span>inc(<span class="number">0.2</span>);</span><br><span class="line">将得到当前状态值增加<span class="number">0.2</span>到状态<span class="number">0.994</span></span><br></pre></td></tr></table></figure><h1 id="serialize方法"><a href="#serialize方法" class="headerlink" title="serialize方法"></a>serialize方法</h1><p>作用：将表单中的数据自动拼接成字符串类型的参数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = $.(<span class="string">'form'</span>).serialize();</span><br><span class="line"><span class="comment">//name=zhangsan&amp;age=20</span></span><br></pre></td></tr></table></figure><p><strong>serializeArray()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = obj.serializeArray();</span><br><span class="line"><span class="comment">//[&#123;name:'username',value:'用户输入的内容'&#125;,&#123;name:'password',value:'123456'&#125;]</span></span><br></pre></td></tr></table></figure><h1 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li><p>模拟HTML表单，相当于将HTML表单映射成表单对象，自动将表单对象中的数据拼接成请求参数的格式</p></li><li><p>异步上传二进制文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>使用dom方法，拿到表单</span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">'form'</span>);</span><br><span class="line"><span class="number">2.</span>创建formData对象</span><br><span class="line"><span class="keyword">var</span> form Data = <span class="keyword">new</span> FormData(form);</span><br></pre></td></tr></table></figure></li></ol><h2 id="FormData对象的实例方法"><a href="#FormData对象的实例方法" class="headerlink" title="FormData对象的实例方法"></a>FormData对象的实例方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>获取表单对象中属性的值</span><br><span class="line">formData.get(<span class="string">'key'</span>);</span><br><span class="line"><span class="number">2.</span>设置表单对象中属性的值</span><br><span class="line">formData.set(<span class="string">'key'</span>,<span class="string">'value'</span>);  <span class="comment">//有则设置，无则创建</span></span><br><span class="line"><span class="number">3.</span>删除</span><br><span class="line">formData.delete(<span class="string">'key'</span>);</span><br><span class="line"><span class="number">4.</span>向表单对象中追加属性值</span><br><span class="line">formData.append(<span class="string">'key'</span>,<span class="string">'value'</span>);</span><br><span class="line"><span class="comment">//注意：set方法与append方法区别是：在属性名已存在情况下，set会覆盖，而append则会保留两个值</span></span><br><span class="line"><span class="comment">//但是，在服务器端如果没有特殊操作，服务器只会保留最后一个值，但是，我们可以在请求头中看到所保留的值</span></span><br></pre></td></tr></table></figure><h2 id="二进制文件上传"><a href="#二进制文件上传" class="headerlink" title="二进制文件上传"></a>二进制文件上传</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"file"</span> id=<span class="string">"file"</span>&gt;&lt;/<span class="built_in">input</span>&gt;</span><br><span class="line"></span><br><span class="line">var file = document.getElementById(<span class="string">'file'</span>)</span><br><span class="line">file.onchange = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">formData.append(<span class="string">'attrName'</span>,this,files[<span class="number">0</span>])</span><br><span class="line">//配置ajax对象，请求方式必须为post</span><br><span class="line">xhr.<span class="built_in">open</span>(<span class="string">'post'</span>,<span class="string">'www.example.com'</span>);</span><br><span class="line">xhr.send(formData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上传进度展示"><a href="#上传进度展示" class="headerlink" title="上传进度展示"></a>上传进度展示</h3><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当用户选择文件的时候</span></span><br><span class="line">file.onchange = <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line"><span class="comment">//文件上传过程中持续触发onprogress事件</span></span><br><span class="line">xhr.upload.onprogress = <span class="function"><span class="keyword">function</span><span class="params">(ev)</span>&#123;</span></span><br><span class="line"><span class="comment">//当前上传文件大小 / 文件总大小，再将结果转换为百分比</span></span><br><span class="line"><span class="comment">//将结果赋值给进度条的宽度属性,bar是一个div</span></span><br><span class="line">bar.style.width = (ev.<span class="built_in">load</span> / ev.total) *<span class="number">10</span>+<span class="string">'%'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RESTful风格url"><a href="#RESTful风格url" class="headerlink" title="RESTful风格url"></a>RESTful风格url</h1><p>传统请求地址回顾</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET  <span class="string">http:</span><span class="comment">//www.abc.com/getUsers           //获取用户列表</span></span><br><span class="line">GET  <span class="string">http:</span><span class="comment">//www.abc.com/getUsers?id=1      //比如获取某一个用户的信息</span></span><br><span class="line">POST <span class="string">http:</span><span class="comment">//www.abc.com/modifyUser        //修改用户信息</span></span><br><span class="line">GET  <span class="string">http:</span><span class="comment">//www.abc.com/deleteUser?id=1   //删除用户信息</span></span><br></pre></td></tr></table></figure><p>RESTful风格</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET    <span class="string">http:</span><span class="comment">//www.abc.com/users    获取用户列表数据</span></span><br><span class="line">POST   <span class="string">http:</span><span class="comment">//www.abc.com/users    添加用户数据</span></span><br><span class="line">GET    <span class="string">http:</span><span class="comment">//www.abc.com/users/1  获取用户ID为1的用户信息</span></span><br><span class="line">PUT    <span class="string">http:</span><span class="comment">//www.abc.com/users/1  修改用户ID为1的用户信息</span></span><br><span class="line">DELETE <span class="string">http:</span><span class="comment">//www.abc.com/users/1  删除用户ID为1的用户信息</span></span><br></pre></td></tr></table></figure><h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h1><h2 id="同源政策"><a href="#同源政策" class="headerlink" title="同源政策"></a>同源政策</h2><h3 id="Ajax请求限制"><a href="#Ajax请求限制" class="headerlink" title="Ajax请求限制"></a>Ajax请求限制</h3><p>Ajax只能向自己的服务器发送请求，比如现在有一个A网站，一个B网站，在A网站中的HTML文件只能向A网站服务器中发送ajax请求，B网站中的HTML文件只能向B网站中发送Ajax请求，但A网站不能向B网站服务器发送ajax请求。</p><h3 id="什么是同源"><a href="#什么是同源" class="headerlink" title="什么是同源"></a>什么是同源</h3><p>如果两个页面拥有<strong>相同的协议、域名、端口</strong>，那么这两个页面就属于同一个源，其中只要有一个不同，就是不同源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://www.example.com/dir/page.html</span><br><span class="line"></span><br><span class="line">以上方url为例：</span><br><span class="line">http://www.example.com/dir2/page2.html  同源</span><br><span class="line">http://example.com/dir/page.html 不同源（域名不同）</span><br><span class="line">http://www.example.com:81/dir/page.html 不同源（端口不同）</span><br><span class="line">https://www.example.com/dir/page.html 不同源（协议不同）</span><br></pre></td></tr></table></figure><h2 id="使用jsonp解决同源限制问题"><a href="#使用jsonp解决同源限制问题" class="headerlink" title="使用jsonp解决同源限制问题"></a>使用jsonp解决同源限制问题</h2><p>jsonp是json with padding 的缩写，它不属于Ajax请求，但它可以模拟Ajax请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>将不同源的服务器端请求地址写在script标签的src属性中</span><br><span class="line">&lt;script src=<span class="string">"www.example.com"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/odn.bootcss.com/</span>jquery/<span class="number">3.3</span><span class="number">.1</span>/jquery.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">2.服务器器端响应数据必须是一个函数的调用，真正要发送给客户端的数据需要作为函数调用的参数</span></span><br><span class="line"><span class="string">data='fn(&#123;name:"</span>张三<span class="string">",age:"</span><span class="number">18</span><span class="string">"&#125;)';</span></span><br><span class="line"><span class="string">res.send(data);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文主要介绍jQuery的基本用法，包括选择器、属性和属性节点、事件以及Ajax的jQuery封装。具体细节还请查阅jQuery帮助手册&lt;a href=&quot;http://hemin.cn/jq/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://hemin.cn/jq/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="jQuery" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/jQuery/"/>
    
      <category term="Ajax" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/05/22/SpringMVC/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/05/22/SpringMVC/</id>
    <published>2020-05-22T06:22:26.000Z</published>
    <updated>2020-05-23T02:38:37.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SpringMVC"><a href="#1-SpringMVC" class="headerlink" title="1.SpringMVC"></a>1.SpringMVC</h1><p>springMVC是spring的一部分</p><h2 id="springMVC框架"><a href="#springMVC框架" class="headerlink" title="springMVC框架"></a>springMVC框架</h2><p><img src="https://leecode1024.oss-cn-qingdao.aliyuncs.com/springMVC%E6%B5%81%E7%A8%8B.png" alt=""></p><p>Springmvc架构原理解析<br>第一步：发起请求到前端控制器(DispatcherServlet)<br>第二步：前端控制器请求HandlerMapping查找 Handler<br>可以根据xml配置、注解进行查找<br>第三步：处理器映射器HandlerMapping向前端控制器返回Handler<br>第四步：前端控制器调用处理器适配器去执行Handler<br>第五步：处理器适配器去执行Handler<br>第六步：Handler执行完成给适配器返回ModelAndView<br>第七步：处理器适配器向前端控制器返回ModelAndView<br>ModelAndView是springmvc框架的一个底层对象，包括 Model和view<br>第八步：前端控制器请求视图解析器去进行视图解析<br>根据逻辑视图名解析成真正的视图(jsp)<br>第九步：视图解析器向前端控制器返回View<br>第十步：前端控制器进行视图渲染<br>视图渲染将模型数据(在ModelAndView对象中)填充到request域<br>第十一步：前端控制器向用户响应结果</p><p>组件：<br>1、前端控制器DispatcherServlet（不需要程序员开发）<br>作用接收请求，响应结果，相当于转发器，中央处理器。<br>有了DispatcherServlet减少了其它组件之间的耦合度。</p><p>2、处理器映射器HandlerMapping(不需要程序员开发)<br>作用：根据请求的url查找Handler</p><p>3、处理器适配器HandlerAdapter<br>作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler</p><p>4、处理器Handler(需要程序员开发)<br>注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler</p><p>5、视图解析器View resolver(不需要程序员开发)<br>作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）</p><p>6、视图View(需要程序员开发jsp)<br>View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf…）</p><h1 id="2-入门程序"><a href="#2-入门程序" class="headerlink" title="2.入门程序"></a>2.入门程序</h1><h2 id="2-1配置前端控制器"><a href="#2-1配置前端控制器" class="headerlink" title="2.1配置前端控制器"></a>2.1配置前端控制器</h2><p>在web.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springMVC前端控制器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- contextConfigLocation配置springmvc需要加载的配置文件（配置处理器映射器、适配器等等）</span></span><br><span class="line"><span class="comment"> 如果不配置contextConfigLocation,默认加载的诗/WEB-INF/springmvc-servlet.xml</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 第一种：*.action结尾  由DispatcherServlet进行解析</span></span><br><span class="line"><span class="comment"> 第二种：/，所有访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2配置处理器适配器"><a href="#2-2配置处理器适配器" class="headerlink" title="2.2配置处理器适配器"></a>2.2配置处理器适配器</h2><p>在classpath下的springmvc.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 处理器适配器 所有处理器适配器都实现HandlerAdapter接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3开发Handler"><a href="#2-3开发Handler" class="headerlink" title="2.3开发Handler"></a>2.3开发Handler</h2><p>需要实现controller接口，才能由org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter适配器来执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.ssm.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzu.ssm.pojo.Items;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsController1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//调用service查找数据库，查询商品列表，这里使用静态数据模拟</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//商品列表</span></span><br><span class="line">List&lt;Items&gt; itemsList = <span class="keyword">new</span> ArrayList&lt;Items&gt;();</span><br><span class="line"></span><br><span class="line">Items item01 = <span class="keyword">new</span> Items();</span><br><span class="line">item01.setId(<span class="number">001</span>);</span><br><span class="line">item01.setName(<span class="string">"联想笔记本"</span>);</span><br><span class="line">item01.setPrice(<span class="number">6000</span>);</span><br><span class="line">item01.setDetail(<span class="string">"ThiskPad T430 联想笔记本电脑！"</span>);</span><br><span class="line"></span><br><span class="line">Items item02 = <span class="keyword">new</span> Items();</span><br><span class="line">item02.setId(<span class="number">002</span>);</span><br><span class="line">item02.setName(<span class="string">"苹果手机"</span>);</span><br><span class="line">item02.setPrice(<span class="number">5000</span>);</span><br><span class="line">item02.setDetail(<span class="string">"苹果智能手机！"</span>);</span><br><span class="line"></span><br><span class="line">itemsList.add(item01);</span><br><span class="line">itemsList.add(item02);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回ModeAndView</span></span><br><span class="line">ModelAndView modeAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"><span class="comment">//相当于request的setAttribut，在jsp页面中通过itemsList取数据</span></span><br><span class="line">modeAndView.addObject(<span class="string">"itemsList"</span>,itemsList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定视图</span></span><br><span class="line">modeAndView.setViewName(<span class="string">"/WEB-INF/jsp/items/itemsList.jsp"</span>);</span><br><span class="line"><span class="keyword">return</span> modeAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4视图的编写"><a href="#2-4视图的编写" class="headerlink" title="2.4视图的编写"></a>2.4视图的编写</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">    &lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">    &lt;%@ taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath &#125;/item/queryItem.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">查询条件：</span><br><span class="line">&lt;table width=<span class="string">"100%"</span> border=<span class="number">1</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="submit" value="查询"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">商品列表：</span><br><span class="line">&lt;table width=<span class="string">"100%"</span> border=<span class="number">1</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;商品id&lt;/td&gt;</span><br><span class="line">&lt;td&gt;商品名称&lt;/td&gt;</span><br><span class="line">&lt;td&gt;商品价格&lt;/td&gt;</span><br><span class="line">&lt;td&gt;商品描述&lt;/td&gt;</span><br><span class="line">&lt;td&gt;操作&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;itemsList &#125;"</span> <span class="keyword">var</span>=<span class="string">"item"</span> &gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;$&#123;item.id&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;item.name&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;item.price&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;item.detail&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;a href="$&#123;pageContest.request.contextPath &#125;/item/editItem.action?id=$&#123;item.id&#125;"&gt;修改&lt;/a&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="2-5配置Handler"><a href="#2-5配置Handler" class="headerlink" title="2.5配置Handler"></a>2.5配置Handler</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Handler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/queryItems.action"</span> <span class="attr">class</span>=<span class="string">"com.dzu.ssm.controller.ItemsController1"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-6配置处理器映射器"><a href="#2-6配置处理器映射器" class="headerlink" title="2.6配置处理器映射器"></a>2.6配置处理器映射器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 处理器映射器 </span></span><br><span class="line"><span class="comment">将bean的name当做url进行查找，需要在配置Handler时指定beaname</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-7配置视图解析器"><a href="#2-7配置视图解析器" class="headerlink" title="2.7配置视图解析器"></a>2.7配置视图解析器</h2><p>解析jsp的视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">可以配置前缀和后缀，这样程序里就可以只写相对路径</span><br></pre></td></tr></table></figure><h2 id="2-8部署调试"><a href="#2-8部署调试" class="headerlink" title="2.8部署调试"></a>2.8部署调试</h2><p><a href="http://localhost:8080/SpringMVC/queryItems.action" target="_blank" rel="noopener">http://localhost:8080/SpringMVC/queryItems.action</a></p><h1 id="3-非注解的处理器映射器和适配器"><a href="#3-非注解的处理器映射器和适配器" class="headerlink" title="3.非注解的处理器映射器和适配器"></a>3.非注解的处理器映射器和适配器</h1><h3 id="3-1非注解的处理器映射器"><a href="#3-1非注解的处理器映射器" class="headerlink" title="3.1非注解的处理器映射器"></a>3.1非注解的处理器映射器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Handler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"itemsController1"</span> <span class="attr">name</span>=<span class="string">"/queryItems.action"</span> <span class="attr">class</span>=<span class="string">"com.dzu.ssm.controller.ItemsController1"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 处理器映射器 </span></span><br><span class="line"><span class="comment">将bean的name当做url进行查找，需要在配置Handler时指定beaname</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简单url映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对itemsController1进行url映射，url是/queryItem1.action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/queryIrems1.action"</span>&gt;</span>itemsController1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/queryIrems2 .action"</span>&gt;</span>itemsController1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多个映射器可以并存，前端控制器判断url能让那些映射器映射，就让正确的映射器处理</p><h3 id="3-2非注解的适配器"><a href="#3-2非注解的适配器" class="headerlink" title="3.2非注解的适配器"></a>3.2非注解的适配器</h3><p>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<br>要求编写的Handler实现<strong>Controller</strong>接口</p><p>org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter<br>要求编写的Handler实现<strong>HttpRequestHandler</strong>接口<br>handRequest方法没有返回modelAndView，可通过response修改定义相应的内容，比如返回json数据<br>response.setCharacterEncoding(“utf-8”)<br>response.setContentType(“application/json;charset=utf-8”)<br>response.getWriter().write(“json串”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.ssm.controller;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.HttpRequestHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"><span class="keyword">import</span> com.dzu.ssm.pojo.Items;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsController2</span> <span class="keyword">implements</span> <span class="title">HttpRequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//调用service查找数据库，查询商品列表，这里使用静态数据模拟</span></span><br><span class="line"><span class="comment">//商品列表</span></span><br><span class="line">List&lt;Items&gt; itemsList = <span class="keyword">new</span> ArrayList&lt;Items&gt;();</span><br><span class="line">Items item01 = <span class="keyword">new</span> Items();</span><br><span class="line">item01.setId(<span class="number">001</span>);</span><br><span class="line">item01.setName(<span class="string">"联想笔记本"</span>);</span><br><span class="line">item01.setPrice(<span class="number">6000</span>);</span><br><span class="line">item01.setDetail(<span class="string">"ThiskPad T430 联想笔记本电脑！"</span>);</span><br><span class="line">Items item02 = <span class="keyword">new</span> Items();</span><br><span class="line">item02.setId(<span class="number">002</span>);</span><br><span class="line">item02.setName(<span class="string">"苹果手机"</span>);</span><br><span class="line">item02.setPrice(<span class="number">5000</span>);</span><br><span class="line">item02.setDetail(<span class="string">"苹果智能手机！"</span>);</span><br><span class="line">itemsList.add(item01);</span><br><span class="line">itemsList.add(item02);</span><br><span class="line"><span class="comment">//设置模型数据</span></span><br><span class="line">request.setAttribute(<span class="string">"itemsList"</span>, itemsList);</span><br><span class="line"><span class="comment">//设置转发的视图</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/items/itemsList.jsp"</span>).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置另外一个Handler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"itemsController2"</span> <span class="attr">class</span>=<span class="string">"com.dzu.ssm.controller.ItemsController2"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简单url映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对itemsController1进行url映射，url是(beanname)/queryItem1.action </span></span><br><span class="line"><span class="comment">所有的映射器都实现了HandlerMapping接口</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/queryItems1.action"</span>&gt;</span>itemsController1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/queryItems2.action"</span>&gt;</span>itemsController1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/queryItems3.action"</span>&gt;</span>itemsController2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DispatcherServlet-properties"><a href="#DispatcherServlet-properties" class="headerlink" title="DispatcherServlet.properties"></a>DispatcherServlet.properties</h2><p>在org.springframework.web.servlet中。<br>前端控制器从上面文件中加载处理映射器、适配器、视图解析器等组件，如果不在springmvc.xml中配置，使用默认加载的。</p><h2 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Handler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"itemsController1"</span> <span class="attr">name</span>=<span class="string">"/queryItems.action"</span> <span class="attr">class</span>=<span class="string">"com.dzu.ssm.controller.ItemsController1"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置另外一个Handler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"itemsController2"</span> <span class="attr">class</span>=<span class="string">"com.dzu.ssm.controller.ItemsController2"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 处理器映射器 </span></span><br><span class="line"><span class="comment">将bean的name当做url进行查找，需要在配置Handler时指定beaname</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简单url映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对itemsController1进行url映射，url是(beanname)/queryItem1.action </span></span><br><span class="line"><span class="comment">所有的映射器都实现了HandlerMapping接口</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/queryItems1.action"</span>&gt;</span>itemsController1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/queryItems2.action"</span>&gt;</span>itemsController1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/queryItems3.action"</span>&gt;</span>itemsController2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 处理器适配器 所有处理器适配器都实现HandlerAdapter接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 另一个非注解的适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-注解的处理器映射器和适配器"><a href="#4-注解的处理器映射器和适配器" class="headerlink" title="4.注解的处理器映射器和适配器"></a>4.注解的处理器映射器和适配器</h1><h2 id="4-1注解的处理器映射器和适配器"><a href="#4-1注解的处理器映射器和适配器" class="headerlink" title="4.1注解的处理器映射器和适配器"></a>4.1注解的处理器映射器和适配器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注解的映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用mvc:annotation-driven代替上边两个注解映射器和适配器配置 </span></span><br><span class="line"><span class="comment">mvc:annotation-driven默认加载很多的参数绑定方法，比如json抓换的解析器就默认加载了</span></span><br><span class="line"><span class="comment">实际开发用这种方式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-开发注解的Handler"><a href="#4-2-开发注解的Handler" class="headerlink" title="4.2.开发注解的Handler"></a>4.2.开发注解的Handler</h2><p>注解的映射器和适配器要配对使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.ssm.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzu.ssm.pojo.Items;</span><br><span class="line"><span class="meta">@org</span>.springframework.stereotype.Controller<span class="comment">//标识它是一个控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsController3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//商品查询列表</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 一般建议将url和方法写成一样</span></span><br><span class="line"><span class="comment"> * @RequestMapping实现对queryItems和url进行映射，一个方法对应一个url</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/queryItems0.action"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">queryItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//商品列表</span></span><br><span class="line">List&lt;Items&gt; itemsList = <span class="keyword">new</span> ArrayList&lt;Items&gt;();</span><br><span class="line"></span><br><span class="line">Items item01 = <span class="keyword">new</span> Items();</span><br><span class="line">item01.setId(<span class="number">001</span>);</span><br><span class="line">item01.setName(<span class="string">"联想笔记本"</span>);</span><br><span class="line">item01.setPrice(<span class="number">6000</span>);</span><br><span class="line">item01.setDetail(<span class="string">"ThiskPad T430 联想笔记本电脑！"</span>);</span><br><span class="line"></span><br><span class="line">Items item02 = <span class="keyword">new</span> Items();</span><br><span class="line">item02.setId(<span class="number">002</span>);</span><br><span class="line">item02.setName(<span class="string">"苹果手机"</span>);</span><br><span class="line">item02.setPrice(<span class="number">5000</span>);</span><br><span class="line">item02.setDetail(<span class="string">"苹果智能手机！"</span>);</span><br><span class="line"></span><br><span class="line">itemsList.add(item01);</span><br><span class="line">itemsList.add(item02);</span><br><span class="line"><span class="comment">//返回ModeAndView</span></span><br><span class="line">ModelAndView modeAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"><span class="comment">//相当于request的setAttribut，在jsp页面中通过itemsList取数据</span></span><br><span class="line">modeAndView.addObject(<span class="string">"itemsList"</span>,itemsList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定视图</span></span><br><span class="line">modeAndView.setViewName(<span class="string">"/WEB-INF/jsp/items/itemsList.jsp"</span>);</span><br><span class="line"><span class="keyword">return</span> modeAndView;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3在spring中加载handler"><a href="#4-3在spring中加载handler" class="headerlink" title="4.3在spring中加载handler"></a>4.3在spring中加载handler</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对于注解的handler可以单个配置</span></span><br><span class="line"><span class="comment">&lt;bean class="com.dzu.ssm.controller.ItemsControlle3"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">实际开发中使用组件扫描</span></span><br><span class="line"><span class="comment">context:component-scan,指定controller的包</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dzu.ssm.controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-4部署运行"><a href="#4-4部署运行" class="headerlink" title="4.4部署运行"></a>4.4部署运行</h2><p><a href="http://localhost:8080/SpringMVC/queryItems0.action" target="_blank" rel="noopener">http://localhost:8080/SpringMVC/queryItems0.action</a></p><h2 id="springmvc-xml-1"><a href="#springmvc-xml-1" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注解的映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用mvc:annotation-driven代替上边两个注解映射器和适配器配置 </span></span><br><span class="line"><span class="comment">mvc:annotation-driven默认加载很多的参数绑定方法，比如json抓换的解析器就默认加载了</span></span><br><span class="line"><span class="comment">实际开发用这种方式</span></span><br><span class="line"><span class="comment">&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对于注解的handler可以单个配置</span></span><br><span class="line"><span class="comment">&lt;bean class="com.dzu.ssm.controller.ItemsControlle3"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">实际开发中使用组件扫描</span></span><br><span class="line"><span class="comment">context:component-scan,指定controller的包</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dzu.ssm.controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-spring与mybatis整合"><a href="#5-spring与mybatis整合" class="headerlink" title="5.spring与mybatis整合"></a>5.spring与mybatis整合</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="1-Dao"><a href="#1-Dao" class="headerlink" title="1.Dao"></a>1.Dao</h3><h4 id="db-properties"><a href="#db-properties" class="headerlink" title="db.properties"></a><strong>db.properties</strong></h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">XXXX</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">XXXX</span></span><br></pre></td></tr></table></figure><h4 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a><strong>log4j.properties</strong></h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Global logging configuration，建议开发环境中要用debug</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG, stdout</span></span><br><span class="line"><span class="comment"># Console output...</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure><h4 id="sqlMapConfig-xml"><a href="#sqlMapConfig-xml" class="headerlink" title="sqlMapConfig.xml"></a><strong>sqlMapConfig.xml</strong></h4><p>在classpath下创建mybatis/sqlMapConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 全局setting，根据需要加 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 批量配置别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.dzu.ssm.po"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用自动扫描器时，mapper.xml文件如果和mapper.java接口在一个目录则此处不用定义mappers --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.dzu.ssm.mapper"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="applicationContext-dao-xml"><a href="#applicationContext-dao-xml" class="headerlink" title="applicationContext-dao.xml"></a><strong>applicationContext-dao.xml</strong></h4><p>在classpath下创建spring/applicationContext-dao.xml<br>配置数据源、事务管理，配置SqlSessionFactory、mapper扫描器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载mybatis的全局配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis/sqlMapConfig.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mapper扫描器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.dzu.ssm.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Mapper和xml通过mybatis逆向工程生成"><a href="#Mapper和xml通过mybatis逆向工程生成" class="headerlink" title="Mapper和xml通过mybatis逆向工程生成"></a>Mapper和xml通过mybatis逆向工程生成</h4><h3 id="2-service"><a href="#2-service" class="headerlink" title="2.service"></a>2.service</h3><p>1、Service由spring管理<br>2、spring对Service进行事务控制。</p><h4 id="applicationContext-service-xml"><a href="#applicationContext-service-xml" class="headerlink" title="applicationContext-service.xml"></a>applicationContext-service.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 商品管理的service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"itemsService"</span> <span class="attr">class</span>=<span class="string">"com.dzu.ssm.service.impl.ItemsServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="applicationContext-transaction-xml"><a href="#applicationContext-transaction-xml" class="headerlink" title="applicationContext-transaction.xml"></a>applicationContext-transaction.xml</h4><p>配置事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器</span></span><br><span class="line"><span class="comment">对mybatis操作数据库事务控制，spring使用jdbc的事务控制类</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 </span></span><br><span class="line"><span class="comment">dataSource在applicationContext-dao.xml中配置了</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 传播行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- aop --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.dzu.ssm.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-Action"><a href="#3-Action" class="headerlink" title="3.Action"></a>3.Action</h3><h4 id="springmvc-xml-2"><a href="#springmvc-xml-2" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描controller注解,多个包中间使用半角逗号分隔 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dzu.ssm.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ViewResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h4><p>加载spring容器，配置springmvc前置控制器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xmlns:web</span>=<span class="string">"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 加载spring容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/classes/spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springmvc的前端控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation配置springmvc需要加载的配置文件（配置处理器映射器、适配器等等）</span></span><br><span class="line"><span class="comment">  如果不配置contextConfigLocation,默认加载的诗/WEB-INF/springmvc-servlet.xml</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/classes/spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  第一种：*.action结尾  由DispatcherServlet进行解析</span></span><br><span class="line"><span class="comment">  第二种：/，所有访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 字符编码过滤器，一定要放在所有过滤器之前 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- Rust风格的URI，将页面普通的post请求转为指定的delete或者put请求 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="6-注解开发"><a href="#6-注解开发" class="headerlink" title="6.注解开发"></a>6.注解开发</h1><h2 id="1、-RequestMapping"><a href="#1、-RequestMapping" class="headerlink" title="1、@RequestMapping"></a>1、@RequestMapping</h2><p>通过RequestMapping注解可以定义不同的处理器映射规则。</p><h3 id="url路径映射"><a href="#url路径映射" class="headerlink" title="url路径映射"></a><strong>url路径映射</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/item"</span>)或<span class="meta">@RequestMapping</span>(<span class="string">"/item）</span></span><br><span class="line"><span class="string">value的值是数组，可以将多个url映射到同一个方法</span></span><br></pre></td></tr></table></figure><h3 id="窄化请求映射"><a href="#窄化请求映射" class="headerlink" title="窄化请求映射"></a><strong>窄化请求映射</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在<span class="class"><span class="keyword">class</span>上添加@<span class="title">RequestMapping</span>(<span class="title">url</span>)指定通用请求前缀， 限制此类下的所有方法请求<span class="title">url</span>必须以请求前缀开头，通过此方法对<span class="title">url</span>进行分类管理。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">如下：</span></span><br><span class="line"><span class="class">@<span class="title">RequestMapping</span>放在类名上边，设置请求前缀 </span></span><br><span class="line"><span class="class">@<span class="title">Controller</span></span></span><br><span class="line">@RequestMapping("/item")</span><br><span class="line"></span><br><span class="line">方法名上边设置请求映射url：</span><br><span class="line"><span class="meta">@RequestMapping</span>放在方法名上边，如下：</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/queryItem "</span>)</span><br><span class="line"></span><br><span class="line">访问地址为：/item/queryItem</span><br></pre></td></tr></table></figure><h3 id="请求方法限定"><a href="#请求方法限定" class="headerlink" title="请求方法限定"></a><strong>请求方法限定</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">限定GET方法</span><br><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line"></span><br><span class="line">如果通过Post访问则报错：</span><br><span class="line">HTTP Status <span class="number">405</span> - Request method <span class="string">'POST'</span> not supported</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/editItem"</span>,method=RequestMethod.GET)</span><br><span class="line">限定POST方法</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line"></span><br><span class="line">如果通过Post访问则报错：</span><br><span class="line">HTTP Status <span class="number">405</span> - Request method <span class="string">'GET'</span> not supported</span><br><span class="line"></span><br><span class="line">GET和POST都可以</span><br><span class="line"><span class="meta">@RequestMapping</span>(method=&#123;RequestMethod.GET,RequestMethod.POST&#125;)</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.ssm.controller;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzu.ssm.po.ItemsCustom;</span><br><span class="line"><span class="keyword">import</span> com.dzu.ssm.service.ItemsService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"items"</span>)<span class="comment">//为了对url进行管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ItemsService itemsService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//商品查询</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/queryItems.action"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">queryItems</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//商品列表</span></span><br><span class="line">List&lt;ItemsCustom&gt; itemsList = itemsService.findItemsList(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回ModeAndView</span></span><br><span class="line">ModelAndView modeAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"><span class="comment">//相当于request的setAttribut，在jsp页面中通过itemsList取数据</span></span><br><span class="line">modeAndView.addObject(<span class="string">"itemsList"</span>,itemsList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定视图</span></span><br><span class="line">modeAndView.setViewName(<span class="string">"items/itemsList"</span>);</span><br><span class="line"><span class="keyword">return</span> modeAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、controller方法返回值"><a href="#2、controller方法返回值" class="headerlink" title="2、controller方法返回值"></a>2、controller方法返回值</h2><h3 id="返回ModelAndView"><a href="#返回ModelAndView" class="headerlink" title="返回ModelAndView"></a><strong>返回ModelAndView</strong></h3><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">controller方法中定义ModelAndView对象并返回，对象中可添加model数据、指定<span class="keyword">view</span>。例如上方代码。</span><br></pre></td></tr></table></figure><h3 id="返回void"><a href="#返回void" class="headerlink" title="返回void"></a><strong>返回void</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在controller方法形参上可以定义request和response，使用request或response指定响应结果：</span><br><span class="line"><span class="number">1</span>、使用request转向页面，如下：</span><br><span class="line">request.getRequestDispatcher(<span class="string">"页面路径"</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、也可以通过response页面重定向：</span><br><span class="line">response.sendRedirect(<span class="string">"url"</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、也可以通过response指定响应结果，例如响应json数据如下：</span><br><span class="line">response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"json串"</span>);</span><br></pre></td></tr></table></figure><h3 id="返回字符串"><a href="#返回字符串" class="headerlink" title="返回字符串"></a><strong>返回字符串</strong></h3><p>1、逻辑视图名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">controller方法返回字符串可以指定逻辑视图名，通过视图解析器解析为物理视图地址。</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定逻辑视图名，经过视图解析器解析为jsp物理路径：/WEB-INF/jsp/item/editItem.jsp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"item/editItem"</span>;</span><br></pre></td></tr></table></figure><p>2、Redirect重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Contrller方法返回结果重定向到一个url地址，如下商品修改提交后重定向到商品查询方法，参数无法带到商品查询方法中。</span><br><span class="line"><span class="comment">//重定向到queryItem.action地址,request无法带过去</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:queryItem.action"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redirect方式相当于“response.sendRedirect()”，转发后浏览器的地址栏变为转发后的地址，因为转发即执行了一个新的request和response。</span><br><span class="line">由于新发起一个request原来的参数在转发时就不能传递到下一个url，如果要传参数可以/item/queryItem.action后边加参数，如下：</span><br><span class="line">/item/queryItem?...&amp;…..</span><br></pre></td></tr></table></figure><p>3、forword转发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">controller方法执行后继续执行另一个controller方法，如下商品修改提交后转向到商品修改页面，修改商品的id参数可以带到商品修改方法中。</span><br><span class="line"><span class="comment">//结果转发到editItem.action，request可以带过去</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"forward:editItem.action"</span>;</span><br><span class="line"></span><br><span class="line">forward方式相当于“request.getRequestDispatcher().forward(request,response)”，转发后浏览器地址栏还是原来的地址。转发并没有执行新的request和response，而是和转发前的请求共用一个request和response。所以转发前请求的参数在转发后仍然可以读取到。</span><br></pre></td></tr></table></figure><h2 id="3、参数绑定"><a href="#3、参数绑定" class="headerlink" title="3、参数绑定"></a>3、参数绑定</h2><h3 id="1-默认支持的类型"><a href="#1-默认支持的类型" class="headerlink" title="1.默认支持的类型"></a><strong>1.默认支持的类型</strong></h3><p>HttpServletRequest、HttpServletResponse、HttpSession、Model/ModelMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ModelMap是Model接口的实现类，通过Model或ModelMap向页面传递数据，如下：</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用service查询商品信息</span></span><br><span class="line">Items item = itemService.findItemById(id);</span><br><span class="line">model.addAttribute(<span class="string">"item"</span>, item);</span><br><span class="line"></span><br><span class="line">页面通过$&#123;item.XXXX&#125;获取item对象的属性值。</span><br><span class="line">使用Model和ModelMap的效果一样，如果直接使用Model，springmvc会实例化ModelMap。</span><br></pre></td></tr></table></figure><h3 id="2-简单类型"><a href="#2-简单类型" class="headerlink" title="2.简单类型"></a><strong>2.简单类型</strong></h3><p>简单类型包括：整型、浮点型、字符串、布尔型<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItem</span><span class="params">(Model model,Integer id)</span> <span class="keyword">throws</span> Exception｛</span></span><br><span class="line"><span class="function">｝</span></span><br><span class="line"><span class="function">处理器方法：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItem</span><span class="params">(Model model,Integer id,Boolean status)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">请求url：</span></span><br><span class="line"><span class="function">http:<span class="comment">//localhost:8080/springmvc_mybatis/item/editItem.action?id=2&amp;status=false</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">说明：对于布尔类型的参数，请求的参数值为<span class="keyword">true</span>或<span class="keyword">false</span>。</span></span><br></pre></td></tr></table></figure><p>使用<strong>@RequestParam</strong>常用于处理简单类型的绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">value：参数名字，即入参的请求参数名字，如value=“item_id”表示请求的参数区中的名字为item_id的参数的值将传入；</span><br><span class="line">required：是否必须，默认是<span class="keyword">true</span>，表示请求中一定要有相应的参数，否则将报；</span><br><span class="line">TTP Status <span class="number">400</span> - Required Integer parameter <span class="string">'XXXX'</span> is not present</span><br><span class="line"></span><br><span class="line">defaultValue：默认值，表示如果请求中没有同名参数时的默认值</span><br><span class="line"></span><br><span class="line">定义如下：</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItem</span><span class="params">(@RequestParam(value=<span class="string">"item_id"</span>,required=<span class="keyword">true</span>)</span> String id) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">形参名称为id，但是这里使用value=<span class="string">" item_id"</span>限定请求的参数名为item_id，所以页面传递参数的名必须为item_id。</span><br><span class="line">注意：如果请求参数中没有item_id将跑出异常：</span><br><span class="line">HTTP Status <span class="number">500</span> - Required Integer parameter <span class="string">'item_id'</span> is not present</span><br><span class="line"></span><br><span class="line">这里通过required=<span class="keyword">true</span>限定item_id参数为必需传递，如果不传递则报<span class="number">400</span>错误，可以使用defaultvalue设置默认值，即使required=<span class="keyword">true</span>也可以不传item_id参数值</span><br></pre></td></tr></table></figure><h3 id="3-pojo"><a href="#3-pojo" class="headerlink" title="3.pojo"></a><strong>3.pojo</strong></h3><p><strong>简单的pojo</strong><br>将pojo对象中的属性名于传递进来的属性名对应，如果传进来的参数名称和对象中的属性名称一致则将参数值设置在pojo对象中<br>页面定义如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"price"</span>/&gt;</span><br></pre></td></tr></table></figure><p>Contrller方法定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editItemSubmit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItemSubmit</span><span class="params">(Items items)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">System.out.println(items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求的参数名称和pojo的属性名称一致，会自动将请求参数赋值给pojo的属性。<br><strong>包装pojo</strong><br>如果采用类似struts中对象.属性的方式命名，需要将pojo对象作为一个包装对象的属性，action中以该包装对象作为形参。<br>包装对象定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Items items;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面定义：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"items.name"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"items.price"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Controller方法定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useraddsubmit</span><span class="params">(Model model,QueryVo queryVo)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">System.out.println(queryVo.getItems());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-自定义参数绑定"><a href="#4-自定义参数绑定" class="headerlink" title="4.自定义参数绑定"></a><strong>4.自定义参数绑定</strong></h3><p>根据业务需求进行自定义，以日期格式为例。<br>要实现Converter接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String是原始类型，Date是要转换的目标类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">return</span> simpleDateFormat.parse(source);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行配置<br>        方式1：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- conversionService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span><span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.itcast.ssm.controller.converter.CustomDateConverter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        方式2：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"webBindingInitializer"</span> <span class="attr">ref</span>=<span class="string">"customBinder"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义webBinder --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customBinder"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.bind.support.ConfigurableWebBindingInitializer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"conversionService"</span> <span class="attr">ref</span>=<span class="string">"conversionService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- conversionService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.itcast.ssm.controller.converter.CustomDateConverter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-集合类型"><a href="#5-集合类型" class="headerlink" title="5.集合类型"></a>5.集合类型</h3><p><strong>数组</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">页面定义如下：</span><br><span class="line">页面选中多个checkbox向controller方法传递</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"item_id"</span> value=<span class="string">"001"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"item_id"</span> value=<span class="string">"002"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"item_id"</span> value=<span class="string">"002"</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">传递到controller方法中的格式是：<span class="number">001</span>,<span class="number">002</span>,<span class="number">003</span></span><br><span class="line"></span><br><span class="line">Controller方法中可以用String[]接收，定义如下：</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteitem</span><span class="params">(String[] item_id)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">System.out.println(item_id);</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p><strong>list</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List中存放对象，并将定义的List放在包装类中，action使用包装对象接收。</span><br><span class="line"></span><br><span class="line">List中对象：</span><br><span class="line">成绩对象</span><br><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line">Private List&lt;Items&gt; itemList;<span class="comment">//商品列表</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//get/set方法..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">动态jsp代码如下：</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;itemsList &#125;"</span> <span class="keyword">var</span>=<span class="string">"item"</span> varStatus=<span class="string">"s"</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="text" name="itemsList[$&#123;s.index &#125;].name" value="$&#123;item.name &#125;"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="text" name="itemsList[$&#123;s.index &#125;].price" value="$&#123;item.price &#125;"/&gt;&lt;/td&gt;</span><br><span class="line">.....</span><br><span class="line">.....</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Contrller方法定义如下：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useraddsubmit</span><span class="params">(Model model,QueryVo queryVo)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">System.out.println(queryVo.getItemList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Map：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在包装类中定义Map对象，并添加get/set方法，action使用包装对象接收。</span><br><span class="line">包装类中定义Map对象如下：</span><br><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; itemInfo = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">  <span class="comment">//get/set方法..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">页面定义如下：</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;学生信息：&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">姓名：&lt;inputtype=<span class="string">"text"</span>name=<span class="string">"itemInfo['name']"</span>/&gt;</span><br><span class="line">年龄：&lt;inputtype=<span class="string">"text"</span>name=<span class="string">"itemInfo['price']"</span>/&gt;</span><br><span class="line">.. .. ..</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Contrller方法定义如下：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useraddsubmit</span><span class="params">(Model model,QueryVo queryVo)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">System.out.println(queryVo.getStudentinfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-服务端校验"><a href="#7-服务端校验" class="headerlink" title="7.服务端校验"></a>7.服务端校验</h1><h2 id="1-校验理解"><a href="#1-校验理解" class="headerlink" title="1.校验理解"></a>1.校验理解</h2><p>项目中，通常使用较多的是前端的校验，比如页面中js校验。对于安全要求较高点建议在服务端校验。<br>服务端校验：<br>        控制层 controller:校验页面请求的参数的合法性。在服务端控制层controller校验，不区分客户端类型。<br>        业务层 service：主要校验关键业务参数，仅限于service接口中使用的参数。<br>        持久层 dao：一般不校验。</p><h2 id="2-springmvc校验"><a href="#2-springmvc校验" class="headerlink" title="2.springmvc校验"></a>2.springmvc校验</h2><p>springmvc使用hibernate的校验框架 validation(和hibernate没有任何关系)</p><h2 id="3-准备环境"><a href="#3-准备环境" class="headerlink" title="3.准备环境"></a>3.准备环境</h2><p>所需jar:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hibernate-validator-<span class="number">4.3</span><span class="number">.0</span>.Final.jar</span><br><span class="line">jboss-logging-<span class="number">3.1</span><span class="number">.0</span>.CR2.jar</span><br><span class="line">validation-api-<span class="number">1.0</span><span class="number">.0</span>.GA.jar</span><br></pre></td></tr></table></figure><h2 id="4-配置校验器"><a href="#4-配置校验器" class="headerlink" title="4.配置校验器"></a>4.配置校验器</h2><p>在springmvc.xml中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 校验器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"validator"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 校验器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"providerClass"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.validator.HibernateValidator"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定校验使用的资源文件，如果不指定则默认使用classpath下的ValidationMessages.properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationMessageSource"</span> <span class="attr">ref</span>=<span class="string">"messageSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 校验错误信息配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.context.support.ReloadableResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 资源文件名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basenames"</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:CustomValidationMessages<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 资源文件编码格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fileEncodings"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对资源文件内容缓存时间，单位秒 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheSeconds"</span> <span class="attr">value</span>=<span class="string">"120"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-将validator加到处理器适配器"><a href="#5-将validator加到处理器适配器" class="headerlink" title="5.将validator加到处理器适配器"></a>5.将validator加到处理器适配器</h2><h3 id="方式1："><a href="#方式1：" class="headerlink" title="方式1："></a>方式1：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">"validator"</span>&gt;</span> <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方式2："><a href="#方式2：" class="headerlink" title="方式2："></a>方式2：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自定义webBinder --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customBinder"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.bind.support.ConfigurableWebBindingInitializer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validator"</span> <span class="attr">ref</span>=<span class="string">"validator"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"webBindingInitializer"</span> <span class="attr">ref</span>=<span class="string">"customBinder"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-在pojo中添加校验规则"><a href="#6-在pojo中添加校验规则" class="headerlink" title="6.在pojo中添加校验规则"></a>6.在pojo中添加校验规则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Items</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Size</span>(min=<span class="number">1</span>,max=<span class="number">30</span>,message=<span class="string">"&#123;item.name.length.error&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotEmpty</span>(message=<span class="string">"&#123;pic.is.null&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br></pre></td></tr></table></figure><h2 id="7-错误消息文件CustomValidationMessages-properties"><a href="#7-错误消息文件CustomValidationMessages-properties" class="headerlink" title="7.错误消息文件CustomValidationMessages.properties"></a>7.错误消息文件CustomValidationMessages.properties</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">item.name.length.error</span>=<span class="string">商品名称在1到30个字符之间</span></span><br><span class="line"><span class="meta">pic.is.null</span>=<span class="string">请上传图片</span></span><br></pre></td></tr></table></figure><p>如果在eclipse中编辑properties文件无法看到中文则参考“Eclipse开发环境配置-indigo.docx”添加propedit插件。</p><h2 id="8-捕获校验错误"><a href="#8-捕获校验错误" class="headerlink" title="8.捕获校验错误"></a>8.捕获校验错误</h2><p>注意：添加@Validated表示在对items参数绑定时进行校验，校验信息写入BindingResult中，在要校验的pojo后边添加BingdingResult， 一个BindingResult对应一个pojo，且BingdingResult放在pojo的后边。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">修改Controller方法：</span><br><span class="line"><span class="comment">// 商品修改提交</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editItemSubmit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItemSubmit</span><span class="params">(@Validated @ModelAttribute(<span class="string">"item"</span>)</span> Items items,BindingResult result,</span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(<span class="string">"pictureFile"</span>)</span> MultipartFile[] pictureFile,Model model)</span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//如果存在校验错误则转到商品修改页面</span></span><br><span class="line"><span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">List&lt;ObjectError&gt; errors = result.getAllErrors();</span><br><span class="line"><span class="keyword">for</span>(ObjectError objectError:errors)&#123;</span><br><span class="line">System.out.println(objectError.getCode());</span><br><span class="line">System.out.println(objectError.getDefaultMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"item/editItem"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品修改页面显示错误信息：</p><p>页头：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span>  </span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"spring"</span> uri=<span class="string">"http://www.springframework.org/tags"</span> %&gt;</span><br></pre></td></tr></table></figure><p>在需要显示错误信息地方：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;spring:hasBindErrors name=<span class="string">"item"</span>&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;errors.allErrors&#125;"</span> <span class="keyword">var</span>=<span class="string">"error"</span>&gt;</span><br><span class="line">$&#123;error.defaultMessage &#125;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/spring:hasBindErrors&gt;</span><br></pre></td></tr></table></figure><p>说明：&lt;spring:hasBindErrors name=”item”&gt;表示如果item参数绑定校验错误下边显示错误信息。</p><p>上边的方法也可以改为：<br>在controller方法中将error通过model放在request域，在页面上显示错误信息： </p><p>controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bindingResult.hasErrors())&#123;</span><br><span class="line">model.addAttribute(<span class="string">"errors"</span>, bindingResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123;errors.allErrors&#125;"</span> <span class="keyword">var</span>=<span class="string">"error"</span>&gt;</span><br><span class="line">$&#123;error.defaultMessage &#125;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h2 id="9-分组校验"><a href="#9-分组校验" class="headerlink" title="9.分组校验"></a>9.分组校验</h2><p><strong>需求</strong>：在pojo中定义校验规则，而pojo是被对个controller所共用，当不同的controller放大对同一个pojo进行校验，但是每个controller方法需要不同的校验。</p><p><strong>解决方法</strong>：定义多个校验分组（其实是一个java接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分组就是一个标识，这里定义一个接口：里面不需要任何东西</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValidGroup1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValidGroup2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>指定分组校验</strong>：groups：此校验属于那个分组，groups可以定义多个分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Items</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="comment">//这里指定分组ValidGroup1，此@Size校验只适用ValidGroup1校验</span></span><br><span class="line">    <span class="meta">@Size</span>(min=<span class="number">1</span>,max=<span class="number">30</span>,message=<span class="string">"&#123;item.name.length.error&#125;"</span>,groups=&#123;ValidGroup1<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">name</span></span>;</span><br></pre></td></tr></table></figure><p><strong>在controller方法中使用分组校验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editItemSubmit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItemSubmit</span><span class="params">(@Validated(value=&#123;ValidGroup1.class&#125;)</span> @<span class="title">ModelAttribute</span><span class="params">(<span class="string">"item"</span>)</span> Items items,BindingResult result,</span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(<span class="string">"pictureFile"</span>)</span> MultipartFile[] pictureFile,Model model)</span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br></pre></td></tr></table></figure><p>在@Validated中添加value={ValidGroup1.class}表示商品修改使用了ValidGroup1分组校验规则，也可以指定多个分组中间用逗号分隔，</p><p>@Validated(value={ValidGroup1.class，ValidGroup2.class })</p><h2 id="10-校验注解"><a href="#10-校验注解" class="headerlink" title="10.校验注解"></a>10.校验注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Null</span>   被注释的元素必须为 <span class="keyword">null</span>   </span><br><span class="line"><span class="meta">@NotNull</span>    被注释的元素必须不为 <span class="keyword">null</span>   </span><br><span class="line"><span class="meta">@AssertTrue</span>     被注释的元素必须为 <span class="keyword">true</span>   </span><br><span class="line"><span class="meta">@AssertFalse</span>    被注释的元素必须为 <span class="keyword">false</span>   </span><br><span class="line"><span class="meta">@Min</span>(value)     被注释的元素必须是一个数字，其值必须大于等于指定的最小值   </span><br><span class="line"><span class="meta">@Max</span>(value)     被注释的元素必须是一个数字，其值必须小于等于指定的最大值   </span><br><span class="line"><span class="meta">@DecimalMin</span>(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值   </span><br><span class="line"><span class="meta">@DecimalMax</span>(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值   </span><br><span class="line"><span class="meta">@Size</span>(max=, min=)   被注释的元素的大小必须在指定的范围内   </span><br><span class="line"><span class="meta">@Digits</span> (integer, fraction)     被注释的元素必须是一个数字，其值必须在可接受的范围内   </span><br><span class="line"><span class="meta">@Past</span>   被注释的元素必须是一个过去的日期   </span><br><span class="line"><span class="meta">@Future</span>     被注释的元素必须是一个将来的日期   </span><br><span class="line"><span class="meta">@Pattern</span>(regex=,flag=)  被注释的元素必须符合指定的正则表达式   </span><br><span class="line">Hibernate Validator 附加的 constraint   </span><br><span class="line"><span class="meta">@NotBlank</span>(message =)   验证字符串非<span class="keyword">null</span>，且长度必须大于<span class="number">0</span>   </span><br><span class="line"><span class="meta">@Email</span>  被注释的元素必须是电子邮箱地址   </span><br><span class="line"><span class="meta">@Length</span>(min=,max=)  被注释的字符串的大小必须在指定的范围内   </span><br><span class="line"><span class="meta">@NotEmpty</span>   被注释的字符串的必须非空   </span><br><span class="line"><span class="meta">@Range</span>(min=,max=,message=)  被注释的元素必须在合适的范围内</span><br></pre></td></tr></table></figure><h1 id="8-数据回显"><a href="#8-数据回显" class="headerlink" title="8.数据回显"></a>8.数据回显</h1><p> 表单提交失败需要再回到表单页面重新填写，原来提交的数据需要重新在页面上显示。</p><h2 id="1-简单数据类型"><a href="#1-简单数据类型" class="headerlink" title="1.简单数据类型"></a>1.简单数据类型</h2><p>对于简单数据类型，如：Integer、String、Float等使用Model将传入的参数再放到request域实现显示。<br>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/editItems"</span>,method=&#123;RequestMethod.GET&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItems</span><span class="params">(Model model,Integer id)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入的id重新放到request域</span></span><br><span class="line">model.addAttribute(<span class="string">"id"</span>, id);</span><br></pre></td></tr></table></figure><h2 id="2-pojo类型"><a href="#2-pojo类型" class="headerlink" title="2.pojo类型"></a>2.pojo类型</h2><p>springmvc默认支持pojo数据回显，springmvc自动将形参中的pojo重新放回request域中，request的key为pojo的类名（首字母小写），如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">controller方法：</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editItemSubmit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItemSubmit</span><span class="params">(Integer id,ItemsCustom itemsCustom)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br></pre></td></tr></table></figure><p>springmvc自动将itemsCustom放回request，相当于调用下边的代码：<br><code>model.addAttribute(&quot;itemsCustom&quot;, itemsCustom);</code></p><p>如果key不是pojo的类名(首字母小写)，可以使用@ModelAttribute完成数据回显。<br><strong>@ModelAttribute</strong>作用如下：<br><strong>1、绑定请求参数到pojo并且暴露为模型数据传到视图页面</strong><br>此方法可实现数据回显效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 商品修改提交</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editItemSubmit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItemSubmit</span><span class="params">(Model model,@ModelAttribute(<span class="string">"item"</span>)</span> ItemsCustom itemsCustom)</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;商品名称&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="text" name="name" value="$&#123;item.name &#125;"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;商品价格&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="text" name="price" value="$&#123;item.price &#125;"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><p>如果不用@ModelAttribute也可以使用<strong>model.addAttribute(“item”, itemsCustom)</strong>完成数据回显。</p><p><strong>2、将方法返回值暴露为模型数据传到视图页面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//商品分类</span></span><br><span class="line"><span class="meta">@ModelAttribute</span>(<span class="string">"itemtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getItemTypes</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Map&lt;String, String&gt; itemTypes = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">itemTypes.put(<span class="string">"101"</span>, <span class="string">"数码"</span>);</span><br><span class="line">itemTypes.put(<span class="string">"102"</span>, <span class="string">"母婴"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> itemTypes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">商品类型：</span><br><span class="line">&lt;select name=<span class="string">"itemtype"</span>&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;itemtypes &#125;"</span> <span class="keyword">var</span>=<span class="string">"itemtype"</span>&gt;</span><br><span class="line">&lt;option value="$&#123;itemtype.key &#125;"&gt;$&#123;itemtype.value &#125;&lt;/option&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h1 id="9-异常处理器"><a href="#9-异常处理器" class="headerlink" title="9.异常处理器"></a>9.异常处理器</h1><p>​    系统中异常包括两类：预期异常和运行时异常RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。<br>​    系统的dao、service、controller出现都通过throws Exception向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理，如下图：</p><p><img src="https://leecode1024.oss-cn-qingdao.aliyuncs.com/%E5%BC%82%E5%B8%B8.png" alt=""></p><h2 id="1-自定义异常类"><a href="#1-自定义异常类" class="headerlink" title="1.自定义异常类"></a>1.自定义异常类</h2><p>为了区别不同的异常通常根据异常类型自定义异常类，这里我们创建一个自定义系统异常，如果controller、service、dao抛出此类异常说明是系统预期处理的异常信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** serialVersionUID*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5212079010855161498L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(message);</span><br><span class="line"><span class="keyword">this</span>.message = message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常信息</span></span><br><span class="line"><span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.message = message;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-自定义异常处理器"><a href="#2-自定义异常处理器" class="headerlink" title="2.自定义异常处理器"></a>2.自定义异常处理器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ex.printStackTrace();</span><br><span class="line"></span><br><span class="line">CustomException customException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果抛出的是系统自定义异常则直接转换</span></span><br><span class="line"><span class="keyword">if</span>(ex <span class="keyword">instanceof</span> CustomException)&#123;</span><br><span class="line">customException = (CustomException)ex;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果抛出的不是系统自定义异常则重新构造一个未知错误异常。</span></span><br><span class="line">customException = <span class="keyword">new</span> CustomException(<span class="string">"未知错误，请与系统管理 员联系！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">modelAndView.addObject(<span class="string">"message"</span>, customException.getMessage());</span><br><span class="line">modelAndView.setViewName(<span class="string">"error"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-错误页面"><a href="#3-错误页面" class="headerlink" title="3.错误页面"></a>3.错误页面</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span>  prefix=<span class="string">"fmt"</span>%&gt; </span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;错误页面&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">您的操作出现错误如下：&lt;br/&gt;</span><br><span class="line">$&#123;message &#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="4-异常处理器配置"><a href="#4-异常处理器配置" class="headerlink" title="4.异常处理器配置"></a>4.异常处理器配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在springmvc.xml中添加：</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 异常处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerExceptionResolver"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.ssm.controller.exceptionResolver.CustomExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="10-上传图片"><a href="#10-上传图片" class="headerlink" title="10.上传图片"></a>10.上传图片</h1><h2 id="1-配置虚拟目录"><a href="#1-配置虚拟目录" class="headerlink" title="1.配置虚拟目录"></a>1.配置虚拟目录</h2><p>在tomcat上配置图片虚拟目录，在tomcat下conf/server.xml中添加：</p><Context docBase="F:\develop\upload\temp" path="/pic" reloadable="false"/> <p>访问<a href="http://localhost:8080/pic即可访问F:\develop\upload\temp下的图片。" target="_blank" rel="noopener">http://localhost:8080/pic即可访问F:\develop\upload\temp下的图片。</a> </p><p>也可以通过eclipse配置：</p><p><img src="https://leecode1024.oss-cn-qingdao.aliyuncs.com/%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%95.png" alt=""></p><h2 id="2-配置解析器"><a href="#2-配置解析器" class="headerlink" title="2.配置解析器"></a>2.配置解析器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置上传文件的最大尺寸为5MB --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>5242880<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-jar包"><a href="#3-jar包" class="headerlink" title="3.jar包"></a>3.jar包</h2><p><strong>CommonsMultipartResolver</strong>解析器依赖commons-fileupload和commons-io</p><h2 id="4-上传图片"><a href="#4-上传图片" class="headerlink" title="4.上传图片"></a>4.上传图片</h2><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//商品修改提交</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editItemSubmit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItemSubmit</span><span class="params">(Items items, MultipartFile pictureFile)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原始文件名称</span></span><br><span class="line">String pictureFile_name =  pictureFile.getOriginalFilename();</span><br><span class="line"><span class="comment">//新文件名称</span></span><br><span class="line">String newFileName = UUID.randomUUID().toString()+pictureFile_name.substring(pictureFile_name.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//上传图片</span></span><br><span class="line">File uploadPic = <span class="keyword">new</span> java.io.File(<span class="string">"F:/develop/upload/temp/"</span>+newFileName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!uploadPic.exists())&#123;</span><br><span class="line">uploadPic.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向磁盘写文件</span></span><br><span class="line">pictureFile.transferTo(uploadPic);</span><br><span class="line"></span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">form添加enctype=<span class="string">"multipart/form-data"</span>：</span><br><span class="line">&lt;form id=<span class="string">"itemForm"</span></span><br><span class="line">action=<span class="string">"$&#123;pageContext.request.contextPath &#125;/item/editItemSubmit.action"</span></span><br><span class="line">method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"pic"</span> value=<span class="string">"$&#123;item.pic &#125;"</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file的name与controller形参一致：</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;商品图片&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;item.pic !=null&#125;"</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"/pic/$&#123;item.pic&#125;"</span> width=<span class="number">100</span> height=<span class="number">100</span> /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;/c:if&gt; &lt;input type="file" name="pictureFile" /&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><h1 id="11-json数据交互"><a href="#11-json数据交互" class="headerlink" title="11.json数据交互"></a>11.json数据交互</h1><h2 id="1-RequestBody"><a href="#1-RequestBody" class="headerlink" title="1.@RequestBody"></a>1.@RequestBody</h2><p>作用：</p><p>@RequestBody注解用于读取http请求的内容(字符串)，通过springmvc提供的HttpMessageConverter接口将读到的内容转换为json、xml等格式的数据并绑定到controller方法的参数上。</p><h2 id="2-ResponseBody"><a href="#2-ResponseBody" class="headerlink" title="2.@ResponseBody"></a>2.@ResponseBody</h2><p>作用：</p><p>该注解用于将Controller的方法返回的对象，通过HttpMessageConverter接口转换为指定格式的数据如：json,xml等，通过Response响应给客户端</p><h2 id="3-请求json，响应json实现"><a href="#3-请求json，响应json实现" class="headerlink" title="3.请求json，响应json实现"></a>3.请求json，响应json实现</h2><p><strong>环境</strong>：Springmvc默认用MappingJacksonHttpMessageConverter对json数据进行转换，需要加入jackson的包</p><p><img src="https://leecode1024.oss-cn-qingdao.aliyuncs.com/jsonjar.png" alt=""></p><p><strong>配置json转换器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果使用<strong>&lt;mvc:annotation-driven /&gt;</strong>则不用定义上边的内容。</p><h1 id="12-RESTful支持"><a href="#12-RESTful支持" class="headerlink" title="12.RESTful支持"></a>12.RESTful支持</h1><p>一种开发理念，是对http的很好的诠释</p><h2 id="添加DispatcherServlet的rest配置"><a href="#添加DispatcherServlet的rest配置" class="headerlink" title="添加DispatcherServlet的rest配置"></a>添加DispatcherServlet的rest配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc-servlet-rest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc-servlet-rest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="URL-模板模式映射"><a href="#URL-模板模式映射" class="headerlink" title="URL 模板模式映射"></a>URL 模板模式映射</h2><p>@RequestMapping(value=”/ viewItems/{id}”)：{×××}占位符，请求的URL可以是“/viewItems/1”或“/viewItems/2”，通过在方法中使用@PathVariable获取{×××}中的×××变量。</p><p>@PathVariable用于将请求URL中的模板变量映射到功能处理方法的参数上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/viewItems/&#123;id&#125;"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> viewItems(<span class="meta">@PathVariable</span>(<span class="string">"id"</span>) String id,Model model) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">//方法中使用@PathVariable获取useried的值，使用model传回页面</span></span><br><span class="line"><span class="comment">//调用 service查询商品信息</span></span><br><span class="line">ItemsCustom itemsCustom = itemsService.findItemsById(id);</span><br><span class="line"><span class="keyword">return</span> itemsCustom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果RequestMapping中表示为”/viewItems/{id}”，id和形参名称一致，@PathVariable不用指定名称。</p><h2 id="静态资源访问mvc-resources"><a href="#静态资源访问mvc-resources" class="headerlink" title="静态资源访问mvc:resources"></a>静态资源访问<a href="mvc:resources">mvc:resources</a></h2><p>如果在DispatcherServlet中设置url-pattern为 /则必须对静态资源进行访问处理。</p><p>spring mvc 的&lt;mvc:resources mapping=”” location=””&gt;实现对静态资源进行映射访问。</p><p>如下是对js文件访问配置：</p><p>&lt;mvc:resources location=”/js/“ mapping=”/js/**”/&gt;</p><h1 id="13-拦截器"><a href="#13-拦截器" class="headerlink" title="13.拦截器"></a>13.拦截器</h1><p>Spring Web MVC 的处理器拦截器类似于Servlet 开发中的过滤器Filter，用于对处理器进行预处理和后处理。</p><h2 id="1-拦截器定义"><a href="#1-拦截器定义" class="headerlink" title="1.拦截器定义"></a>1.拦截器定义</h2><p>实现HandlerInterceptor接口，实现三个方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller执行前调用此方法</span></span><br><span class="line"><span class="comment"> * 返回true表示继续执行，返回false中止执行</span></span><br><span class="line"><span class="comment"> * 这里可以加入登录校验、权限拦截等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Public <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller执行后但未返回视图前调用此方法</span></span><br><span class="line"><span class="comment"> * 这里可在返回用户前对模型数据进行加工处理，比如这里加入公用信息以便页面显示</span></span><br><span class="line"><span class="comment"> */</span>r</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller执行后且视图返回后调用此方法</span></span><br><span class="line"><span class="comment"> * 这里可得到执行controller时的异常信息</span></span><br><span class="line"><span class="comment"> * 这里可记录操作日志，资源清理等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-针对某种mapping配置拦截器"><a href="#2-针对某种mapping配置拦截器" class="headerlink" title="2.针对某种mapping配置拦截器"></a>2.针对某种mapping配置拦截器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptors"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"handlerInterceptor1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"handlerInterceptor2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerInterceptor1"</span> <span class="attr">class</span>=<span class="string">"springmvc.intercapter.HandlerInterceptor1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerInterceptor2"</span> <span class="attr">class</span>=<span class="string">"springmvc.intercapter.HandlerInterceptor2"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-针对所有mapping配置全局拦截器"><a href="#3-针对所有mapping配置全局拦截器" class="headerlink" title="3.针对所有mapping配置全局拦截器"></a>3.针对所有mapping配置全局拦截器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多个拦截器,顺序执行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.itcast.springmvc.filter.HandlerInterceptor1"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.itcast.springmvc.filter.HandlerInterceptor2"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-拦截器应用"><a href="#4-拦截器应用" class="headerlink" title="4.拦截器应用"></a>4.拦截器应用</h2><p>用户身份认证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Public <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是登录页面则放行</span></span><br><span class="line"><span class="keyword">if</span>(request.getRequestURI().indexOf(<span class="string">"login.action"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line"><span class="comment">//如果用户已登录也放行</span></span><br><span class="line"><span class="keyword">if</span>(session.getAttribute(<span class="string">"user"</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户没有登录挑战到登录页面</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/login.jsp"</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户登陆controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登陆提交</span></span><br><span class="line"><span class="comment">//userid：用户账号，pwd：密码</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loginsubmit</span><span class="params">(HttpSession session,String userid,String pwd)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向session记录用户身份信息</span></span><br><span class="line">session.setAttribute(<span class="string">"activeUser"</span>, userid);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:item/queryItem.action"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//退出</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/logout"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpSession session)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//session过期</span></span><br><span class="line">session.invalidate();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:item/queryItem.action"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-SpringMVC&quot;&gt;&lt;a href=&quot;#1-SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;1.SpringMVC&quot;&gt;&lt;/a&gt;1.SpringMVC&lt;/h1&gt;&lt;p&gt;springMVC是spring的一部分&lt;/p&gt;
&lt;h2 id=&quot;s
      
    
    </summary>
    
    
      <category term="javaEE" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/javaEE/"/>
    
      <category term="ssm框架" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/javaEE/ssm%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="javaEE" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/javaEE/"/>
    
      <category term="spring" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/05/22/Spring/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/05/22/Spring/</id>
    <published>2020-05-22T05:59:17.000Z</published>
    <updated>2020-05-22T06:16:25.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring配置"><a href="#spring配置" class="headerlink" title="spring配置"></a>spring配置</h2><h3 id="1-导包"><a href="#1-导包" class="headerlink" title="1.导包"></a>1.导包</h3><p><img src="/images/Spring/image-20200226202601013.png" alt="image-20200226202601013"></p><h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h3><p>​    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserDao"</span> <span class="attr">class</span>=<span class="string">"com.dzu.ioc.UserDaoImpl"</span> /&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-用spring创建对象"><a href="#3-用spring创建对象" class="headerlink" title="3.用spring创建对象"></a>3.用spring创建对象</h3><h5 id="立即加载："><a href="#立即加载：" class="headerlink" title="立即加载："></a>立即加载：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext application = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);`</span><br><span class="line"></span><br><span class="line">UserDao userDao = (UserDao) application.getBean(<span class="string">"UserDao"</span>);</span><br><span class="line">userDao.say();</span><br></pre></td></tr></table></figure><h5 id="延迟加载："><a href="#延迟加载：" class="headerlink" title="延迟加载："></a>延迟加载：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"bean.xml"</span>);`<span class="comment">//获取容器</span></span><br><span class="line"></span><br><span class="line">`BeanFactory factory = <span class="keyword">new</span> XmlBeanFactory(resource);`</span><br><span class="line"></span><br><span class="line">`UserDao userDao = (UserDao) factory.getBean(<span class="string">"UserDao"</span>);`<span class="comment">//创建对象</span></span><br></pre></td></tr></table></figure><h3 id="Bean的两种创建规则"><a href="#Bean的两种创建规则" class="headerlink" title="Bean的两种创建规则"></a>Bean的两种创建规则</h3><pre><code>1. BeanFactory:提供的是一种延迟加载思想。bean对象什么时候用什么时候创建。</code></pre><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>ApplicationContext：提供的是一种立即加载思想。只要一解析完，就马上创建bean对象</span><br></pre></td></tr></table></figure><h3 id="Bean的三种创建方式"><a href="#Bean的三种创建方式" class="headerlink" title="Bean的三种创建方式"></a>Bean的三种创建方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第一种：调用默认无参构造函数创建</span><br><span class="line"></span><br><span class="line">第二种：使用静态工厂，需要使用bean标签的facroty-method属性，指定静态工厂中创建对象的方法<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserDao"</span> <span class="attr">class</span>=<span class="string">"com.dzu.ioc.UserDaoImpl"</span> <span class="attr">factory-method</span>=<span class="string">"getBean"</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line">第三种：使用实例工厂</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceFactory"</span> <span class="attr">class</span>=<span class="string">"com.dzu.ioc.InstanceFactory"</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceUserService"</span> <span class="attr">factory-bean</span>=<span class="string">"instanceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getBean"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bean的作用范围"><a href="#Bean的作用范围" class="headerlink" title="Bean的作用范围"></a>Bean的作用范围</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">它是通过配置的方式来调整作用的范围。</span><br><span class="line"></span><br><span class="line">​范围的属性：bean标签的scope属性</span><br><span class="line">​属性的取值：<span class="string">singleton:</span>单例的（默认值）</span><br><span class="line"></span><br><span class="line">​<span class="string">prototype:</span>多例的（当我们让spring接管struts2的action创建时，action必须配置此值）</span><br><span class="line">​<span class="string">request:</span>作用范围是一次请求，和当前请求的转发。</span><br><span class="line">​session：作用范围是一次会话</span><br><span class="line">​<span class="string">globalsession:</span>作用范围是一次全局会话</span><br></pre></td></tr></table></figure><h3 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">单例：</span><br><span class="line">​出生：容器创建，对象就出生了</span><br><span class="line">​活着：只要容器在，对象就一直存在</span><br><span class="line">​死亡：容器销毁，对象消亡</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">多例：</span><br><span class="line">​出生：每次使用时，创建对象</span><br><span class="line">​活着：只要对象在使用中，就一直活着</span><br><span class="line">​死亡：当对象长时间不使用，并且也没有别的对象引用时，由java的垃圾回收器回收</span><br></pre></td></tr></table></figure><h3 id="Spring的依赖注入"><a href="#Spring的依赖注入" class="headerlink" title="Spring的依赖注入"></a>Spring的依赖注入</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注入的方式有三种：<span class="number">1.</span>构造函数注入</span><br><span class="line">   <span class="number">2.</span>使用<span class="keyword">set</span>方法注入</span><br><span class="line">   <span class="number">3.</span>使用注解注入</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注入的数据类型有三类：  <span class="number">1.</span>基本类型和String类型</span><br><span class="line"><span class="number">2.</span>其他bean类型（必须是在spring文件中出现的bean）</span><br><span class="line"><span class="number">3.</span>复杂类型（集合）</span><br></pre></td></tr></table></figure><h4 id="1-构造函数注入：涉及标签：constructor-arg-private成员变量"><a href="#1-构造函数注入：涉及标签：constructor-arg-private成员变量" class="headerlink" title="1.构造函数注入：涉及标签：constructor-arg(private成员变量)"></a>1.构造函数注入：涉及标签：constructor-arg(private成员变量)</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标签属性：<span class="keyword">type</span>：指定参数的类型</span><br><span class="line"><span class="keyword">index</span>：指定参数的索引位置，从<span class="number">0</span>开始</span><br><span class="line"><span class="type">name</span>：指定参数的名称</span><br><span class="line">               =====上面三个属性指定给那个参数赋值，下面两个属性指定赋什么值===<span class="keyword">value</span>：指定基本数据类型或String类型的数据</span><br><span class="line"><span class="keyword">ref</span>：指定其他bean类型数据</span><br><span class="line">标签出现位置：bean标签内部</span><br></pre></td></tr></table></figure><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><p>​            配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.dzu.spring01.UserDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"today"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​        UserDaoImpl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">          <span class="keyword">private</span> Date today;</span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(<span class="keyword">int</span> age, Date today)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">super</span>();</span><br><span class="line">              <span class="keyword">this</span>.age = age;</span><br><span class="line">              <span class="keyword">this</span>.today = today;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">              System.out.println(<span class="string">"age:"</span>+age+<span class="string">"date:"</span>+today);</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        </p><h4 id="2-set方法注入：涉及标签：property"><a href="#2-set方法注入：涉及标签：property" class="headerlink" title="2.set方法注入：涉及标签：property"></a>2.set方法注入：涉及标签：property</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">           <span class="type">name</span>：指定参数的名称</span><br><span class="line">   =====上面三个属性指定给那个参数赋值，下面两个属性指定赋什么值===<span class="keyword">value</span>：指定基本数据类型或String类型的数据</span><br><span class="line"><span class="keyword">ref</span>：指定其他bean类型数据</span><br><span class="line">标签出现位置：bean标签内部</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserService"</span> <span class="attr">class</span>=<span class="string">"com.dzu.ioc.UserServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"UserDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-复杂类型"><a href="#3-复杂类型" class="headerlink" title="3.复杂类型"></a>3.复杂类型</h3><h4 id="案例：注意格式相同标签可互换-String-List-Set-Map-Property"><a href="#案例：注意格式相同标签可互换-String-List-Set-Map-Property" class="headerlink" title="案例：注意格式相同标签可互换[String[],List,Set]  [Map,Property]"></a>案例：注意格式相同标签可互换[String[],List,Set]  [Map,Property]</h4><p>applicationContent.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">`<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"listDemo"</span> <span class="attr">class</span>=<span class="string">"com.dzu.spring01.ListDemo"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myStrs"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>222<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>222<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>222<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"a"</span> <span class="attr">value</span>=<span class="string">"acb"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"b"</span> <span class="attr">value</span>=<span class="string">"bfv"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myProps"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"a"</span> &gt;</span>123<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"b"</span> &gt;</span>456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>`</span><br></pre></td></tr></table></figure><p>ListDemo类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] myStrs;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; mySet;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; myMap;</span><br><span class="line">    <span class="keyword">private</span> Properties myProps;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyStrs</span><span class="params">(String[] myStrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myStrs = myStrs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myList = myList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mySet = mySet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myMap = myMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyProps</span><span class="params">(Properties myProps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myProps = myProps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(myStrs));</span><br><span class="line">        System.out.println(myList);</span><br><span class="line">        System.out.println(mySet);</span><br><span class="line">        System.out.println(myMap);</span><br><span class="line">        System.out.println(myProps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext application = <span class="keyword">new</span>  ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        ListDemo ld = (ListDemo) application.getBean(<span class="string">"listDemo"</span>);</span><br><span class="line">        ld.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基于注解的IOC-用于创建bean对象"><a href="#基于注解的IOC-用于创建bean对象" class="headerlink" title="基于注解的IOC-用于创建bean对象"></a>基于注解的IOC-用于创建bean对象</h1><h4 id="相关jar"><a href="#相关jar" class="headerlink" title="相关jar"></a>相关jar</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/images/Spring/image-20200301201157691.png" alt="image-20200301201157691"></h4><h4 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a>配置文件：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><h4 id="1-用于创建bean对象"><a href="#1-用于创建bean对象" class="headerlink" title="1.用于创建bean对象"></a>1.用于创建bean对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">作用：就相当于配置了一个bean标签</span><br><span class="line">它能出现的位置：类上面</span><br><span class="line">属性：value   含义是指定bean的id。当不写时，有默认值，默认值为：当前类的短名首字母改小写userDao</span><br><span class="line">由此注解衍生的三个注解：</span><br><span class="line">@Controller一般用于表现层</span><br><span class="line">       @Service一般用于业务层</span><br><span class="line">       @Repository一般用于持久层</span><br><span class="line">       他们和@Component的作用及属性都是一模一样的</span><br></pre></td></tr></table></figure><h4 id="案例：-1"><a href="#案例：-1" class="headerlink" title="案例："></a>案例：</h4><p>​            配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dzu.spring01"</span>&gt;</span> <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​            相关类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Component</span>   <span class="comment">//这里是注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.spring01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ClassPathXmlApplicationContext application = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">ListDemo ld = (ListDemo) application.getBean(<span class="string">"listDemo"</span>);</span><br><span class="line">System.out.println(ld);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-用于注入数据的"><a href="#2-用于注入数据的" class="headerlink" title="2.用于注入数据的"></a>2.用于注入数据的</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Autowired</span></span><br><span class="line">作用：自动按照类型注入。只要有唯一的类型匹配就能注入成功。</span><br><span class="line">如果注入的bean在容器中类型不唯一时，它会把变量名称作为bean的id，在容器中查找，找到后也能诸注入成功。如果找不到唯一的bean的id，则报错。  当我们使用注解注入时，set方法就不是必须的。</span><br><span class="line"></span><br><span class="line">   <span class="variable">@Qualifier</span></span><br><span class="line">   作用：在自动按照类型注入的基础之上，再按照bean的id注入。它在给类成员注入数据时，不能独立使用。但是在给方法的形参注入数据时，可以独立使用。</span><br><span class="line">   属性：value：用于指定bean的id。</span><br><span class="line">   <span class="variable">@Resource</span></span><br><span class="line">   作用：直接按照bean的id注入。</span><br><span class="line">   属性：</span><br><span class="line">   <span class="attribute">name</span>:用于指定bean的id</span><br><span class="line">  以上三个注解都是用于注入其他bean类型。用于注入基本类型和String类型需要使用value</span><br><span class="line">  </span><br><span class="line">  <span class="variable">@Value</span></span><br><span class="line">  作用：用于注入基本类型和String类型数据。它可以借助spring的el表达式读取properties文件中的配置。</span><br><span class="line">  属性：value：用于指定要注入的数据</span><br></pre></td></tr></table></figure><h4 id="3-用于改变作用范围"><a href="#3-用于改变作用范围" class="headerlink" title="3.用于改变作用范围"></a>3.用于改变作用范围</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Scope</span></span><br><span class="line"><span class="keyword"></span>作用：用于指定<span class="keyword">bean的作用范围</span></span><br><span class="line"><span class="keyword"></span>属性：</span><br><span class="line"><span class="symbol">value:</span>用于指定范围的取值</span><br><span class="line">取值和xml中的<span class="keyword">scope属性一样。singleton </span>prototype request session globalsession</span><br></pre></td></tr></table></figure><h4 id="4-和生命周期相关的-了解"><a href="#4-和生命周期相关的-了解" class="headerlink" title="4.和生命周期相关的(了解)"></a>4.和生命周期相关的(了解)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">相当于：&lt;bean id=<span class="string">""</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">""</span> init-method=<span class="string">""</span> destroy-method=<span class="string">""</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostContruct</span>  作用：用于指定初始化方法</span><br><span class="line"><span class="meta">@PreDestroy</span>   作用：用于指定销毁方法</span><br></pre></td></tr></table></figure><h4 id="5-spring的新注解（取消xml时使用，不介绍了）"><a href="#5-spring的新注解（取消xml时使用，不介绍了）" class="headerlink" title="5.spring的新注解（取消xml时使用，不介绍了）"></a>5.spring的新注解（取消xml时使用，不介绍了）</h4><h4 id="案例：-2"><a href="#案例：-2" class="headerlink" title="案例："></a>案例：</h4><h5 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dzu.spring01"</span>&gt;</span> <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"Service"</span>&gt;</span> <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="相关类："><a href="#相关类：" class="headerlink" title="相关类："></a>相关类：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> com.dzu.spring01.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao=<span class="keyword">null</span>;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"张三"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"service"</span>+name);</span><br><span class="line">userDao.saveCustomer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.spring01;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"userDaoImpl"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"dao保存客户"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.dzu.spring01.ListDemo;</span><br><span class="line"><span class="keyword">import</span> Service.UserService;</span><br><span class="line"><span class="keyword">import</span> Service.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ClassPathXmlApplicationContext application = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">UserService  usi = (UserService) application.getBean(<span class="string">"userService"</span>);</span><br><span class="line">usi.saveCustomer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="spring中的AOP（面向切面编程）"><a href="#spring中的AOP（面向切面编程）" class="headerlink" title="spring中的AOP（面向切面编程）"></a>spring中的AOP（面向切面编程）</h1><h4 id="案例1（基于xml的AOP配置）："><a href="#案例1（基于xml的AOP配置）：" class="headerlink" title="案例1（基于xml的AOP配置）："></a>案例1（基于xml的AOP配置）：</h4><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.dzu.service.CustomerServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!-- 基于xml的aop配置步骤 要想使用spring的aop必须导入aop的jar包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第一步：把通知类交给spring来管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"utils.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第二步：导入aop名称空间，并且使用aop:config开始aop的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义通用的切入点表达式：如果写在了aop:aspect标签外部，则表示所有切面可用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(public void com.dzu.service.CustomerServiceImpl.saveCustomer() )"</span> <span class="attr">id</span>=<span class="string">"pt1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第三步：使用aop:aspect配置切面 id属性用于给切面提供一个唯一标识。 ref属性：哟关于应用通知Bean的id--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第四步：配置通知的类型，指定增强的方法合适执行。method属性：用于指定增强的方法名称。pointcut属性：用于指定切入点表达式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 切入点表达式：</span></span><br><span class="line"><span class="comment">关键字：execution(表达式)</span></span><br><span class="line"><span class="comment">表达式写法：</span></span><br><span class="line"><span class="comment">访问修饰符 返回值 包名.包名...类名.方法名(参数列表)</span></span><br><span class="line"><span class="comment">全匹配方式：</span></span><br><span class="line"><span class="comment">public void com.dzu.service.CustomerServiceImpl.saveCustomer()</span></span><br><span class="line"><span class="comment">访问修饰符可以省略：</span></span><br><span class="line"><span class="comment">void com.dzu.service.CustomerServiceImpl.saveCustomer()</span></span><br><span class="line"><span class="comment">返回值可以使用通配符，表示任意返回值。通配符是*</span></span><br><span class="line"><span class="comment">包名可以使用通配符，表示任意包。但是有几个包就需要几个*</span></span><br><span class="line"><span class="comment">包名可以使用..表示当前包及其子包</span></span><br><span class="line"><span class="comment">类型和方法名都可以使用通配符</span></span><br><span class="line"><span class="comment">参数列表可以使用通配符，表示任意参数类型，但是必须有参数</span></span><br><span class="line"><span class="comment">擦拭农户列表可以使用..表示有无参数均可，有参数可以是任意类型</span></span><br><span class="line"><span class="comment">全通配方式：</span></span><br><span class="line"><span class="comment">* *..*.*(..)</span></span><br><span class="line"><span class="comment">实际开发中，我们一般情况下，我们都是对业务层方法进行增强：</span></span><br><span class="line"><span class="comment">所以写法：* com.dzu.service.impl.*.*(..)</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"printLog"</span> <span class="attr">pointcut</span>=<span class="string">"execution(public void com.dzu.service.CustomerServiceImpl.saveCustomer() )"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义通用的切入点表达式：如果写在了aop:aspect标签内部，则表示只用当前切面可用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(public void com.dzu.service.CustomerServiceImpl.saveCustomer() )"</span> <span class="attr">id</span>=<span class="string">"pt1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"printLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 五种通知方式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">配置前置通知，切入点方法正常执行之前执行</span></span><br><span class="line"><span class="comment">&lt;aop:before method="" pointcur-ref="" /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">配置后置通知，切入点方法正常执行之后执行</span></span><br><span class="line"><span class="comment">&lt;aop:after-returning method="" pointcur-ref="" /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">配置异常通知，切入点方法正常执行之前执行</span></span><br><span class="line"><span class="comment">&lt;aop:after-throwing method="" pointcur-ref="" /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">配置最终通知，切入点方法正常执行之前执行</span></span><br><span class="line"><span class="comment">&lt;aop:after method="" pointcur-ref="" /&gt;</span></span><br><span class="line"><span class="comment">    配置环绕通知，切入点方法之前和之后执行</span></span><br><span class="line"><span class="comment"> &lt;aop:around method=""  pointcut-ref="" /&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相关类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.service;</span><br><span class="line"><span class="keyword">import</span> utils.Logger;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户层的模拟</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李 *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//new Logger().printLog();</span></span><br><span class="line">System.out.println(<span class="string">"保存了客户"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustmer</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"更新了客户..."</span>+i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"删除了客户"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个用于记录日志的类</span></span><br><span class="line"><span class="comment"> * 计划让其业务核心方法（切入点方法）执行之前执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李 *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Logger中的pringLog方法开始记录日志了。。。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ui;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.dzu.service.ICustomerService;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">ICustomerService cs = (ICustomerService) ac.getBean(<span class="string">"customerService"</span>);</span><br><span class="line">cs.saveCustomer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例2（基于注解的AOP配置）："><a href="#案例2（基于注解的AOP配置）：" class="headerlink" title="案例2（基于注解的AOP配置）："></a>案例2（基于注解的AOP配置）：</h4><p>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定要扫描的包名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dzu.AOP.acpectj.annotation"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 启动基于注解的声明式aspectj支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>  &gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接口类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.AOP.acpectj.annotation;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.AOP.acpectj.annotation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"保存了信息。。。。。。。。。"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"删除了信息。。。。。。。。。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.AOP.acpectj.annotation;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.Joinpoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"><span class="comment">//使用一个返回值为void的方法用来定义切入点</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(public void com.dzu.AOP.acpectj.annotation.*.*(..) )"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"myPointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">System.out.println(<span class="string">"我调用的方法是："</span>+joinPoint.getTarget());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AfterReturning</span>(<span class="string">"myPointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfter</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">System.out.println(<span class="string">"我调用的方法是："</span>+joinPoint.getTarget());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"myPointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint proJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"环绕通知，前增强"</span>);</span><br><span class="line">Object obj = proJoinPoint.proceed();</span><br><span class="line">System.out.println(<span class="string">"环绕通知，后增强"</span>);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AfterThrowing</span>(value=<span class="string">"myPointCut()"</span>,throwing=<span class="string">"e"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterThrowing</span><span class="params">(JoinPoint joinPoint,Throwable e)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"发生了异常"</span>+e.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After</span>(<span class="string">"myPointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myEnd</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.AOP.acpectj.annotation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String xmlpath=<span class="string">"com/dzu/AOP/acpectj/annotation/bean.xml"</span>;</span><br><span class="line">ApplicationContext application = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlpath);</span><br><span class="line">UserDao userDao = (UserDao) application.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">userDao.save();</span><br><span class="line">userDao.del();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring中的JdbcTemplate"><a href="#Spring中的JdbcTemplate" class="headerlink" title="Spring中的JdbcTemplate"></a>Spring中的JdbcTemplate</h1><h5 id="相关包："><a href="#相关包：" class="headerlink" title="相关包："></a>相关包：<img src="/images/Spring/image-20200311205229678.png" alt="image-20200311205229678"></h5><h5 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.jdbcTemplate01;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最基本用法</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义数据源</span></span><br><span class="line">DriverManagerDataSource ds = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">ds.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">ds.setUrl(<span class="string">"jdbc:mysql://localhost:3306/jdbctemplate"</span>);</span><br><span class="line">ds.setUsername(<span class="string">"root"</span>);</span><br><span class="line">ds.setPassword(<span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//1.获取对象</span></span><br><span class="line">JdbcTemplate jt = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">jt.setDataSource(ds);</span><br><span class="line"><span class="comment">//2.执行操作</span></span><br><span class="line">jt.execute(<span class="string">"insert into account(name,money) values('qq',14896)"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="spring中配置使用"><a href="#spring中配置使用" class="headerlink" title="spring中配置使用:"></a>spring中配置使用:</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置jdbcTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/jdbctemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.jdbcTemplate01;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入门</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.获取容器</span></span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line"><span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line"><span class="comment">//3.执行操作</span></span><br><span class="line">jt.execute(<span class="string">"insert into account(name,money) values('lee',99999)"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="执行操作："><a href="#执行操作：" class="headerlink" title="执行操作："></a>执行操作：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzu.jdbcTemplate01;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入门</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.获取容器</span></span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line"><span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line"><span class="comment">//3.执行操作</span></span><br><span class="line"><span class="comment">//保存</span></span><br><span class="line">jt.update(<span class="string">"insert into account(name,money) values(?,?)"</span>, <span class="string">"eee"</span>,<span class="number">9988</span>);</span><br><span class="line"><span class="comment">//更新</span></span><br><span class="line">jt.update(<span class="string">"update account set money=? where name=?"</span>,<span class="number">4567</span>,<span class="string">"eee"</span>);</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">jt.update(<span class="string">"delete from account where name=?"</span>,<span class="string">"eee"</span>);</span><br><span class="line"><span class="comment">//查询所有</span></span><br><span class="line"><span class="comment">//RowMapper rm = null;</span></span><br><span class="line">List&lt;Account&gt; acc=jt.query(<span class="string">"select * from account where money&gt;?"</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), 100)</span>;</span><br><span class="line"><span class="keyword">for</span>(Account a:acc) &#123;</span><br><span class="line">System.out.println(a.toString());</span><br><span class="line">&#125;</span><br><span class="line">查询一个</span><br><span class="line">List&lt;Account&gt; acc=jt.query(<span class="string">"select * from account where id=?"</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), 1)</span>;</span><br><span class="line">System.out.println(acc.isEmpty()?<span class="string">"没有"</span>:acc.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询返回一行一列：聚合函数的使用</span></span><br><span class="line"><span class="comment">//queryForObject是spring3.x之后的</span></span><br><span class="line">Integer count1=jt.queryForObject(<span class="string">"select count(*) from account where money&gt;?"</span>, Integer<span class="class">.<span class="keyword">class</span>, 5000)</span>;</span><br><span class="line">Long count2=jt.queryForObject(<span class="string">"select count(*) from account where money&gt;?"</span>, Long<span class="class">.<span class="keyword">class</span>, 5000)</span>;</span><br><span class="line">System.out.println(count1+<span class="string">" "</span>+count2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring中的事务控制"><a href="#Spring中的事务控制" class="headerlink" title="Spring中的事务控制"></a>Spring中的事务控制</h1><h2 id="Xml配置"><a href="#Xml配置" class="headerlink" title="Xml配置"></a>Xml配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置账户的业务层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.lzw.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给accountDao注入数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置账户的持久层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.lzw.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给AccountDaoImpl中的jdbcTemplate注入数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置spring内置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///mybatis"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring中基于xml的声明式事务控制配置步骤</span></span><br><span class="line"><span class="comment">        配置事务管理器</span></span><br><span class="line"><span class="comment">        配置事务通知</span></span><br><span class="line"><span class="comment">            导入事务的约束 tx名称空间约束，同时也需要aop的</span></span><br><span class="line"><span class="comment">            使用tx:advice标签配置事务通知</span></span><br><span class="line"><span class="comment">                属性</span></span><br><span class="line"><span class="comment">                    id 给事务唯一通知</span></span><br><span class="line"><span class="comment">                    transaction-manager 给事务通知一个事务管理器用</span></span><br><span class="line"><span class="comment">        配置aop通用切入点表达式</span></span><br><span class="line"><span class="comment">　　　　　建立事务通知和切入点表达式对应关系</span></span><br><span class="line"><span class="comment">　　　　　配置事务属性</span></span><br><span class="line"><span class="comment">            在事务的通知tx:advice标签内部</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置事务属性</span></span><br><span class="line"><span class="comment">            isolation 用于指定隔离级别 默认是default 表示使用数据库的隔离级别</span></span><br><span class="line"><span class="comment">            propagation 指定事务的传播行为 默认是required 表示一定有事务 增删改的选择  查询方法可以选择 supports</span></span><br><span class="line"><span class="comment">            read-only 指定事务是否只读 只有查询方法才能设置为true 默认是false</span></span><br><span class="line"><span class="comment">            timeout 指定事务的超时时间 默认是-1 表示永不超时 如果指定了数据 单位为秒</span></span><br><span class="line"><span class="comment">            rollback-for 用于指定一个异常 当产生异常 事务回滚 产生其他异常 事务不回滚 没有默认值 任何异常都回滚</span></span><br><span class="line"><span class="comment">            no-rollback-for 指定一个异常 当产生异常时 事务不回滚 产生其他异常时 事务回滚 没有默认值 表示任何异常都回滚</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transfer"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.lzw.service.impl.*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--建立切入点表达式和事务通知的对应关系--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;spring配置&quot;&gt;&lt;a href=&quot;#spring配置&quot; class=&quot;headerlink&quot; title=&quot;spring配置&quot;&gt;&lt;/a&gt;spring配置&lt;/h2&gt;&lt;h3 id=&quot;1-导包&quot;&gt;&lt;a href=&quot;#1-导包&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="javaEE" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/javaEE/"/>
    
      <category term="ssm框架" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/javaEE/ssm%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="javaEE" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/javaEE/"/>
    
      <category term="spring" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/05/22/Mybatis/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/05/22/Mybatis/</id>
    <published>2020-05-22T03:06:36.000Z</published>
    <updated>2020-05-22T03:17:11.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这里介绍mybatis的基本使用，配置。其中包括全局配置文件，SQL映射文件，接口式编程，动态sql以及缓存等内容</p><a id="more"></a><h1 id="Mybatis小案例"><a href="#Mybatis小案例" class="headerlink" title="Mybatis小案例"></a>Mybatis小案例</h1><h2 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h2><p>步骤</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>根据<span class="type">xml</span>配置文件（全局配置文件）创建一个SqlSessionFactory对象，有数据源一些运行环境</span><br><span class="line"><span class="number">2.</span><span class="keyword">SQL</span>映射文件：配置了每一个<span class="keyword">SQL</span>，以及<span class="keyword">SQL</span>的封装规则等</span><br><span class="line"><span class="number">3.</span>将<span class="keyword">SQL</span>映射文件注册在全局配置文件中</span><br><span class="line"><span class="number">4.</span>写代码：</span><br><span class="line">（<span class="number">1</span>）：根据全局配置文件得到SQLSessionFactory</span><br><span class="line">（<span class="number">2</span>）：使用SQLSession工厂，获取到sqlSession对象，使用它来进行增删改查</span><br><span class="line">一个sqlSession就是代表和数据库的一次会话，用完要关闭</span><br><span class="line">（<span class="number">3</span>）：使用<span class="keyword">SQL</span>的唯一标识来告诉MyBatis执行哪一个<span class="keyword">SQL</span>。<span class="keyword">SQL</span>都是保存在<span class="keyword">SQL</span>映射文件中的。</span><br></pre></td></tr></table></figure><p>全局配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 将我们写好的sql映射文件，一定要注册到全局配置文件中 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"MybatisHelloWorld/AccountMapper.xml"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SQL映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"MybatisHelloWorld"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">namespace:名称空间</span></span><br><span class="line"><span class="comment">id:唯一标识</span></span><br><span class="line"><span class="comment">resultType：返回值类型</span></span><br><span class="line"><span class="comment">#&#123;id&#125;：从传递过来的参数中，取出id值</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAccount"</span> <span class="attr">resultType</span>=<span class="string">"MybatisHelloWorld.Account"</span>&gt;</span></span><br><span class="line"> select id,last_name as lastname,email,gender from Account where id = #&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实体类：Account（id,name,email,gender）略</p><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MybatisHelloWorld;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象</span></span><br><span class="line">String resource = <span class="string">"MybatisHelloWorld/mybatis_config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"><span class="comment">//2.获取sqlSession实例，能直接执行已经映射的sql语句</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//参数：Sql唯一标识（保险起见【namespace+id】）   参数值</span></span><br><span class="line">Account account = openSession.selectOne(<span class="string">"MybatisHelloWorld.selectAccount"</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(account.toString());</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例二：接口式编程"><a href="#案例二：接口式编程" class="headerlink" title="案例二：接口式编程"></a>案例二：接口式编程</h2><p>在案例一上进行改变</p><p>创建接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MybatisInterface;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">getAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改SQL映射文件，将其中的namespace改为接口全类名 select的id改为方法名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"MybatisInterface.AccountDao"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">namespace:名称空间;指定为接口的全类名</span></span><br><span class="line"><span class="comment">id:唯一标识</span></span><br><span class="line"><span class="comment">resultType：返回值类型</span></span><br><span class="line"><span class="comment">#&#123;id&#125;：从传递过来的参数中，取出id值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public Account getAccountById(Integer id);</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccountById"</span> <span class="attr">resultType</span>=<span class="string">"MybatisInterface.Account"</span>&gt;</span></span><br><span class="line"> select id,last_name as lastname,email,gender from Account where id = #&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：其中前两步和案例一相同，第三步改为接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MybatisInterface;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象</span></span><br><span class="line">String resource = <span class="string">"MybatisInterface/mybatis_config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"><span class="comment">//2.获取sqlSession实例，能直接执行已经映射的sql语句</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//3.获取接口的实现类对象</span></span><br><span class="line"><span class="comment">//会为接口自动创建代理对象。代理对象去实现增删改查</span></span><br><span class="line">AccountDao accountDao = openSession.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Account account = accountDao.getAccountById(<span class="number">1</span>);</span><br><span class="line">System.out.println(account.toString());</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小总结："><a href="#小总结：" class="headerlink" title="小总结："></a>小总结：</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>接口式编程</span><br><span class="line">原生：      Dao <span class="comment">--&gt;  DaoImpl</span></span><br><span class="line">MyBatis:   Mapper <span class="comment">---&gt; xxxMapper.xml</span></span><br><span class="line"><span class="number">2.</span>SqlSession代表和数据库的一次会话，用完必需关闭</span><br><span class="line"><span class="number">3.</span>SqlSession和<span class="keyword">connection</span>一样都是非线程安全的。每次使用都应该去获取新的对象</span><br><span class="line"><span class="number">4.</span>mapper接口没有实现类，但是mybatis会为这个接口生成一个代理对象</span><br><span class="line">将接口和<span class="type">xml</span>进行绑定AccountDao accountDao = openSession.getMapper(AccountDao.<span class="keyword">class</span>);</span><br><span class="line"><span class="number">5.</span>两个重要的配置文件：</span><br><span class="line">Mybatis的全局配置文件：包含数据库连接池信息，事务管理器。。。系统运行环境信息</span><br><span class="line"><span class="keyword">SQL</span>映射文件：保存了每一个<span class="keyword">sql</span>语句的映射信息</span><br></pre></td></tr></table></figure><h1 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h1><h2 id="1-properties引入外部配置文件"><a href="#1-properties引入外部配置文件" class="headerlink" title="1.properties引入外部配置文件"></a>1.properties引入外部配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.mybatis可以使用properties来引入外部properties配置文件的内容；</span></span><br><span class="line"><span class="comment">resource：引入类路径下的资源</span></span><br><span class="line"><span class="comment">url：引入网络路径或者磁盘路径下的资源</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"MybatisInterface/dbconfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">jdbc.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/mybatis</span><br><span class="line"><span class="attr">jdbc.username</span>=root</span><br><span class="line"><span class="attr">jdbc.password</span>=root</span><br></pre></td></tr></table></figure><h2 id="2-settings运行时行为设置"><a href="#2-settings运行时行为设置" class="headerlink" title="2.settings运行时行为设置"></a>2.settings运行时行为设置</h2><p>举例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bean属性的命名例如：lastName   而在数据库中是last_Name  这造成了不一致，在写SQL语句时会有问题</span><br><span class="line">解决方式：</span><br><span class="line">全局配置文件中</span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">settings包含很多重要的设置项</span></span><br><span class="line"><span class="comment">setting：用来设置每一个设置项</span></span><br><span class="line"><span class="comment">name：设置项的名</span></span><br><span class="line"><span class="comment">value：设置项取值</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">通过这样设置，就可以实现自动转化。</span><br></pre></td></tr></table></figure><h2 id="3-typeAliases别名"><a href="#3-typeAliases别名" class="headerlink" title="3.typeAliases别名"></a>3.typeAliases别名</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 别名处理器 ，别名不区分大小写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> typeAlias:为某个java类型起别名</span></span><br><span class="line"><span class="comment"> type：指定要起别名的类型全类名；默认别名account</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"MybatisInterface.Account"</span> <span class="attr">alias</span>=<span class="string">"acc"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">package批量起别名</span></span><br><span class="line"><span class="comment">name:指定包名（为当前包以及下面所有的后带包的每一个类都起一个默认别名（类名小写））</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 批量起别名的情况下，使用@Alias注解为某个类型指定新的别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-environments环境"><a href="#4-environments环境" class="headerlink" title="4.environments环境"></a>4.environments环境</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">environments:环境们，Mybatis可以配置多种环境，default指定使用某种环境，可达到快速切换</span></span><br><span class="line"><span class="comment">environment：配置一个具体的环境信息，必须有两个标签；id代表当前环境的唯一标识</span></span><br><span class="line"><span class="comment">transactionManager：事务管理器</span></span><br><span class="line"><span class="comment">type：食物管理器的类型；Jdbc(JdbcTransactionFactory) |MANAGED(ManagedTransactionFactory)</span></span><br><span class="line"><span class="comment">自定义事务管理器，实现TransactionFactory接口</span></span><br><span class="line"><span class="comment">datasource：数据源</span></span><br><span class="line"><span class="comment">type：数据源类型；UNPOOLED|POOLED|JNDI</span></span><br><span class="line"><span class="comment">自定义数据源:实现DataSourceFactory接口</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-databaseIdProvider-支持数据库厂商的"><a href="#5-databaseIdProvider-支持数据库厂商的" class="headerlink" title="5.databaseIdProvider:支持数据库厂商的"></a>5.databaseIdProvider:支持数据库厂商的</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> databaseIdProvider:支持数据库厂商的</span></span><br><span class="line"><span class="comment"> type="DB_VENDOR"，作用就是得到数据库厂商的标识</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 为不同的数据库厂商起别名 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Mysql"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SQL映射文件中：<strong>databaseId</strong> 就是我们起的别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccountById"</span> <span class="attr">resultType</span>=<span class="string">"acc"</span> <span class="attr">databaseId</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"> select * from Account where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-mappers-sql映射注册"><a href="#6-mappers-sql映射注册" class="headerlink" title="6.mappers      sql映射注册"></a>6.mappers      sql映射注册</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> mappers:将sql映射注册到全局配置中</span></span><br><span class="line"><span class="comment"> mapper:注册一个SQL映射</span></span><br><span class="line"><span class="comment"> resource：引用类路径下的sql映射文件</span></span><br><span class="line"><span class="comment"> url：引用网络或者磁盘路径下的sql映射文件</span></span><br><span class="line"><span class="comment"> class:注册接口</span></span><br><span class="line"><span class="comment"> 1.有SQL映射文件，映射文件名必须和接口同名，并且与接口同一个目录下</span></span><br><span class="line"><span class="comment"> 2.没有SQL映射文件，所有的SQL都是利用注解写在接口上</span></span><br><span class="line"><span class="comment">package：批量注册</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"MybatisInterface/AccountMapper.xml"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="sql映射文件"><a href="#sql映射文件" class="headerlink" title="sql映射文件"></a>sql映射文件</h1><h2 id="1-映射文件的增删改查"><a href="#1-映射文件的增删改查" class="headerlink" title="1.映射文件的增删改查"></a>1.映射文件的增删改查</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">注意：<span class="number">1</span>.Mybatis允许增删改直接定义以下返回值</span><br><span class="line"> Integer、Long、Boolean</span><br><span class="line"> <span class="number">2</span>.SqlSession openSession = sqlSessionFactory.openSession();手动提交</span><br><span class="line"> SqlSession openSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);自动提交</span><br></pre></td></tr></table></figure><p>dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MybatisInterfaceCUID;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">getAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sql映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"MybatisInterfaceCUID.AccountDao"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">namespace:名称空间;指定为接口的全类名</span></span><br><span class="line"><span class="comment">id:唯一标识</span></span><br><span class="line"><span class="comment">resultType：返回值类型</span></span><br><span class="line"><span class="comment">#&#123;id&#125;：从传递过来的参数中，取出id值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public Account getAccountById(Integer id);</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccountById"</span> <span class="attr">resultType</span>=<span class="string">"acc"</span> <span class="attr">databaseId</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"> select * from Account where id = #&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addAccount"</span> &gt;</span></span><br><span class="line"> insert into account(last_name,email,gender) values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAccount"</span>&gt;</span></span><br><span class="line"> update account set last_name=#&#123;lastName&#125;,email=#&#123;email&#125;,gender=#&#123;gender&#125; where id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteAccountById"</span>&gt;</span></span><br><span class="line"> delete from account where id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span>xml</span><br></pre></td></tr></table></figure><p>全局配置与bean和上面案例大致相同，在此省略。</p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MybatisInterfaceCUID;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title">getSqlSessionFatory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象</span></span><br><span class="line">String resource = <span class="string">"MybatisInterfaceCUID/mybatis_config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"><span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SqlSessionFactory sqlSessionFactory =getSqlSessionFatory();</span><br><span class="line"><span class="comment">//2.获取sqlSession实例，能直接执行已经映射的sql语句不自动提交</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Mybatis允许增删改直接定义以下返回值</span></span><br><span class="line"><span class="comment"> * Integer、Long、Boolean</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//3.获取接口的实现类对象</span></span><br><span class="line"><span class="comment">//会为接口自动创建代理对象。代理对象去实现增删改查</span></span><br><span class="line">AccountDao accountDao = openSession.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="comment">//Account account = accountDao.getAccountById(1);</span></span><br><span class="line"><span class="comment">//增加</span></span><br><span class="line"><span class="comment">//Account acc = new Account(null,"aaa","www@eee","0");</span></span><br><span class="line"><span class="comment">//accountDao.addAccount(acc);</span></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="comment">//Account acc = new Account(1,"aaa","www@eee","0");</span></span><br><span class="line"><span class="comment">//accountDao.updateAccount(acc);</span></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">accountDao.deleteAccountById(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//手动提交</span></span><br><span class="line">openSession.commit();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-insert获取自增主键的值"><a href="#2-insert获取自增主键的值" class="headerlink" title="2.insert获取自增主键的值"></a>2.insert获取自增主键的值</h2><p>映射文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> mysql支持自增主键，自增主键值的获取，Mybatis也是利用statement.getGenreadKeys();</span></span><br><span class="line"><span class="comment"> useGeneratedKeys="true":使用自增主键获取主键值策略</span></span><br><span class="line"><span class="comment"> keyProperty:指定对应的主键属性，也就是Mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addAccount"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"> insert into account(last_name,email,gender) values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-参数处理-单个参数-amp-多个参数-amp-命名参数"><a href="#3-参数处理-单个参数-amp-多个参数-amp-命名参数" class="headerlink" title="3.参数处理_单个参数&amp;多个参数&amp;命名参数"></a>3.参数处理_单个参数&amp;多个参数&amp;命名参数</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">单个参数：Mybatis不会做特殊处理</span><br><span class="line"><span class="meta">#&#123;参数名&#125;，取出参数值，&#123;&#125;里随便写，无所谓</span></span><br><span class="line"></span><br><span class="line">多个参数：mybatis会做特殊处理</span><br><span class="line">多个参数会被封装成一个map</span><br><span class="line"><span class="keyword">key</span>：param1...paramN，或者参数的索引也可以</span><br><span class="line">value：传入的参数值</span><br><span class="line"><span class="meta">#&#123;&#125;就是从map中获取指定的可以值</span></span><br><span class="line">异常</span><br><span class="line"> org.apache.ibatis.binding.BindingException:</span><br><span class="line">         Parameter <span class="comment">'id' not found. </span></span><br><span class="line">         Available parameters are [arg1, arg0, param1, param2]</span><br><span class="line">    操作：</span><br><span class="line">    方法：<span class="keyword">public</span> Account getAccByIdAndLastName(<span class="built_in">Integer</span> id,<span class="built_in">String</span> lastName);</span><br><span class="line">    取值：<span class="meta">#&#123;id&#125;,#&#123;lastName&#125;</span></span><br><span class="line">    </span><br><span class="line">命名参数：，明确指定封装参数时map的<span class="keyword">key</span>   </span><br><span class="line"><span class="keyword">public</span> Account getAccByIdAndLastName(@Param(<span class="string">"id"</span>)<span class="built_in">Integer</span> id,@Param(<span class="string">"lastName"</span>)<span class="built_in">String</span> lastName);</span><br><span class="line">多个参数会被封装成一个map</span><br><span class="line"><span class="keyword">key</span>：使用@Param注解此值</span><br><span class="line">value：参数值</span><br><span class="line"><span class="meta">#&#123;指定的key&#125;取出对应的参数</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &lt;<span class="keyword">select</span> id=<span class="string">"getAccByIdAndLastName"</span> resultType=<span class="string">"MybatisInterfaceCUID.Account"</span> databaseId=<span class="string">"mysql"</span> &gt;</span><br><span class="line"> <span class="keyword">select</span> * <span class="keyword">from</span> account <span class="keyword">where</span> id=<span class="meta">#&#123;id&#125; and last_name=#&#123;lastName&#125;</span></span><br><span class="line"> &lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="4-参数处理——POJO-amp-Map-amp-TO"><a href="#4-参数处理——POJO-amp-Map-amp-TO" class="headerlink" title="4.参数处理——POJO&amp;Map&amp;TO"></a>4.参数处理——POJO&amp;Map&amp;TO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POJO:</span><br><span class="line">如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入POJO</span><br><span class="line">#&#123;属性名&#125;：传入的pojo的属性值</span><br><span class="line">Map：</span><br><span class="line">如果多个参数不是业务模型中的数据，没有对应的pojo，为了方便，我们也可以传入map</span><br><span class="line">#&#123;key&#125;：取出map中对应的值</span><br><span class="line">接口的方法：<span class="function"><span class="keyword">public</span> Account <span class="title">getAccByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line">测试：</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"id"</span>,<span class="number">2</span>);</span><br><span class="line">map.put(<span class="string">"lastName"</span>,<span class="string">"aaa"</span>);</span><br><span class="line">Account account = accountDao.getAccByMap(map);</span><br><span class="line">To：</span><br><span class="line">如果多个参数不是业务模型中的数据，但是要经常使用，推荐来编写一个TO（transfer Object）数据传输对象</span><br><span class="line">Page&#123;</span><br><span class="line">    <span class="keyword">int</span> index；</span><br><span class="line">    <span class="keyword">int</span> size；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特别注意：如果是Connection（List，Set）类型活着是数组，也会特殊处理。也是吧传入的list或者数组封装在map中。</strong></p><p>​    key：Connection(connection)<br>​                List还可以是list<br>​                数组（array）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">getAccById</span><span class="params">(List&lt;Integer&gt; ids)</span></span>;</span><br></pre></td></tr></table></figure><p>取值：取出第一个id的值：#{list[0]}</p><h2 id="5-参数值的获取——-与-区别"><a href="#5-参数值的获取——-与-区别" class="headerlink" title="5.参数值的获取——#{}与${}区别"></a>5.参数值的获取——#{}与${}区别</h2><p>#{}：可以获取map中的值或者pojo对象属性的值</p><p>${}：可以获取map中的值或者pojo对象属性的值</p><p>区别：<br>    #{}：是以预编译的形式，将参数设置到SQL语句中：PreparedStatement<br>    ${}:取出的值直接拼装在sql语句中；无法防止sql注入</p><p>大多情况下，我们取参数的值都应该去使用#{}</p><p>分表、排序：按照年份拆分<br>    select * from ${year}_salary where xxx;<br>    select * from account order by ${f_name} ${order}</p><h2 id="6-取值时指定参数相关规则"><a href="#6-取值时指定参数相关规则" class="headerlink" title="6.#{}取值时指定参数相关规则"></a>6.#{}取值时指定参数相关规则</h2><p>#{}：更丰富的用法</p><p>​    规定参数的一些规则：<br>​    JavaType、jbdcType、mode（存储过程）、numericScale、resultMap、typeHandler、jdbcTypeName…</p><p>​    javaType通常需要在某种特定的条件下被设置：<br>​        在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理，比如oracle（报错）<br>​        JdbcType OTHER:无瑕的类型；因为Mybatis对所有的null都映射的是原生jdbc的OTHER类型，oracle不能正确处理<br>​    由于全局配置中：jdbcTypeForNull=OTHER;oracle不支持<br>​        1.#{email，jdbcType=Null}；<br>​        2.jdbcTypeForNull=NULL</p><h2 id="7-SELECT"><a href="#7-SELECT" class="headerlink" title="7.   SELECT"></a>7.   SELECT</h2><h3 id="7-1-select返回list"><a href="#7-1-select返回list" class="headerlink" title="7.1  select返回list"></a>7.1  select返回list</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">public List<span class="tag">&lt;<span class="name">Account</span>&gt;</span> getAccByLastNameLike(String lastName); </span></span><br><span class="line"><span class="xml">返回的是一个集合，但是resultType要写集合里面元素的类型</span></span><br><span class="line"><span class="xml">--&gt;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccByLastNameLike"</span> <span class="attr">resultType</span>=<span class="string">"MybatisInterfaceCUID.Account"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> select * from account where last_name like #</span><span class="template-variable">&#123;lastName&#125;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="7-2-select记录封装map"><a href="#7-2-select记录封装map" class="headerlink" title="7.2  select记录封装map"></a>7.2  select记录封装map</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//返回一条记录map，key就是列名，值就是对应的值</span><br><span class="line"> <span class="comment">&lt;!-- public Map&lt;String,Object&gt; getAccByIdReturnMap(Integer id); --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccByIdReturnMap"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line"> select * from account where id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多条记录封装成map：Map&lt;Integer，Account&gt;：键是这条记录的主键，值是记录封装后的Javabean</span></span><br><span class="line"><span class="meta">@MapKey</span>(<span class="string">"id"</span>)<span class="comment">//告诉Mybatis封装这个map时，使用哪个属性作为主键</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;Integer,Account&gt; <span class="title">getAccByLastNameLikeReturnMap</span><span class="params">(String lastName)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public Map&lt;Integer,Account&gt; getAccByLastNameLikeReturnMap(String lastName); --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccByLastNameLikeReturnMap"</span> <span class="attr">resultType</span>=<span class="string">"MybatisInterfaceCUID.Account"</span>&gt;</span></span><br><span class="line"> select * from account where last_name like #&#123;lastName&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-resultMap——自定义结果集映射规则"><a href="#7-3-resultMap——自定义结果集映射规则" class="headerlink" title="7.3  resultMap——自定义结果集映射规则"></a>7.3  resultMap——自定义结果集映射规则</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自定义某个JavaBean的封装规则</span></span><br><span class="line"><span class="comment"> type:自定义规则的java类型</span></span><br><span class="line"><span class="comment"> id:唯一id,方便引用</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"MybatisInterfaceCUID.Account"</span> <span class="attr">id</span>=<span class="string">"MyAcc"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 指定主键列的封装规则</span></span><br><span class="line"><span class="comment"> id定义主键底层有优化</span></span><br><span class="line"><span class="comment"> column:指定哪一列</span></span><br><span class="line"><span class="comment"> property：指定对应Javabean的属性</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 定义普通列规则 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- resultMap:自定义结果集映射规则 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- public Account getAccById(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccById"</span> <span class="attr">resultMap</span>=<span class="string">"MyAcc"</span>&gt;</span></span><br><span class="line">select * from account where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SqlSessionFactory sqlSessionFactory =getSqlSessionFatory();</span><br><span class="line"><span class="comment">//2.获取sqlSession实例，能直接执行已经映射的sql语句不自动提交</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Mybatis允许增删改直接定义以下返回值</span></span><br><span class="line"><span class="comment"> * Integer、Long、Boolean</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//3.获取接口的实现类对象</span></span><br><span class="line"><span class="comment">//会为接口自动创建代理对象。代理对象去实现增删改查</span></span><br><span class="line">AccountMapperPlus accountMapperPlus = openSession.getMapper(AccountMapperPlus<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Account aaa = accountMapperPlus.getAccById(<span class="number">2</span>);</span><br><span class="line">System.out.println(aaa.toString()); </span><br><span class="line">openSession.commit();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-resultMap——关联查询"><a href="#7-4-resultMap——关联查询" class="headerlink" title="7.4 resultMap——关联查询"></a>7.4 resultMap——关联查询</h3><h4 id="1-级联属性封装结果"><a href="#1-级联属性封装结果" class="headerlink" title="1.级联属性封装结果"></a><strong>1.级联属性封装结果</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 场景1：</span></span><br><span class="line"><span class="comment"> 查询Account同时查出Department</span></span><br><span class="line"><span class="comment"> Account === Department</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- public Account getAccAndDept(Integer id); --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 联合查询：级联属性封装结果集</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"MybatisInterfaceCUID.Account"</span> <span class="attr">id</span>=<span class="string">"MyDifAcc"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"did"</span> <span class="attr">property</span>=<span class="string">"dept.id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dept_name"</span> <span class="attr">property</span>=<span class="string">"dept.departmentName"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccAndDept"</span> <span class="attr">resultMap</span>=<span class="string">"MyDifAcc"</span>&gt;</span></span><br><span class="line"> select a.*,d.id as did,d.dept_name from account as a,dept as d</span><br><span class="line"> where a.d_id=d.id and a.id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-使用association定义关联对象封装规则"><a href="#2-使用association定义关联对象封装规则" class="headerlink" title="2.使用association定义关联对象封装规则"></a>2.使用association定义关联对象封装规则</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"MybatisInterfaceCUID.Account"</span> <span class="attr">id</span>=<span class="string">"MyDifAcc2"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  association可以指定联合的javaBean对象</span></span><br><span class="line"><span class="comment"> property="dept":指定哪个属性是联合的对象</span></span><br><span class="line"><span class="comment"> javaType:指定这个属性对象的类型【不可省略】</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> <span class="attr">javaType</span>=<span class="string">"MybatisInterfaceCUID.Department"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"did"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dept_name"</span> <span class="attr">property</span>=<span class="string">"departmentName"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccAndDept"</span> <span class="attr">resultMap</span>=<span class="string">"MyDifAcc2"</span>&gt;</span></span><br><span class="line"> select a.*,d.id as did,d.dept_name from account as a,dept as d</span><br><span class="line"> where a.d_id=d.id and a.id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-association分步查询"><a href="#3-association分步查询" class="headerlink" title="3.association分步查询"></a>3.association分步查询</h4><p>准备工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部门映射，定义通过id查询部门的方法</span></span><br><span class="line"><span class="keyword">package</span> MybatisInterfaceCUID;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--部门的sql映射文件，以及将映射文件在全局配置文件中注册--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"MybatisInterfaceCUID.DepartmentMapper"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- public Department getDeptById(Integer id); --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDeptById"</span> <span class="attr">resultType</span>=<span class="string">"MybatisInterfaceCUID.Department"</span>&gt;</span></span><br><span class="line"> select id ,dept_name as departmentName from dept where id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用association进行分步查询 </span></span><br><span class="line"><span class="comment"> 1.先根据员工id查询员工信息</span></span><br><span class="line"><span class="comment"> 2.根据查询员工信息中的d_id去部门表查出部门信息</span></span><br><span class="line"><span class="comment"> 3.将部门信息设置到员工中</span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"MybatisInterfaceCUID.Account"</span> <span class="attr">id</span>=<span class="string">"MyAccByStep"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- association定义关联对象的封装规则 </span></span><br><span class="line"><span class="comment"> select:表明当前属性是调用select指定方法查出的结果</span></span><br><span class="line"><span class="comment"> column：指定将那一列的值传给这个方法</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span>         <span class="attr">select</span>=<span class="string">"MybatisInterfaceCUID.DepartmentMapper.getDeptById"</span>                    <span class="attr">column</span>=<span class="string">"d_id"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- public Account getAccByIdStep(Integer id); --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccByIdStep"</span> <span class="attr">resultMap</span>=<span class="string">"MyAccByStep"</span>&gt;</span></span><br><span class="line"> select * from account where id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>延迟加载</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可以使用延迟加载</span></span><br><span class="line"><span class="comment"> Account====Dept：</span></span><br><span class="line"><span class="comment"> 我们每次查询Account对象的时候，都将一起查询出来。</span></span><br><span class="line"><span class="comment"> 部门信息在我们使用的时候再去查询；</span></span><br><span class="line"><span class="comment"> 分步查询的基础之上，加上两个配置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">全局配置中：</span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>延迟加载</span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-connection定义关联集合封装规则"><a href="#4-connection定义关联集合封装规则" class="headerlink" title="4.connection定义关联集合封装规则"></a>4.connection定义关联集合封装规则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String departmentName;</span><br><span class="line"><span class="keyword">private</span> List&lt;Account&gt; accs;</span><br><span class="line">&#125;简略写写</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptByIdPlus</span><span class="params">(Integer id)</span></span>;这是查询方法</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"MybatisInterfaceCUID.Department"</span> <span class="attr">id</span>=<span class="string">"MyDept"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"did"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dept_name"</span> <span class="attr">property</span>=<span class="string">"departmentName"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- connection定义关联集合类型的属性封装规则</span></span><br><span class="line"><span class="comment"> ofType:指定集合里面元素的类型</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accs"</span> <span class="attr">ofType</span>=<span class="string">"MybatisInterfaceCUID.Account"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 定义这个集合中元素的封装规则 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"eid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- public Department getDeptByIdPlus(Integer id); --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDeptByIdPlus"</span> <span class="attr">resultMap</span>=<span class="string">"MyDept"</span>&gt;</span></span><br><span class="line"> select d.id as did,d.dept_name as dept_name,e.id as eid,e.last_name as last_name,e.email,e.gender as gender</span><br><span class="line"> from dept as d </span><br><span class="line"> left join account as e</span><br><span class="line"> on d.id=e.d_id</span><br><span class="line"> where d.id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特别注意：一对多关联查询时，如果一方跟多方id相同，则多方只会查出一个，这时使他们id不同即可。</p><p><strong>分步查询：</strong><br>场景2：<br>         查询部门的时候将部门对应的所有员工信息也查询出来。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">员工sql映射文件中添加查询方法</span><br><span class="line"><span class="comment">&lt;!-- public List&lt;Account&gt; getAccByDeptId(Integer id); --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccByDeptId"</span> <span class="attr">resultType</span>=<span class="string">"MybatisInterfaceCUID.Account"</span>&gt;</span></span><br><span class="line"> select * from account where d_id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分步查询 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"MybatisInterfaceCUID.Department"</span> <span class="attr">id</span>=<span class="string">"MyDeptStep"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"departmentName"</span> <span class="attr">property</span>=<span class="string">"departmentName"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accs"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">select</span>=<span class="string">"MybatisInterfaceCUID.AccountMapperPlus.getAccByDeptId"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- public Department getDeptByIdStep(Integer id); --&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDeptByIdStep"</span> <span class="attr">resultMap</span>=<span class="string">"MyDeptStep"</span>&gt;</span></span><br><span class="line"> select id ,dept_name as departmentName from dept where id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line">先根据部门id,查询出部门，然后用部门id查询出员工</span><br></pre></td></tr></table></figure><h4 id="5-分步查询传递多列值-amp-fetchType"><a href="#5-分步查询传递多列值-amp-fetchType" class="headerlink" title="5.分步查询传递多列值&amp;fetchType"></a>5.分步查询传递多列值&amp;fetchType</h4><p>扩展：多列的值传递过去<br>         将多列的值封装map传递<br>         column=”{key1=column1,key2=column2}”<br>         fetchType=”lazy”:表示开启延迟加载<br>                 -lazy：延迟加载<br>                 -eager：立即加载</p><p>上方代码修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accs"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">select</span>=<span class="string">"MybatisInterfaceCUID.AccountMapperPlus.getAccByDeptId"</span></span></span><br><span class="line"><span class="tag"> 对应上方第<span class="attr">7</span>行<span class="attr">column</span>=<span class="string">"&#123;id=id&#125;"</span> <span class="attr">fetchType</span>=<span class="string">"lazy"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">&#123;id=id&#125;:第一个id对应上方员工sql映射文件的第4行#&#123;id&#125;</span><br></pre></td></tr></table></figure><h4 id="6-discriminator鉴别器"><a href="#6-discriminator鉴别器" class="headerlink" title="6.discriminator鉴别器"></a>6.discriminator鉴别器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;discriminator javaType=""&gt;&lt;/discriminator&gt;</span></span><br><span class="line"><span class="comment"> 鉴别器：Mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为</span></span><br><span class="line"><span class="comment"> 封装Account</span></span><br><span class="line"><span class="comment"> 如果查出的是女生：把部门信息查询出来，否则不查询；</span></span><br><span class="line"><span class="comment"> 如果是男生，把last_name这一列的值赋值给email</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  </span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"MybatisInterfaceCUID.Account"</span> <span class="attr">id</span>=<span class="string">"MyAccDis"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> column:指定要判定的列名</span></span><br><span class="line"><span class="comment"> javaType：列值对应的java类型</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">"string"</span> <span class="attr">column</span>=<span class="string">"gender"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 0女生  1男生 resultType：指定封装结果类型--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">resultType</span>=<span class="string">"MybatisInterfaceCUID.Account"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> <span class="attr">select</span>=<span class="string">"MybatisInterfaceCUID.DepartmentMapper.getDeptById"</span> <span class="attr">column</span>=<span class="string">"d_id"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">如果是男生，重新封装，将last_name赋值给email</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">resultType</span>=<span class="string">"MybatisInterfaceCUID.Account"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- public Account getAccByIdStep(Integer id); --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccByIdStep"</span> <span class="attr">resultMap</span>=<span class="string">"MyAccDis"</span>&gt;</span></span><br><span class="line"> select * from account where id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-动态SQL"><a href="#8-动态SQL" class="headerlink" title="8.动态SQL"></a>8.动态SQL</h2><p>​         if<br>​         choose(when,otherwise)<br>​         trim(where,set)<br>​         foreach</p><h4 id="1-需求：查询员工，要求，携带了哪个字段-查询条件就带上那个字段"><a href="#1-需求：查询员工，要求，携带了哪个字段-查询条件就带上那个字段" class="headerlink" title="1.需求：查询员工，要求，携带了哪个字段,查询条件就带上那个字段"></a><strong>1.需求：查询员工，要求，携带了哪个字段,查询条件就带上那个字段</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Account&gt; getAccsByConditionIf(Account account); --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  查询时如果某些条件没带可能SQL拼接会有问题</span></span><br><span class="line"><span class="comment">  1.给where后面加1=1，之后所有的条件都是and XXX</span></span><br><span class="line"><span class="comment">  2.mybatis使用where标签来将所有的查询条件包括在内。mybatis就会将where标签中多出来的and或者or去掉</span></span><br><span class="line"><span class="comment">  只会去掉第一个多出来的and或or</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccsByConditionIf"</span> <span class="attr">resultType</span>=<span class="string">"MybatisInterfaceCUID.Account"</span>&gt;</span></span><br><span class="line">  select * from account </span><br><span class="line">   </span><br><span class="line">  <span class="comment">&lt;!-- test:判断表达式OGNL c:if</span></span><br><span class="line"><span class="comment">  从参数中取值进行判断</span></span><br><span class="line"><span class="comment">  遇见特殊符号，应该写转义字符</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">  id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName!=''"</span>&gt;</span></span><br><span class="line">  and last_name like #&#123;lastName&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email.trim()!=''"</span>&gt;</span></span><br><span class="line">  and email=#&#123;email&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- OGNL户进行字符串和数字判断 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender==0 or gender==1"</span>&gt;</span></span><br><span class="line">  and gender=#&#123;gender&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span>     </span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上可以解决and或or出现在前面的问题，但不能解决出现在后面的问题<br>下面使用trim自定义字符串截取规则，可实现出现在后面问题。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Account&gt; getAccsByConditionTrim(Account account); --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccsByConditionTrim"</span> <span class="attr">resultType</span>=<span class="string">"MybatisInterfaceCUID.Account"</span>&gt;</span></span><br><span class="line">  select * from account </span><br><span class="line">  <span class="comment">&lt;!-- 后面多出的and或者or  where标签不能解决</span></span><br><span class="line"><span class="comment">  prefix:前缀，trim标签体中是整个字符串拼串后的结果。</span></span><br><span class="line"><span class="comment">  prefixOverrides：前缀覆盖，整个字符串前面对于非字符</span></span><br><span class="line"><span class="comment">  suffix：后缀，给拼串后的整个字符串加一个后缀</span></span><br><span class="line"><span class="comment">  suffixOverrides：后缀覆盖，去掉整个字符串后面多余的字符</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 自定义字符串截取规则 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span>  <span class="attr">suffixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">  id=#&#123;id&#125; and</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName!=''"</span>&gt;</span></span><br><span class="line">   last_name like #&#123;lastName&#125; and</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email.trim()!=''"</span>&gt;</span></span><br><span class="line">  email=#&#123;email&#125; and</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- OGNL户进行字符串和数字判断 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender==0 or gender==1"</span>&gt;</span></span><br><span class="line">   gender=#&#123;gender&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">trim</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-需求：带了那个值，就用那个，只会用其中一个"><a href="#2-需求：带了那个值，就用那个，只会用其中一个" class="headerlink" title="2.需求：带了那个值，就用那个，只会用其中一个"></a><strong>2.需求：带了那个值，就用那个，只会用其中一个</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Account&gt; getAccsByConditionChoose(Account account); --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccsByConditionChoose"</span> <span class="attr">resultType</span>=<span class="string">"MybatisInterfaceCUID.Account"</span>&gt;</span></span><br><span class="line">  select * from account</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 带了那个用哪个，只会用一个 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">  id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"lastName!=null"</span>&gt;</span></span><br><span class="line">  last_name like #&#123;lastName&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"email!=null"</span>&gt;</span></span><br><span class="line">  email =#&#123;email&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  gender=0</span><br><span class="line">  <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-需求：有值才更新，没有不更新"><a href="#3-需求：有值才更新，没有不更新" class="headerlink" title="3.需求：有值才更新，没有不更新"></a>3.需求：有值才更新，没有不更新</h4><p>set标签方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAcc"</span> &gt;</span>  </span><br><span class="line">  update account </span><br><span class="line">  <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null"</span>&gt;</span></span><br><span class="line">  last_name=#&#123;lastName&#125;,</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null"</span>&gt;</span></span><br><span class="line">  email=#&#123;email&#125;,</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender!=null"</span>&gt;</span></span><br><span class="line">  gender=#&#123;gender&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;   </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>trim标签方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAcc"</span> &gt;</span>  </span><br><span class="line">  update account  </span><br><span class="line">  <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null"</span>&gt;</span></span><br><span class="line">  last_name=#&#123;lastName&#125;,</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null"</span>&gt;</span></span><br><span class="line">  email=#&#123;email&#125;,</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender!=null"</span>&gt;</span></span><br><span class="line">  gender=#&#123;gender&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-foreach遍历集合"><a href="#4-foreach遍历集合" class="headerlink" title="4.foreach遍历集合"></a><strong>4.foreach遍历集合</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Account&gt; getAccsByConditionForeach(List&lt;Integer&gt; ids); --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccsByConditionForeach"</span> <span class="attr">resultType</span>=<span class="string">"MybatisInterfaceCUID.Account"</span>&gt;</span></span><br><span class="line">  select * from account where id in</span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  collection:指定要遍历的集合，用法建议百度一下</span></span><br><span class="line"><span class="comment">  list类型的参数会特殊处理封装在map中，map的key就叫list</span></span><br><span class="line"><span class="comment">  item：将当前遍历出的元素赋值给指定的变量</span></span><br><span class="line"><span class="comment">  separator:每个元素之间的分隔符</span></span><br><span class="line"><span class="comment">  open:遍历出所有结果拼接一个开始的字符</span></span><br><span class="line"><span class="comment">  close：遍历出的所有结果拼接一个结束的字符</span></span><br><span class="line"><span class="comment">  index:索引。遍历list的时候是索引，item就是当前的值</span></span><br><span class="line"><span class="comment">  遍历map的时候index表示的就是map的key，item就是map的值</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  #&#123;变量名&#125;就能取出变量的值也就是当前遍历出的元素</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item_id"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> &gt;</span></span><br><span class="line">   #&#123;item_id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>foreach批量插入（两种方式）：</p><p>方法一：mysql下批量保存，可以foreach遍历，mysql支持values(),(),()….</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public void addAccounts(@Param("accs")List&lt;Account&gt; accs);</span></span><br><span class="line"><span class="comment">  批量保存</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addAccounts"</span>&gt;</span></span><br><span class="line">  insert into account(last_name,email,gender,d_id)</span><br><span class="line">  values</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"accs"</span>  <span class="attr">item</span>=<span class="string">"acc"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">  (#&#123;acc.lastName&#125;,#&#123;acc.email&#125;,#&#123;acc.gender&#125;,#&#123;acc.dept.id&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：其中构造器自行准备，这里省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MybatisInterfaceCUID;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDynamicSql</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title">getSqlSessionFatory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象</span></span><br><span class="line">String resource = <span class="string">"MybatisInterfaceCUID/mybatis_config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"><span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SqlSessionFactory sqlSessionFactory =getSqlSessionFatory();</span><br><span class="line"><span class="comment">//2.获取sqlSession实例，能直接执行已经映射的sql语句不自动提交</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//3.获取接口的实现类对象</span></span><br><span class="line"><span class="comment">//会为接口自动创建代理对象。代理对象去实现增删改查</span></span><br><span class="line">AccountMapperDynamicSql accountMapperDynamicSql = openSession.getMapper(AccountMapperDynamicSql<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">List&lt;Account&gt; accs =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">accs.add(<span class="keyword">new</span> Account(<span class="keyword">null</span>, <span class="string">"zhangsan1"</span>, <span class="string">"zhangsan@zz1"</span>, <span class="string">"1"</span>, <span class="keyword">new</span> Department(<span class="number">1</span>)));</span><br><span class="line">accs.add(<span class="keyword">new</span> Account(<span class="keyword">null</span>, <span class="string">"zhangsan2"</span>, <span class="string">"zhangsan@zz2"</span>, <span class="string">"1"</span>, <span class="keyword">new</span> Department(<span class="number">1</span>)));</span><br><span class="line">accs.add(<span class="keyword">new</span> Account(<span class="keyword">null</span>, <span class="string">"zhangsan3"</span>, <span class="string">"zhangsan@zz3"</span>, <span class="string">"1"</span>, <span class="keyword">new</span> Department(<span class="number">1</span>)));</span><br><span class="line">accs.add(<span class="keyword">new</span> Account(<span class="keyword">null</span>, <span class="string">"zhangsan4"</span>, <span class="string">"zhangsan@zz4"</span>, <span class="string">"1"</span>, <span class="keyword">new</span> Department(<span class="number">1</span>)));</span><br><span class="line">accountMapperDynamicSql.addAccounts(accs);</span><br><span class="line">openSession.commit();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：使用foreach遍历发送完整SQL语句进行插入sql1;sql2;sql3;…<br>这种方式也可以批量删除，修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这种方式需要数据库连接属性allowMultiQueries=true的支持</span></span><br><span class="line"><span class="comment">jdbc.url=jdbc:mysql://localhost:3306/mybatis?allowMultiQueries=true </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addAccounts"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"accs"</span> <span class="attr">item</span>=<span class="string">"acc"</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></span><br><span class="line">  insert into account(last_name,email,gender,d_id)</span><br><span class="line">  values(#&#123;acc.lastName&#125;,#&#123;acc.email&#125;,#&#123;acc.gender&#125;,#&#123;acc.dept.id&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>扩展：oracle数据库不支持values(),(),()…</p><p>oracle支持，方法1：多个insert放在begin   end里面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">SQL1</span><br><span class="line">SQL2</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>方法二：利用中间表，，没整明白略</p><h4 id="5-两个内置参数"><a href="#5-两个内置参数" class="headerlink" title="5.两个内置参数"></a>5.两个内置参数</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  两个内置参数：不只是方法传递过来的参数可以被用来判断，取值。。</span></span><br><span class="line"><span class="comment">  Mybatis默认还有两个内置参数</span></span><br><span class="line"><span class="comment">  _parameter：代表整个参数</span></span><br><span class="line"><span class="comment">  单个参数：_Parameter就是这个参数</span></span><br><span class="line"><span class="comment">  多个参数：参数会被封装成一个map；_parameter就是代表这个map</span></span><br><span class="line"><span class="comment">  _databaseId:如果配置了DataBaseIdProvider标签。</span></span><br><span class="line"><span class="comment">  _databaseId就是代表当前这个数据的的别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- public List&lt;Account&gt; getAccsTestInnerPatameter(Account account); --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccsTestInnerPatameter"</span> <span class="attr">resultType</span>=<span class="string">"MybatisInterfaceCUID.Account"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='mysql'"</span>&gt;</span></span><br><span class="line">  select * from account</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line">  where gender=#&#123;gender&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='oracle'"</span>&gt;</span></span><br><span class="line">  select * from oracle_db</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-bind绑定"><a href="#6-bind绑定" class="headerlink" title="6.bind绑定"></a>6.bind绑定</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAccsTestInnerPatameter"</span> <span class="attr">resultType</span>=<span class="string">"MybatisInterfaceCUID.Account"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- bind:可以将OGNL表达式的值绑定到一个变量中，方便后来应用这个变量的值 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"_lastName"</span> <span class="attr">value</span>=<span class="string">"'%'+lastName+'%'"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='mysql'"</span>&gt;</span></span><br><span class="line"> select * from account</span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line"> where last_name like #&#123;_lastName&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='oracle'"</span>&gt;</span></span><br><span class="line"> select * from oracle_db</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样测试代码，再传参的时候，模糊查询就不用了加%%，而是用bind加上%%</span></span><br><span class="line">List&lt;Account&gt; accs=accountMapperDynamicSql.getAccsTestInnerPatameter(<span class="keyword">new</span> Account(<span class="keyword">null</span>, <span class="string">"z"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line"><span class="keyword">for</span> (Account account : accs) &#123;</span><br><span class="line">System.out.println(account.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-sql标签，抽取可重用的sql片段"><a href="#7-sql标签，抽取可重用的sql片段" class="headerlink" title="7.sql标签，抽取可重用的sql片段"></a>7.sql标签，抽取可重用的sql片段</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用</span><br><span class="line">2.include来引用已经抽取得sql</span><br><span class="line">3.include还可以自定义一些property，sql标签内就可以使用自定义的使用，用$&#123;名称&#125;，#&#123;&#125;不能用</span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"insertColumn"</span>&gt;</span></span><br><span class="line">一些列名  </span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">在取代它们的地方用include</span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h1><p>两级缓存：一级缓存（本地缓存）、二级缓存（全局缓存）</p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>本地缓存：sqlSession级别的缓存。一级缓存是一直开启的.SQLSession级别的map<br>    与数据库同义词会话期间获取相同的数据，直接从缓存中拿，没必要再去查询数据库</p><p>​    一级缓存失效情况（没有使用到当前一级缓存的情况，效果就是，还需要再向数据库发出查询）</p><p>​        1.sqlSession不同<br>​        2.sqlSession相同，查询条件不同（当前一级缓存中还没有这个数据）<br>​        3.sqlSession相同，两次查询之间执行了增删改操作（可能对当前数据有影响）<br>​        4.sqlSession相同，手动清除了一级缓存</p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>基于namespace级别的缓存，一个namespace对应一个二级缓存<br>    <strong>工作机制：</strong><br>        1.一个会话，查询一条数据，这个数据就会被放在当前会话的一级缓存中<br>        2.如果会话关闭，一级缓存中的数据会被保存到二级缓存，新的会话查询信息，就可以参照二级缓存<br>        3.sqlSession===AccountMapper ====&gt;Account<br>                                    DepartmentMapper====&gt;Department<br>            不同namespace查出的数据会放在自己对应的缓存中（map）<br>        效果：数据会从二级缓存中获取，查出的数据都会默认先放在一级缓存中，只有会话提交或者关闭以后一级缓存中的数据才回转到二级缓存中</p><p>​        <strong>使用：</strong><br>​            1.开启全局二级缓存配置<setting name="cacheEnabled" value="true" /><br>​            2.去mapper.xml中配置使用二级缓存<cache></cache><br>​            3.我们的POJO需要实现序列化接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">"FIFO"</span> <span class="attr">flushInterval</span>=<span class="string">"600000"</span> <span class="attr">readOnly</span>=<span class="string">"false"</span> <span class="attr">size</span>=<span class="string">"1024"</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line">eviction:缓存的回收策略</span><br><span class="line">* LRU:最近最少使用的，移除最长时间不被使用的对象</span><br><span class="line">* FIFO：先进先出</span><br><span class="line">* SOFT：软引用，移除基于垃圾回收转改和挼您用规则的对象</span><br><span class="line">* WEAK：弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象</span><br><span class="line">默认：LRU</span><br><span class="line">flushInterval：缓存刷新间隔，默认不清空，毫秒为单位</span><br><span class="line">readOnly：是否只读</span><br><span class="line">*true：只读：Mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据，所以为了加快速度，会直接将数据在缓存中引用交给用户。不安全，速度快</span><br><span class="line">*false：非只读：Mybatis觉得获取的数据可能会被修改，会利用反序列化的技术克隆一份数据给你。安全，慢</span><br><span class="line">size:缓存存放多少元素</span><br><span class="line">type：指定自定义缓存的全类名，实现Cache接口即可</span><br></pre></td></tr></table></figure><p><strong>和缓存有关的设置和属性</strong><br>    1.cacheEnabled=true,false：关闭缓存，关闭二级缓存，一级缓存可用<br>    2.每个select标签都有userCache=”true”:false,不使用缓存（一级缓存使用，二级缓存不使用）<br>    3.每个增删改标签的：flushCache=”true”:增删改执行完成后就会清除缓存（都会清空）<strong>**</strong><br>    4.sqlSession.clearCache():只是清除当前session的一级缓存<br>    5.localChcheScope：本地缓存作用域；session | statement</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id="selectUsers" resultType="com.dzu.bean.User"&gt;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line">&lt;<span class="keyword">where</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test="name!=null and name!=''"&gt;</span><br><span class="line"><span class="type">name</span> <span class="keyword">like</span> concat(<span class="string">'%'</span>,#&#123;<span class="type">name</span>&#125;,<span class="string">'%'</span>)</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test="email!=null and email!=''"&gt;</span><br><span class="line">email <span class="keyword">like</span> concat(<span class="string">'%'</span>,#&#123;email&#125;,<span class="string">'%'</span>)</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test="phone!=null and phone!=''"&gt;</span><br><span class="line">phone <span class="keyword">like</span> concat(<span class="string">'%'</span>,#&#123;phone&#125;,<span class="string">'%'</span>)</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test="gender==0 or gender==1"&gt;</span><br><span class="line">  <span class="keyword">and</span> gender=#&#123;gender&#125;</span><br><span class="line">  &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">where</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这里介绍mybatis的基本使用，配置。其中包括全局配置文件，SQL映射文件，接口式编程，动态sql以及缓存等内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaEE" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/javaEE/"/>
    
      <category term="ssm框架" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/javaEE/ssm%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="mybatis" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/mybatis/"/>
    
      <category term="javaEE" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/javaEE/"/>
    
  </entry>
  
  <entry>
    <title>test02</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/05/21/test02/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/05/21/test02/</id>
    <published>2020-05-21T15:47:59.000Z</published>
    <updated>2020-05-22T08:38:39.731Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈哈哈哈</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;哈哈哈哈哈&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="测试" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>这是测试</title>
    <link href="https://github.com/leecode1024/leecode1024.github.io/2020/05/21/test/"/>
    <id>https://github.com/leecode1024/leecode1024.github.io/2020/05/21/test/</id>
    <published>2020-05-21T13:27:05.000Z</published>
    <updated>2020-05-21T13:48:03.940Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="测试" scheme="https://github.com/leecode1024/leecode1024.github.io/categories/ceshi/"/>
    
    
      <category term="java" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/java/"/>
    
      <category term="html" scheme="https://github.com/leecode1024/leecode1024.github.io/tags/html/"/>
    
  </entry>
  
</feed>
